{
    "version": "https://jsonfeed.org/version/1",
    "title": "Rainnnの",
    "description": "blingbling~",
    "home_page_url": "https://rainnn-w.github.io",
    "items": [
        {
            "id": "https://rainnn-w.github.io/posts/32775.html",
            "url": "https://rainnn-w.github.io/posts/32775.html",
            "title": "(零基础)pycharm+服务器+anaconda虚拟环境|配置深度学习环境",
            "date_published": "2023-08-07T09:05:55.000Z",
            "content_html": "<h1 id=\"零基础pycharm服务器anaconda虚拟环境配置深度学习环境\"><a class=\"anchor\" href=\"#零基础pycharm服务器anaconda虚拟环境配置深度学习环境\">#</a> (零基础) pycharm + 服务器 + anaconda 虚拟环境 | 配置深度学习环境</h1>\n<h2 id=\"1安装pycharm\"><a class=\"anchor\" href=\"#1安装pycharm\">#</a> 1. 安装 pycharm</h2>\n<p>在官网下载安装即可，附链接：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9weWNoYXJtL2Rvd25sb2FkLz9zZWN0aW9uPXdpbmRvd3M=\">Download PyCharm: Python IDE for Professional Developers by JetBrains</span></p>\n<p><strong>注意：只有 professional 版本的 pycharm 可以连接服务器</strong></p>\n<p>学生可激活后免费使用，教程可参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81NTUzNDY3MjE=\">学生如何免费使用（激活）Pycharm（专业版）- 学生认证教程 - 知乎 (zhihu.com)</span></p>\n<p>具体安装步骤网上教程很多，可以自行搜索</p>\n<h2 id=\"2连接远程服务器\"><a class=\"anchor\" href=\"#2连接远程服务器\">#</a> 2. 连接远程服务器</h2>\n<p>1. 在 pycharm 打开你的深度学习项目</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281110627.png\" alt></p>\n<p>2. 上方找到 Tools--Deployment--Configuration</p>\n<p>3. 点击加号，选择 SFTP<img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281110690.png\" alt=\"image-20230807171459409\"></p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3JhaW5ubi13L1BpY3R1cmVzQG1haW4vYmxvZy8yMDIzMDgyODExMTA3MjAucG5n\">https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281110720.png</span>&quot; alt=&quot;image-20230807171518069&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>起一个名字并输入，点击 ok<img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281111393.png\" alt=\"image-20230807171626347\"></p>\n<p>4. 如图，点击<img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281111264.png\" alt=\"image-20230807171736801\"></p>\n<p>点击加号</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281111499.png\" alt=\"image-20230807171814607\"></p>\n<p>输入服务器相关的信息<br>\n Host、port、username、password</p>\n<p>输入完成后可点击 Test Connection 测试连接是否成功，成功后点击 ok</p>\n<p>5. 如图在这里选择你刚刚配置好的 SSH<img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281112148.png\" alt=\"image-20230807171953663\"></p>\n<p>这里的 root path 对应服务器中的路径，默认即可，不用修改</p>\n<p>配置好点击 ok 即可</p>\n<h2 id=\"3在服务器创建虚拟环境并配置深度学习环境\"><a class=\"anchor\" href=\"#3在服务器创建虚拟环境并配置深度学习环境\">#</a> 3. 在服务器创建虚拟环境并配置深度学习环境</h2>\n<p>1. 找到 pycharm 最下方的 Terminal 并点击</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281112910.png\" alt=\"image-20230807172324807\"></p>\n<p>点击下拉三角，选择你刚连接的 server name 会服务器的命令窗口<br>\n这里使用的 Linux 服务器</p>\n<p>（假定已经安装好 anaconda 了，若未安装有很多教程可以参考，此处不赘述）</p>\n<p>可输入 <code>conda</code>  确认是否已安装</p>\n<p>2. 在命令窗口输入 <code>conda env list</code>  可查看已有的环境</p>\n<p>我们输入以下命令：</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda create <span class=\"token parameter variable\">--name</span> xxx <span class=\"token assign-left variable\">python</span><span class=\"token operator\">=</span>x.x<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p>来创建虚拟环境 xxx 是环境的名字，x.x 为指定 python 版本</p>\n<p>3. 激活环境</p>\n<p>先输入 <code>bash</code>  命令，再输入以下命令：</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda activate xxx <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p>xxx 为你刚创建的虚拟环境的名字</p>\n<h2 id=\"4设置python编译器\"><a class=\"anchor\" href=\"#4设置python编译器\">#</a> 4. 设置 python 编译器</h2>\n<p>1.File--Settings-- 可搜索找<img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281112803.png\" alt=\"image-20230807173609465\"> 到 python Interpreter<br>\n2.Add Interpreter-- On SSH...</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3JhaW5ubi13L1BpY3R1cmVzQG1haW4vYmxvZy8yMDIzMDgyODExMTI3MDQucG5n\">https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281112704.png</span>&quot; alt=&quot;image-20230807173717721&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>3. 选择 Existing，SSH Server 下拉三角选择你刚连接好的<br>\n Next--Next</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281112847.png\" alt=\"image-20230807173819091\"></p>\n<p>4. 选择 Virtualenv Environment<br>\nEnvironment 选则 Existing<br>\nInterpreter 点击右边的三个点找到你 conda 创建的虚拟环境的路径<br>\n例如我的在：/opt/conda/envs/xxx</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281112337.png\" alt=\"image-20230807173948135\"></p>\n<p>在 /opt/conda/envs/xxx/bin 路径中找到 python 文件选中后点击 ok 即可</p>\n<p>5.Sync folders 设置路径<br>\n点击右边的文件夹后将 Remote 改为你的项目将要放置的路</p>\n<p>6. 点击 create 创建成功</p>\n<p>7. 查看一下你 python Interpreter 选择的是否正确<img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281112873.png\" alt=\"image-20230807174543242\"></p>\n<p>下面显示的是这个虚拟环境中所安装的包（我这里有很多了）</p>\n<p>点击 ok 即可</p>\n<h2 id=\"5配置深度学习环境运行程序\"><a class=\"anchor\" href=\"#5配置深度学习环境运行程序\">#</a> 5. 配置深度学习环境 + 运行程序</h2>\n<p>我们之前已经在 Terminal 窗口进入到我们创建的虚拟环境了，使用 <code>cd</code>  命令修改到你刚刚选择的上传程序的路径</p>\n<p><code>conda list</code>  可以查看已安装的包</p>\n<p>使用 <code>conda install xxx</code>  安装需要的包（可指定版本）</p>\n<p>若 <code>conda</code>  安装不了也可以使用 <code>pip install xxx</code></p>\n<p>当需要的包都装好了，直接右上小绿三角运行就可以啦～</p>\n<blockquote>\n<p>注：可能会遇到在虚拟环境中都装好了， <code>conda list</code>  查看也有，但是为什么 pycharm 中检测不到呢？</p>\n<p>可以重启 pycharm 或者</p>\n<p>按下 shift 键 2 次，搜索 Rescan Available Python Modules and Packages 并点击刷新安装的包（好用）</p>\n</blockquote>\n<h2 id=\"6本地修改同步更新到服务器上\"><a class=\"anchor\" href=\"#6本地修改同步更新到服务器上\">#</a> 6. 本地修改同步更新到服务器上</h2>\n<p>Tools--Deployment--Options</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281113096.png\" alt=\"image-20230807175147741\"></p>\n<p>这里三个选项，always 就是一直同步，我这里选择的是按下 Ctrl+S 后同步<br>\n按需修改，修改后点击 ok 即可</p>\n<p>全部过程有很多很多坑，网上的教程大多都只有其中一部分，基于自己的操作经历整理完成了这篇 (ㄒ o ㄒ)/~~</p>\n",
            "tags": [
                "lab"
            ]
        },
        {
            "id": "https://rainnn-w.github.io/posts/43414.html",
            "url": "https://rainnn-w.github.io/posts/43414.html",
            "title": "课程学习及考试经验分享 （大一）",
            "date_published": "2023-06-21T15:10:27.850Z",
            "content_html": "<h1 id=\"课程学习及考试经验分享-大一\"><a class=\"anchor\" href=\"#课程学习及考试经验分享-大一\">#</a> 课程学习及考试经验分享 （大一）</h1>\n<h2 id=\"大一上\"><a class=\"anchor\" href=\"#大一上\">#</a> 大一上</h2>\n<h3 id=\"1高等数学\"><a class=\"anchor\" href=\"#1高等数学\">#</a> 1. 高等数学</h3>\n<p>每年都会有萌新们觉得很难，但只要好好学，绝对能拿超高分，满分也不是问题！</p>\n<p>平时跟着课程进度做吉米多维奇和课后题，标注难点供考前复习食用，推荐记录笔记，不用记过多概念，多记解题技巧，学会自己总结，遇到不会的专题可以上 b 站大学学习。</p>\n<p>考前刷 2 遍 + 往年题，不会的题型做到会为止，过一遍吉米多维奇，过一遍数学书例题知识点和课后难题。</p>\n<p>考试题多半是书上和吉米上的原题。</p>\n<p>授课老师不同平时分给的方式会不同，可自行打听～</p>\n<p>考试基本 1h 左右都能答完，建议多检查一下（计算多算几遍，时间充裕，可以换不同方法算，确保正确），答题步骤要书写规范（否则可能会和满分擦肩而过）</p>\n<p>挂科的人很少，90 + 一大批，大家要有信心～～</p>\n<h3 id=\"2中国近现代史纲要\"><a class=\"anchor\" href=\"#2中国近现代史纲要\">#</a> 2. 中国近现代史纲要</h3>\n<p>授课老师不同给分高低也不同</p>\n<p>期末考试是开卷写论文</p>\n<p>最终得分都很高，基本 90+</p>\n<h3 id=\"3体育\"><a class=\"anchor\" href=\"#3体育\">#</a> 3. 体育</h3>\n<p>改革后体测分数占比 40%，相当高</p>\n<p>体测成绩不好，即使选的项目得分超高也没啥用了呜呜呜 /(ㄒ o ㄒ)/~~</p>\n<p>不同项目不同老师给分情况不太一样，自行咨询～</p>\n<h3 id=\"4计算机引论\"><a class=\"anchor\" href=\"#4计算机引论\">#</a> 4. 计算机引论</h3>\n<p>上课听听会有所收获，但还是靠考前突击</p>\n<p>题型：判断 选择 名词解释 简答  （全英文题目，可中英文混合作答，不影响得分，推荐全中文作答，背英文名词有点难度）</p>\n<p>书上都有答案，只是考试闭卷</p>\n<p>选择和判断有个题库，非常准，我们那年判断选择全是题库原题，对题库熟悉，几分钟就能全部满分做完</p>\n<p>名词解释和简答考的非常全面，全靠背诵记忆了 /(ㄒ o ㄒ)/~~</p>\n<blockquote>\n<p>可以参考一下博客内的计算机引论笔记，有标注我们那年的考点，我当时做了全书的思维导图进行的背诵，做到能在脑中默写思维导图（？）</p>\n</blockquote>\n<h3 id=\"5linux应用\"><a class=\"anchor\" href=\"#5linux应用\">#</a> 5.LINUX 应用</h3>\n<p>大部分同学反映上课听不懂，但是老师讲的还是不错的，坐后排会听不清，网课就听的非常清晰！（任国珍老师</p>\n<p>考前看 ppt 突击（可参考博客内笔记</p>\n<p>一晚就能拿高分，学的越久分越高</p>\n<h3 id=\"6新生研讨\"><a class=\"anchor\" href=\"#6新生研讨\">#</a> 6. 新生研讨</h3>\n<p>水</p>\n<p>结课考试是写篇论文上交</p>\n<p>大家都一个分</p>\n<h3 id=\"7高级程序设计\"><a class=\"anchor\" href=\"#7高级程序设计\">#</a> 7. 高级程序设计</h3>\n<p>学分很高，需要上课好好听，考前好好复习，需要记笔记</p>\n<p>多做往年题和 pta 上的题</p>\n<p>做往年题是要针对不同题型研究，总结方法技巧</p>\n<p>最后一道大题考链表，熟练掌握，深入理解后写起来会很轻松</p>\n<p>实验部分认真做都能做出来，按照老师要求提交即可</p>\n<h3 id=\"8英语\"><a class=\"anchor\" href=\"#8英语\">#</a> 8. 英语</h3>\n<p>2 级班题型如下：</p>\n<p>听力：短对话 + 长对话 + 文章 20 题 1 题 1 分</p>\n<p>阅读 4 篇 20 题 1 题 2 分</p>\n<p>选词填空 10 题 1 题 1 分</p>\n<p>翻译 （书上课后翻译题）5 题 1 题 3 分</p>\n<p>作文（120--180 词）15 分</p>\n<p>平时分要做 we learn + 口语考试（读课文 + 讨论）+ 分老师</p>\n<p>口语考试：读课文是学习的单元中要求背诵的段落，要求熟读；讨论是视听说中的相关主题（小组抽取一个题目）小组讨论发言</p>\n<h3 id=\"9大学生心理健康教育\"><a class=\"anchor\" href=\"#9大学生心理健康教育\">#</a> 9. 大学生心理健康教育</h3>\n<p>智慧树 + 线下课 水</p>\n<p>期末考试课上写作文</p>\n<h3 id=\"10形势与政策\"><a class=\"anchor\" href=\"#10形势与政策\">#</a> 10. 形势与政策</h3>\n<p>辅导员上课</p>\n<p>期末考试课上写作文</p>\n<h2 id=\"大一下\"><a class=\"anchor\" href=\"#大一下\">#</a> 大一下</h2>\n<h3 id=\"1高等数学2\"><a class=\"anchor\" href=\"#1高等数学2\">#</a> 1. 高等数学（2）</h3>\n<p>参考高等数学（1） 难度有所上升，与（1）有关联</p>\n<p>挂科人数很多，但也有大佬满分，还是多做题吧！！</p>\n<h3 id=\"2大学物理\"><a class=\"anchor\" href=\"#2大学物理\">#</a> 2. 大学物理</h3>\n<p>学的时候可能会觉得难，考前多刷题，老师们人都很好，基本不会给挂的，拿高分也很容易</p>\n<h3 id=\"3体育-2\"><a class=\"anchor\" href=\"#3体育-2\">#</a> 3. 体育</h3>\n<p>同上</p>\n<h3 id=\"4线性代数\"><a class=\"anchor\" href=\"#4线性代数\">#</a> 4. 线性代数</h3>\n<p>10 道英文判断（有点难度），要认识专业名词，了解基本概念</p>\n<p>5 道填空 + 一些大题（大题基本是计算计算）</p>\n<p>有附加题 10 分（通常是证明题）每年情况不太一样，可以看看往年题，10 分一道的一般都很难</p>\n<p>满分 100，考 110 最终分数也是 100，一个班十几个满分吧，拿满分不难</p>\n<p>题非常简单，多看书，会做书上例题就可以，想自我提升可以看山大版线性代数、做吉米</p>\n<p>线性代数在以后的很多领域都很有用处，学的简单也不太好，建议好好卷卷（不为考试）</p>\n<h3 id=\"5离散数学1\"><a class=\"anchor\" href=\"#5离散数学1\">#</a> 5. 离散数学（1）</h3>\n<p>分数一般，没有预想的给分高，90 + 有十多个</p>\n<p>考试有难度，但难度不大，往年题少，要多找找相关的题，多做多练，考试答题还是会很顺利的</p>\n<h3 id=\"6c程序设计\"><a class=\"anchor\" href=\"#6c程序设计\">#</a> 6.c++ 程序设计</h3>\n<p>往年题很少，考试题<strong>很难</strong>，拿高分很难，挂科人数也比较多，班级 90 + 十多个</p>\n<p>题型与 java 类似，选择 + 读程序 + 写程序</p>\n<p>2.5 学分的限选课</p>\n<p>自己觉得 c++ 是整个学年考的最不好的一科，大家务必重视，多复习，多看书</p>\n<p>实验部分是做 pta 的题，有一些题很难，但认真做总会有帮助的</p>\n<h3 id=\"7高级程序开发\"><a class=\"anchor\" href=\"#7高级程序开发\">#</a> 7. 高级程序开发</h3>\n<p>要做课设，谨慎<strong>组队</strong>，队友基础如何，绩点如何不重要，重要的是他要靠谱，不会各种意义上的跑路</p>\n<h3 id=\"8英语-2\"><a class=\"anchor\" href=\"#8英语-2\">#</a> 8. 英语</h3>\n<p>同大一上</p>\n<h3 id=\"9军事理论\"><a class=\"anchor\" href=\"#9军事理论\">#</a> 9. 军事理论</h3>\n<p>开卷考试，全程翻书，50 个填空，6 道简答，2 道论述大题（所有书上都有原话，全程抄书，手抄到酸）</p>\n<p>分数不算超高，班级最高分在 95+</p>\n<p>90 分以上人也不多，10 多个</p>\n<p>给分不太理解，大家都觉得答得很好（</p>\n<h3 id=\"10形势与政策-2\"><a class=\"anchor\" href=\"#10形势与政策-2\">#</a> 10. 形势与政策</h3>\n<p>辅导员上课</p>\n<p>期末考试课上写作文</p>\n<h3 id=\"11思想道德与法制\"><a class=\"anchor\" href=\"#11思想道德与法制\">#</a> 11. 思想道德与法制</h3>\n<p>分数普遍不高，班最高 93</p>\n<p>有的老师很重视课上发言，大家因老师而异吧</p>\n<p>考试是开卷写论文</p>\n<p>平时分是小组写调研报告</p>\n<p>分数是 5：5（因老师而异</p>\n",
            "tags": []
        },
        {
            "id": "https://rainnn-w.github.io/posts/20389.html",
            "url": "https://rainnn-w.github.io/posts/20389.html",
            "title": "C++ Notes",
            "date_published": "2023-06-21T15:02:00.067Z",
            "content_html": "<h1 id=\"c\"><a class=\"anchor\" href=\"#c\">#</a> C++</h1>\n<h2 id=\"零-碎\"><a class=\"anchor\" href=\"#零-碎\">#</a> 零、碎</h2>\n<h3 id=\"1选择-判断-知识点\"><a class=\"anchor\" href=\"#1选择-判断-知识点\">#</a> 1. 选择 判断 知识点</h3>\n<p>1. 逻辑运算符两侧运算对象的数据类型可以是任何类型的数据</p>\n<p>2. <code>if (!x)</code>  等价于  <code>if (x==0||x=='0')；</code></p>\n<p>3. <code>x = ++y</code>   <code>++x =y</code>  是正确的   <code>(x+y)++</code>  是错误的</p>\n<p>4. 条件编译允许在编译时包含不同的代码</p>\n<p>5.C++ 中，cin 是预定义的对象</p>\n<p>6. 使用提取符 (&lt;&lt;) 可以输出各种基本数据类型的变量的值，也可以输出指针值。</p>\n<p>7. 和指针类似，引用被初始化后，还可以引用别的变量。❌</p>\n<p>8. 以下程序中，new 语句干了什么。</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int** num;\nnum &#x3D; new int* [20];<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n<p>分配了长度为 20 的整数指针数组空间，并将 num [0] 的指针返回。</p>\n<p>9.c++ 中不允许嵌套函数（在一个函数中定义新函数）</p>\n<p>10. 抽象类只能作为基类来使用，其纯虚函数的实现由派生类给出；</p>\n<p>11. 类的非静态成员函数才有 this 指针</p>\n<p>12.<strong> 因为静态成员函数不能是虚函数</strong>，所以它们不能实现多态。</p>\n<p>13. <code>int i; int &amp;ri=i;</code>  对于这条语句，ri 和 i 这两个变量代表的是同一个存储空间。 （引用）</p>\n<p>14. 构造函数可以被重载，<strong>析构函数不可以被重载</strong>。因为构造函数可以有多个且可以带参数，而析构函数只能有一个，且不能带参数。</p>\n<p>15. 如果基类声明了带有形参表的构造函数，则派生类就应当声明构造函数</p>\n<p>16. 基类中的私有成员不论通过何种派生方式，到了派生类中均变成不可直接访问成员。</p>\n<p>17. 纯虚函数与函数体为空的虚函数等价。❌</p>\n<p>18. 不可以对数组类型进行整体赋值</p>\n<p>19. 函数可以返回一个不带索引的数组名</p>\n<p>20.&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3JhaW5ubi13L1BpY3R1cmVzQG1haW4vYmxvZy8yMDIzMDgyODExMDg3NjAucG5n\">https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281108760.png</span>&quot; alt=&quot;image-20230615162748030&quot;  /&gt;（B）</p>\n<p>21.&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3JhaW5ubi13L1BpY3R1cmVzQG1haW4vYmxvZy8yMDIzMDgyODExMDg1NzcucG5n\">https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281108577.png</span>&quot; alt=&quot;image-20230615171122503&quot;  /&gt;（B）</p>\n<p>22. 指向函数的指针变量 p 可以先后指向不同的同种类型的函数，但不可作加减运算。</p>\n<p>23. 数组名就是数组的起始地址，数组的指针就是数组的起始地址。</p>\n<p>24. 用指针变量作函数参数，可以得到多个变化了的值。</p>\n<p>25. 成员函数是公有的，在内存中存在一份，各个对象都可以使用</p>\n<h3 id=\"2读程序-计算\"><a class=\"anchor\" href=\"#2读程序-计算\">#</a> 2. 读程序 计算</h3>\n<p>（1）</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;若\n#define N 3\n#define Y(n) ((N+1)*n) \n&#x2F;&#x2F;则\nz&#x3D;2*（N+Y(5+1)）&#x2F;&#x2F;z值为<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<blockquote>\n<p>48</p>\n</blockquote>\n<p>（2）负数对正数取余结果为负数，正数对负数取余结果为正数</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">-7%5&#x3D;-2；\n7%-5&#x3D;2；\n-7%-5&#x3D;-2;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></p>\n<p>（3）运算符优先级</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int x&#x3D;3,y&#x3D;4,z;  \nz&#x3D;x++&#x3D;&#x3D;4 || ++y&#x3D;&#x3D;5;  \ncout&lt;&lt;y&lt;&lt;z;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></p>\n<blockquote>\n<p>51</p>\n</blockquote>\n<p><pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">int a&#x3D;0;\ncout &lt;&lt; (a&#x3D;4+5,a+5),a+25;\ncout &lt;&lt; ((a&#x3D;4+5,a+5),a+25);\ncout &lt;&lt; (a&#x3D;3*5,a*4),a+15;\ncout &lt;&lt; ((a&#x3D;3*5,a*4),a+15);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<blockquote>\n<p>14346030</p>\n<p>运算符优先级：括号运算 &gt; 加法 &gt; 赋值 &gt; 逗号</p>\n</blockquote>\n<p>（4）条件运算符</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int a &#x3D; 1, b &#x3D; 2, c &#x3D; 3, d &#x3D; 4;\nint answer &#x3D; a &lt; b ? a : b &lt; c ? b : c &lt; d ? c : d;\ncout &lt;&lt; answer;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></p>\n<blockquote>\n<p>1</p>\n<p>条件运算符的结合性是从右到左结合的，先算 c＜d？c:d 返回 c=3；再算 a＜b？a:c 返回值为 1。</p>\n</blockquote>\n<p>（5）注意细节！</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;执行以下的程序片段，将输出几个数字？\nfor(i&#x3D;0;i&lt;3;i++);\n\n       cout&lt;&lt;i;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<blockquote>\n<p>1 个数字，for 循环没有方法体</p>\n<p>输出：2</p>\n</blockquote>\n<p>（6） <code>bool</code></p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">bool flag &#x3D; 2021;&#x2F;&#x2F;flag 1\ncout &lt;&lt; (flag &gt; 2019) + flag * 2 + bool(4) &lt;&lt; endl; &#x2F;&#x2F;输出结果为3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n<p>（7）string</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">char s[5];\ncin.getline(s,4); &#x2F;&#x2F;只读入3位（会存&#39;\\0&#39;）\nint n &#x3D; strlen(s);\ncout &lt;&lt; s &lt;&lt; &quot; &quot;;\ncout &lt;&lt; n &lt;&lt; &quot; &quot;;\ncout &lt;&lt; sizeof(s) &lt;&lt; &quot; &quot;;\n\nchar* q&#x3D;&quot;abcde&quot;;\nq+&#x3D;2;\ncout&lt;&lt;q; &#x2F;&#x2F;cde<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<blockquote>\n<p>输入：ABCDE</p>\n<p>输出：ABC 3 5</p>\n</blockquote>\n<p>（8）5 4 6</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281108350.png\" alt=\"image-20230615170300301\"></p>\n<h4 id=\"指针阅读程序\"><a class=\"anchor\" href=\"#指针阅读程序\">#</a> 指针阅读程序</h4>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int a[] &#x3D; &#123;1,2,3,4,5&#125;;\n   int *p; &#x2F;&#x2F;a[0]\n   p &#x3D; a+1; &#x2F;&#x2F;a[1]\n   cout &lt;&lt; a &lt;&lt; endl; &#x2F;&#x2F;地址\n   cout &lt;&lt; &amp;a &lt;&lt; endl; &#x2F;&#x2F;与a相同 地址\n   &#x2F;&#x2F;cout &lt;&lt; a++ &lt;&lt; endl; &#x2F;&#x2F;Error\n   cout &lt;&lt; &amp;a+1 &lt;&lt; endl; &#x2F;&#x2F;下一位地址\n   cout &lt;&lt; *(a+1) &lt;&lt; endl; &#x2F;&#x2F;2\n   cout &lt;&lt; *p &lt;&lt; p[1] &lt;&lt; a[1] &lt;&lt; endl;&#x2F;&#x2F;232\n   cout &lt;&lt; *p++ &lt;&lt; endl; &#x2F;&#x2F;2 a[2]\n   (*p)++; &#x2F;&#x2F; a[2]++ 即a[2]&#x3D;4\n   cout &lt;&lt; p &lt;&lt; endl; &#x2F;&#x2F;输出地址\n   cout &lt;&lt; *p &lt;&lt; endl; &#x2F;&#x2F;4\n   cout &lt;&lt; *(a+2); &#x2F;&#x2F;4 此时a[2]已经等于4<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;指针数组\n    int a[]&#x3D;&#123;1,3,5,7,9&#125;;\n    int *p[]&#x3D;&#123;a,a+1,a+2,a+3,a+4&#125;;\n    cout &lt;&lt; a[4] &lt;&lt; endl; &#x2F;&#x2F;9\n    cout &lt;&lt; &amp;a[4] &lt;&lt; endl; &#x2F;&#x2F;地址 0x61fe10\n    cout &lt;&lt; p[4] &lt;&lt; endl; &#x2F;&#x2F;同上地址 0x61fe10\n    cout &lt;&lt; *p[4] &lt;&lt; endl; &#x2F;&#x2F;9\n    cout &lt;&lt; &amp;p[4] &lt;&lt; endl; &#x2F;&#x2F;地址 0x61fdf0\n    cout &lt;&lt; *(a+4) &lt;&lt; endl;&#x2F;&#x2F;9\n    cout &lt;&lt; *(p+4) &lt;&lt; endl; &#x2F;&#x2F;地址 0x61fe10\n\tcout &lt;&lt; **(p+4) &lt;&lt; endl; &#x2F;&#x2F;9\n    cout &lt;&lt; *(p+4)-*(p+0) &lt;&lt; endl; &#x2F;&#x2F;4 运算顺序（\n    cout &lt;&lt; (*(p+4)-*(p+0)) &lt;&lt; endl; &#x2F;&#x2F;4\n    cout &lt;&lt; *(a+3)%a[4] &lt;&lt; endl; &#x2F;&#x2F;7 （7%9）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;数组指针\n    int (*p)[5];\n    int a[5]&#x3D;&#123;1,3,5,7,9&#125;;\n    cout &lt;&lt; p &lt;&lt; endl; &#x2F;&#x2F;地址0x10\n    cout &lt;&lt; a &lt;&lt; endl; &#x2F;&#x2F;地址0x61fe00\n    cout &lt;&lt; p[2] &lt;&lt; endl; &#x2F;&#x2F;地址0x38\n    cout &lt;&lt; *p &lt;&lt; endl; &#x2F;&#x2F;地址0x10\n    cout &lt;&lt; a+2 &lt;&lt; endl; &#x2F;&#x2F;地址0x61fe08\n    cout &lt;&lt; *(a+2) &lt;&lt; endl; &#x2F;&#x2F;5\n    cout &lt;&lt; p++ &lt;&lt; endl; &#x2F;&#x2F;地址0x10\n    cout &lt;&lt; *p++ &lt;&lt; endl; &#x2F;&#x2F;地址0x24\n    cout &lt;&lt; *p &lt;&lt; endl; &#x2F;&#x2F;0x38<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h4 id=\"派生类构造函数\"><a class=\"anchor\" href=\"#派生类构造函数\">#</a> 派生类构造函数</h4>\n<p>1. 调用基类构造函数，对基类数据成员初始化；</p>\n<p>2. 调用子对象构造函数，对子对象数据成员初始化；</p>\n<p>3. 再执行派生类构造函数本身，对派生类数据成员初始化。</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\nusing namespace std;\nclass A&#123;\n\tpublic: A(int aa)&#123;cout&lt;&lt; aa;&#125;;\n&#125;;\nclass B:public A&#123;\n\tint b; A a;&#x2F;&#x2F; 子对象a\n  public:\n\tB(int bb):a(bb-2),A(bb+1),b(bb+2)&#123;\n\t\tb &#x3D; bb-4;\n\t\tcout &lt;&lt; b &lt;&lt;endl;\n\t&#125;\n&#125;;\nint main()&#123; A a(3); B b(4); &#125;\n&#x2F;&#x2F;3520<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>\n<p>C++ 声明 + 赋值一个对象指针时，调用默认构造函数。如果只是声明，那 么不会调用构造函数，分配空间给 p，但是不可用。</p>\n</li>\n<li>\n<p>默认构造函数（即无参构造函数）不一定存在，但是拷贝构造函数总是会存在。</p>\n</li>\n</ul>\n<h2 id=\"一-概述\"><a class=\"anchor\" href=\"#一-概述\">#</a> 一、概述</h2>\n<h3 id=\"一程序设计语言\"><a class=\"anchor\" href=\"#一程序设计语言\">#</a> （一）程序设计语言</h3>\n<h4 id=\"1低级语言\"><a class=\"anchor\" href=\"#1低级语言\">#</a> 1. 低级语言</h4>\n<ul>\n<li>\n<p>机器语言（采用指令编码和数据的存储地址来表示指令的操作以及操作数）</p>\n<p>可以直接在计算机上执行</p>\n</li>\n<li>\n<p>汇编语言（用符号来表示指令的操作以及操作数）</p>\n<p>必须翻译成机器语言才能执行（翻译工作由程序 assembler 汇编程序 来自动完成）</p>\n</li>\n</ul>\n<h4 id=\"2高级语言\"><a class=\"anchor\" href=\"#2高级语言\">#</a> 2. 高级语言</h4>\n<h3 id=\"二c程序的构成\"><a class=\"anchor\" href=\"#二c程序的构成\">#</a> （二）c++ 程序的构成</h3>\n<p>1. 每个 c++ 程序必须有且仅有一个名字为 main 的全局函数，称为主函数，程序<strong>从全局函数 main 开始执行</strong>，main 函数的返回值类型为 <code>int</code></p>\n<blockquote>\n<p>一般情况下，返回 0 表示程序正常结束，返回负数（如 - 1）表示程序非正常结束</p>\n</blockquote>\n<p>2. 一个 c++ 程序可以存放在一个或多个文件（称为源文件）中，每个源文件包含一些程序实体的定义，其中有且仅有一个源文件中包含全局函数 <code>main</code></p>\n<h3 id=\"三词法\"><a class=\"anchor\" href=\"#三词法\">#</a> （三）词法</h3>\n<p>1. 标识符</p>\n<ul>\n<li>\n<p>标识符命名规则：</p>\n<ul>\n<li>由 ** 大小写中英文字母、数字、下划线、美元符号（$)** 构成</li>\n<li><strong>第一个字符不能是数字</strong></li>\n<li>标识符通常用作程序实体的名字</li>\n<li><strong>大小写字母有区别</strong></li>\n</ul>\n<p>（C++ 语言保留了一些名字供语言本身使用，这些名字不能被用作标识符。）</p>\n</li>\n</ul>\n<p>2. 关键字</p>\n<p>3. 字面常量</p>\n<p>4. 操作符</p>\n<p>5. 标点符号</p>\n<ul>\n<li>\n<p>注释不构成可执行程序的一部分</p>\n<p>不参加编译，也不会出现在目标程序中</p>\n</li>\n<li>\n<p>预处理和函数头后面不需要加 <code>;</code>  表示结束</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n</li>\n<li>\n<p>续行符 <code>\\</code> （将一个单词分成多行来写，需在每行最后加续行符）</p>\n</li>\n</ul>\n<h3 id=\"四cpp程序的运行\"><a class=\"anchor\" href=\"#四cpp程序的运行\">#</a> （四）cpp 程序的运行</h3>\n<blockquote>\n<ul>\n<li>编写 C++ 程序一般需经过的几个步骤依次是：编辑、编译、连接、运行</li>\n<li>程序执行的顺序：本程序文件的 main 函数开始，到 main 函数结束</li>\n</ul>\n</blockquote>\n<ul>\n<li>源程序的扩展名： <code>.cpp</code> / <code>.h</code></li>\n<li>目标文件： <code>.obj</code></li>\n<li>可执行文件： <code>.exe</code></li>\n</ul>\n<h3 id=\"五进制转换\"><a class=\"anchor\" href=\"#五进制转换\">#</a> （五）进制转换</h3>\n<ul>\n<li>\n<p>十进制整数 ---- 二进制 / 八进制 / 十六进制：除以 2/8/16 从下往上取余</p>\n</li>\n<li>\n<p>十进制小数 ---- 二进制 / 八进制 / 十六进制：乘以 2/8/16 从上往下取整</p>\n</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281109020.png\" alt=\"image-20230305174903120\"></p>\n<ul>\n<li>二进制 / 八进制 / 十六进制 ---- 十进制：</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281109311.png\" alt=\"image-20230305175103292\"></p>\n<ul>\n<li>二进制 ---- 八进制 / 十六进制：</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281109178.png\" alt=\"image-20230305175202024\"></p>\n<h3 id=\"六原码-反码-补码\"><a class=\"anchor\" href=\"#六原码-反码-补码\">#</a> （六）原码 反码 补码</h3>\n<ul>\n<li>原码：2 进制表示 （通常最高位表示正负 1 负 0 正）</li>\n</ul>\n<blockquote>\n<p>对于 n 个二进制位构成的原码，能表示的整数范围为 -(2<sup>(n-1)-1)~2</sup>(n-1)-1</p>\n</blockquote>\n<ul>\n<li>补码：\n<ul>\n<li>正整数：原码</li>\n<li>负整数：原码各位取反后加 1</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>对于 n 个二进制位构成的补码，能表示的整数范围为 -2<sup>(n-1)~2</sup>(n-1)-1</p>\n</blockquote>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3JhaW5ubi13L1BpY3R1cmVzQG1haW4vYmxvZy8yMDIzMDgyODExMDkxMTgucG5n\">https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281109118.png</span>&quot; alt=&quot;image-20230615162922367&quot; style=&quot;zoom:33%;&quot; /&gt;（A）</p>\n<ul>\n<li>加减法\n<ul>\n<li>加：补码直接相加，舍去最高位</li>\n<li>减：减数取负，与被减数相加，舍去最高位</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"二-基本数据类型和表达式\"><a class=\"anchor\" href=\"#二-基本数据类型和表达式\">#</a> 二、基本数据类型和表达式</h2>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281109044.jpg\" alt=\"img\"></p>\n<h3 id=\"一基本数据类型\"><a class=\"anchor\" href=\"#一基本数据类型\">#</a> （一）基本数据类型</h3>\n<p>![image-20230330112752014](./C++ Notes/image-20230330112752014.png)</p>\n<blockquote>\n<p>可以使用 <code>sizeof(&lt;类型&gt;)</code>  或 <code>sizeof(&lt;变量&gt;)</code>  运算其字节长度</p>\n</blockquote>\n<h4 id=\"1整数类型\"><a class=\"anchor\" href=\"#1整数类型\">#</a> 1. 整数类型</h4>\n<ul>\n<li>\n<p><code>int</code>    2/4 字节 （由计算机字长决定）</p>\n</li>\n<li>\n<p><code>short int</code>    <code>short</code>    2 字节</p>\n</li>\n<li>\n<p><code>long int</code>   <code>long</code>    4 字节</p>\n</li>\n<li>\n<p>无符号整数类型</p>\n<ul>\n<li><code>unsigned int</code>  /  <code>unsigned</code></li>\n<li><code>unsigned short int</code>  /  <code>unsigned short</code></li>\n<li><code>unsigned long int</code>  /  <code>unsigned long</code></li>\n</ul>\n<blockquote>\n<p>无符号整数类型所占内存大小与相应整数类型相同</p>\n<p>有符号整数类型的数，分配给其内存空间中会占用一个二进制位表示它的符号</p>\n<p>但无符号整数类型其内存空间中没有表示符号的位</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"2实数类型浮点类型默认为double\"><a class=\"anchor\" href=\"#2实数类型浮点类型默认为double\">#</a> 2. 实数类型（浮点类型）默认为 <code>double</code></h4>\n<ul>\n<li><code>float</code>   4 个字节</li>\n<li><code>double</code>   8 个字节</li>\n<li><code>long double</code>    8/10 个字节</li>\n</ul>\n<h4 id=\"3字符类型\"><a class=\"anchor\" href=\"#3字符类型\">#</a> 3. 字符类型</h4>\n<ul>\n<li>\n<p><code>char</code>   1 个字节</p>\n</li>\n<li>\n<p><code>wchar_t</code></p>\n</li>\n</ul>\n<blockquote>\n<p>ASCII 字符集：a--97    A--65</p>\n</blockquote>\n<h4 id=\"4逻辑类型-bool\"><a class=\"anchor\" href=\"#4逻辑类型-bool\">#</a> 4. 逻辑类型  <code>bool</code></h4>\n<ul>\n<li>1 真 true</li>\n<li>0 假 false</li>\n</ul>\n<h4 id=\"5空值类型\"><a class=\"anchor\" href=\"#5空值类型\">#</a> 5. 空值类型</h4>\n<ul>\n<li><code>void</code></li>\n<li><code>void*</code>  通用指针类型</li>\n</ul>\n<h3 id=\"二表现形式\"><a class=\"anchor\" href=\"#二表现形式\">#</a> （二）表现形式</h3>\n<h4 id=\"1常量\"><a class=\"anchor\" href=\"#1常量\">#</a> 1. 常量</h4>\n<ul>\n<li>\n<p>字面常量 在程序中直接写出常量值的常量</p>\n<ul>\n<li>\n<p>整数类型常量</p>\n<ul>\n<li>十进制 第一个数字不能是 0（0 除外）</li>\n<li>八进制 由 0 开头</li>\n<li>十六进制 由 0x 或 0X 开头</li>\n</ul>\n</li>\n<li>\n<p>实数类型常量</p>\n<ul>\n<li>小数：可以省略小数点前后的 0  <code>5.</code>   <code>.5</code></li>\n<li>科学计数法： <code>4.2E2</code>  = 4.2*10^2</li>\n</ul>\n</li>\n<li>\n<p>字符类型常量</p>\n<p><code>'A' </code>   <code>\\101</code>  （八进制） <code>\\x41</code> （十六进制）</p>\n<p><code>'\\n’</code> （换行符） <code>‘\\r’</code> （回车符） <code>‘\\t’</code> （横向制表符） <code>‘\\b’</code> （退格符） <code>‘\\a’</code> （响铃） <code>'\\f'</code>  （换页，在打印机上，屏幕上没有页）</p>\n</li>\n</ul>\n</li>\n<li>\n<p>字符串常量  为一维字符数组</p>\n</li>\n<li>\n<p>符号常量 有名字的常量</p>\n<p><code>const double PI=3.14;</code></p>\n<p><code>#define PI 3.14</code></p>\n<p><strong>（ <code>#define</code>  定义的标识符在编译前将被替换成所定义的内容）</strong></p>\n</li>\n</ul>\n<h4 id=\"2变量\"><a class=\"anchor\" href=\"#2变量\">#</a> 2. 变量</h4>\n<blockquote>\n<p>变量有一定的<strong>生存周期</strong>和<strong>作用范围</strong></p>\n</blockquote>\n<p><code>int a=5;</code></p>\n<p><code>int a(5);</code></p>\n<ul>\n<li>定义</li>\n<li>赋值：对内存空间初始化</li>\n<li>使用：获取，或者改变内存空间的数值</li>\n</ul>\n<h3 id=\"三操作符\"><a class=\"anchor\" href=\"#三操作符\">#</a> （三）操作符</h3>\n<blockquote>\n<p>又称作：运算符 数据称为：操作数</p>\n<p>操作符的优先级：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281109105.png\" alt=\"image-20230305202512335\"></p>\n</blockquote>\n<h4 id=\"1算术操作符\"><a class=\"anchor\" href=\"#1算术操作符\">#</a> 1. 算术操作符</h4>\n<ul>\n<li>加  <code>+</code> 、减  <code>-</code> 、乘  <code>*</code> 、除  <code>/</code> 、取余  <code>%</code></li>\n<li>取负 取正  <code>-</code>    <code>+</code></li>\n<li>自增、自减 <code>++</code>   <code>--</code></li>\n</ul>\n<p>例题：可以使 x 的值增大 2： <code>++ ++x</code>   <code>(++x)++</code></p>\n<p>❌： <code>x++ ++</code>     <code>++x++</code></p>\n<h4 id=\"2关系与逻辑操作符\"><a class=\"anchor\" href=\"#2关系与逻辑操作符\">#</a> 2. 关系与逻辑操作符</h4>\n<h5 id=\"1关系操作符\"><a class=\"anchor\" href=\"#1关系操作符\">#</a> （1）关系操作符</h5>\n<p><code>&gt;</code>   <code>&lt;</code>   <code>&gt;=</code>   <code>&lt;=</code>   <code>==</code>   <code>!=</code></p>\n<h5 id=\"2逻辑操作符\"><a class=\"anchor\" href=\"#2逻辑操作符\">#</a> （2）逻辑操作符</h5>\n<p><code>&amp;&amp;</code>  逻辑与   <code>||</code>  逻辑或   <code>!</code>  逻辑非</p>\n<p>例：3&amp;&amp;5 的结果为：1</p>\n<p>解析：3：11</p>\n<p>​\t\t\t  5：101</p>\n<p>​\t\t\t  11&amp;&amp;101 = 001 = 1</p>\n<blockquote>\n<p>短路求值</p>\n</blockquote>\n<h4 id=\"3位操作符\"><a class=\"anchor\" href=\"#3位操作符\">#</a> 3. 位操作符</h4>\n<h5 id=\"1逻辑位操作\"><a class=\"anchor\" href=\"#1逻辑位操作\">#</a> （1）逻辑位操作</h5>\n<p><code>~</code>  按位取反  二进制取反</p>\n<p><code>&amp;</code>  按位与</p>\n<p>例：若有变量定义 int a = 13, b = 6; 则表达式 a &amp; b 的值为：4</p>\n<p>13=1101<br>\n6=0110</p>\n<p>1101 &amp; 0110 = 0100 = 4<br>\n1101 ^ 0110 = 1011 = 11</p>\n<p><code>|</code>  按位或</p>\n<p><code>^</code>  按位异或  相同为 0，不同为 1</p>\n<blockquote>\n<p><code>(x^a)^a=x</code></p>\n</blockquote>\n<h5 id=\"2移位操作\"><a class=\"anchor\" href=\"#2移位操作\">#</a> （2）移位操作</h5>\n<ul>\n<li>\n<p><code>&lt;&lt;</code>  左移</p>\n<p>把第一个操作数按二进制位依次左移由第二个操作数所指定的位数。左移时，高位舍弃，低位补 0。</p>\n</li>\n<li>\n<p><code>&gt;&gt;</code>  右移</p>\n<p>把第一个操作数按二进制位依次右移由第二个操作数所指定的位数。右移时，低位舍弃，高位按下面规则处理：</p>\n<ul>\n<li>对于无符号数或有符号的非负数，高位补 0</li>\n<li>对于有符号数的负数，高位与原来的最高位相同（适合于补码表示的整数）</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>移位操作常常用于实现特殊的乘法和除法运算。</p>\n<p>例如，在某些情况下</p>\n<ul>\n<li>把一个整型数按二进位左移一位相当于把该整型数乘以 2，</li>\n<li>把一个整型数按二进位右移一位相当于把该整型数除以 2，</li>\n</ul>\n</blockquote>\n<h4 id=\"4赋值运算符\"><a class=\"anchor\" href=\"#4赋值运算符\">#</a> 4. 赋值运算符</h4>\n<ul>\n<li>cpp 允许连续使用赋值运算符</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int a;\nint b;\nint c;\na&#x3D;b&#x3D;c&#x3D;88;&#x2F;&#x2F;88先被赋值给c，c的值被赋给b，b的值被赋给a<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h4 id=\"5其他操作符\"><a class=\"anchor\" href=\"#5其他操作符\">#</a> 5. 其他操作符</h4>\n<h5 id=\"1条件操作符\"><a class=\"anchor\" href=\"#1条件操作符\">#</a> （1）条件操作符</h5>\n<p><code>d1?d2:d3</code></p>\n<p>如果 d1 的值为 true 或非零，则运算结果为 d2，否则为 d3</p>\n<h5 id=\"2逗号操作符\"><a class=\"anchor\" href=\"#2逗号操作符\">#</a> （2）逗号操作符</h5>\n<p><code>d1,d2,d3,...</code>  将若干个运算连接起来</p>\n<p>从左至右依次进行各个运算，操作结果为最后一个运算的<br>\n结果。</p>\n<p>例： <code>x=a+b,y=c+d,z=x+y</code>  等价于 <code>z=a+b+c+d</code></p>\n<h5 id=\"3sizeof操作符\"><a class=\"anchor\" href=\"#3sizeof操作符\">#</a> （3）sizeof 操作符</h5>\n<ul>\n<li><code>sizeof(类型名/变量名)</code>  计算各种数据类型的数据所占内存空间大小</li>\n</ul>\n<blockquote>\n<p>CHAR_MAX</p>\n<p>SHRT_MAX</p>\n<p>INT_MAX</p>\n<p>LONG_MAX</p>\n<p>LLONG_MAX  long long</p>\n</blockquote>\n<ul>\n<li><code>typedef &lt;已有类型&gt; &lt;别名&gt;</code>   给已有数据类型取别名</li>\n</ul>\n<h4 id=\"6操作数的类型转换\"><a class=\"anchor\" href=\"#6操作数的类型转换\">#</a> 6. 操作数的类型转换</h4>\n<h5 id=\"1隐式类型转换\"><a class=\"anchor\" href=\"#1隐式类型转换\">#</a> （1）隐式类型转换</h5>\n<p><code>char</code> ,   <code>short</code> ,   <code>int </code> ,  <code>unsigned int</code> ,   <code>long int</code> ,  <code>unsigned long int</code></p>\n<p>（将 <code>char</code> ,  <code>signed char</code> ,  <code>unsigned char</code> ,  <code>short int</code> ,  <code>unsigned short int</code>  )</p>\n<p><code>float</code> ,   <code>double</code> ,   <code>long double</code></p>\n<h5 id=\"2显式类型转换\"><a class=\"anchor\" href=\"#2显式类型转换\">#</a> （2）显式类型转换</h5>\n<p><code>&lt;类型名&gt;(&lt;操作数&gt;)</code></p>\n<p><code>(&lt;类型名&gt;)&lt;操作数&gt;</code></p>\n<h2 id=\"三-控制语句\"><a class=\"anchor\" href=\"#三-控制语句\">#</a> 三、控制语句</h2>\n<h3 id=\"一选择\"><a class=\"anchor\" href=\"#一选择\">#</a> (一）选择</h3>\n<h4 id=\"1if\"><a class=\"anchor\" href=\"#1if\">#</a> 1.if</h4>\n<h4 id=\"2switch\"><a class=\"anchor\" href=\"#2switch\">#</a> 2.switch</h4>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">switch (&lt;整型表达式&gt;)\n&#123;\n        case&lt;整型常量表达式&gt;:\n        \t&lt;语句&gt;;\n       \t\tbreak;\n        case&lt;整型常量表达式&gt;:\n        \t&lt;语句&gt;;\n        \tbreak;\n        case&lt;整型常量表达式&gt;:\n        \t&lt;语句&gt;;\n        \tbreak;\n        ...\n        default:&lt;语句&gt;;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h3 id=\"二循环\"><a class=\"anchor\" href=\"#二循环\">#</a> （二）循环</h3>\n<h4 id=\"1while\"><a class=\"anchor\" href=\"#1while\">#</a> 1.while</h4>\n<h4 id=\"2do-while\"><a class=\"anchor\" href=\"#2do-while\">#</a> 2.do-while</h4>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">do\n&#123;&lt;语句&gt;;\n &lt;语句&gt;;\n&#125;while(&lt;表达式&gt;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<blockquote>\n<p>注意： <code>while</code>  后的 <code>;</code></p>\n</blockquote>\n<h4 id=\"3for\"><a class=\"anchor\" href=\"#3for\">#</a> 3.for</h4>\n<h3 id=\"三无条件转移\"><a class=\"anchor\" href=\"#三无条件转移\">#</a> （三）无条件转移</h3>\n<h4 id=\"1goto\"><a class=\"anchor\" href=\"#1goto\">#</a> 1.goto</h4>\n<ul>\n<li>不能用 <code>goto</code>  从一个函数外部转入该函数内部，也不能用 <code>goto</code>  从一个函数内部转到该函数外部</li>\n<li>不能掠过带有初始化的变量定义</li>\n</ul>\n<h4 id=\"2break\"><a class=\"anchor\" href=\"#2break\">#</a> 2.break</h4>\n<ul>\n<li>立即跳出循环</li>\n</ul>\n<h4 id=\"3continue\"><a class=\"anchor\" href=\"#3continue\">#</a> 3.continue</h4>\n<ul>\n<li>只能用在循环语句的循环体中</li>\n<li>结束当前循环，进入下一次循环</li>\n</ul>\n<h4 id=\"4return\"><a class=\"anchor\" href=\"#4return\">#</a> 4.return</h4>\n<h2 id=\"四-函数\"><a class=\"anchor\" href=\"#四-函数\">#</a> 四、函数</h2>\n<h3 id=\"1函数定义\"><a class=\"anchor\" href=\"#1函数定义\">#</a> 1. 函数定义</h3>\n<p><code>&lt;返回值类型&gt; &lt;函数名&gt; (&lt;形式参数表&gt;)  &lt;函数体&gt;</code></p>\n<p>例： <code> int factorial(int n)&#123;  &#125;</code></p>\n<ul>\n<li>return 语句：若返回值类型与 return 的类型不同，会存在隐式类型转换，把 return 的类型转成 &lt;返回值类型&gt;</li>\n<li><strong>函数的定义不可以嵌套</strong></li>\n</ul>\n<h3 id=\"2函数调用\"><a class=\"anchor\" href=\"#2函数调用\">#</a> 2. 函数调用</h3>\n<p><code>&lt;函数名&gt; (&lt;实在参数表&gt;) </code></p>\n<p>例： <code>factorial(5);</code></p>\n<ul>\n<li>\n<p>实参个数和类型与函数形参相同，若类型不同，会隐式转换，把实参类型转换成形参类型。</p>\n</li>\n<li>\n<p>函数调用执行过程</p>\n<ul>\n<li>\n<p>计算实参的值</p>\n</li>\n<li>\n<p>把实参分别传递给被调用函数的相应形参</p>\n<blockquote>\n<p>为形参分配临时内存空间</p>\n</blockquote>\n</li>\n<li>\n<p>执行函数体</p>\n<blockquote>\n<p>为局部变量分配临时内存空间</p>\n<p>当函数的语句部分执行结束后，释放进入函数时所申请的所有临时变量空间，这包括形式参数和局部变量两个部分。</p>\n</blockquote>\n</li>\n<li>\n<p>函数体中执行 <code>return</code>  语句返回函数调用点，调用点获得返回值（如果有返回值）并执行调用后的操作</p>\n</li>\n</ul>\n</li>\n<li>\n<p>函数参数传递</p>\n<ul>\n<li>值传递（默认）</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;例题\nvoid swap(int x,int y)&#123;\n    int temp;\n    temp &#x3D; x;\n    x &#x3D; y;\n    y &#x3D; temp;\n&#125;\nint main()&#123;\n    int a &#x3D; 2,b &#x3D; 3;\n    swap(a,b);\n    cout &lt;&lt; a &lt;&lt; b &lt;&lt; endl;\n    return 0;\n&#125;\n&#x2F;&#x2F; 2 3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>地址或引用传递</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3函数声明\"><a class=\"anchor\" href=\"#3函数声明\">#</a> 3. 函数声明</h3>\n<ul>\n<li>调用的函数都要有定义，若定义在调用点之后或其他文件中，需要在调用前对被调用的函数进行声明。</li>\n</ul>\n<p><code>&lt;返回值类型&gt; &lt;函数名&gt; (&lt;形式参数表&gt;) </code></p>\n<p>或   <code>extren &lt;返回值类型&gt; &lt;函数名&gt; (&lt;形式参数表&gt;) </code></p>\n<ul>\n<li>在函数声明中，形式参数表可以只列出参数类型而不写形参名</li>\n</ul>\n<p>例： <code>int g(int,int);</code></p>\n<ul>\n<li>在函数里面也可以声明</li>\n</ul>\n<h3 id=\"4局部变量与全局变量\"><a class=\"anchor\" href=\"#4局部变量与全局变量\">#</a> 4. 局部变量与全局变量</h3>\n<h4 id=\"1局部变量\"><a class=\"anchor\" href=\"#1局部变量\">#</a> （1）局部变量</h4>\n<ul>\n<li>在复合语句中定义的变量，只能在定义他们的复合语句中使用</li>\n<li>函数的形式参数与可以看成是局部变量</li>\n</ul>\n<h4 id=\"2全局变量\"><a class=\"anchor\" href=\"#2全局变量\">#</a> （2）全局变量</h4>\n<ul>\n<li>\n<p>在函数外部定义的变量</p>\n</li>\n<li>\n<p><strong>若全局变量定义在使用点之后或其他文件里，使用前需对其声明</strong>。</p>\n<p><code>extern &lt;变量类型&gt; &lt;变量名&gt;</code></p>\n</li>\n<li>\n<p>变量定义也属于一种声明：定义性声明</p>\n<ul>\n<li>变量定义要给变量分配空间，变量声明则不用</li>\n<li>变量定义要给变量赋初值（初始化变量），变量声明则不可以。</li>\n<li>变量定义只能有一个，变量声明可以有多个。</li>\n</ul>\n</li>\n<li>\n<p><code>static</code>  全局变量：存储在静态存储区，<strong>在函数外部定义</strong>，<strong>只限在本文件中使用</strong></p>\n<p><code>extern</code>  全局变量：存储在静态存储区，<strong>在其他文件中定义</strong>，<strong>在本文件中可以使用</strong></p>\n<p><code>static</code>  局部变量：存储在静态存储区，在函数内部定义，只限在函数内部使用</p>\n</li>\n</ul>\n<h3 id=\"5程序的多模块结构\"><a class=\"anchor\" href=\"#5程序的多模块结构\">#</a> 5. 程序的多模块结构</h3>\n<ul>\n<li>\n<p>一个程序模块包含两个部分：</p>\n<ul>\n<li>接口 interface （.h 文件 头文件）在本模块中定义的、提供给其他模块使用的一些程序实体的定义（常量、类型等）和声明（函数、全局变量等）</li>\n<li>实现 implementation （.cpp 文件 源文件）模块中程序实体的定义</li>\n</ul>\n</li>\n<li>\n<p>在一个模块 A 中用到另一个模块 B 中定义的全局程序文件，要在 A 的源文件中用一条编译预处理命令（ <code>#include</code> ）把 B 的头文件中的内容包含进来，达到声明的目的。</p>\n</li>\n<li>\n<p>文件包含命令： <code>#include &lt;文件名&gt;</code>  或  <code>#include &quot;文件名&quot;</code></p>\n<blockquote>\n<p>include 命令的含义是：在编译前，用文件名所指定的文件内容替换该命令</p>\n</blockquote>\n<ul>\n<li>\n<p>&lt;文件名&gt; 表示在<strong>系统指定的目录</strong>下寻找指定文件</p>\n</li>\n<li>\n<p>&quot;文件名&quot; 表示先在 #include 命令的<strong>源文件所在的目录</strong>下查找，然后再在<strong>系统指定的目录</strong>下寻找指定文件</p>\n<blockquote>\n<p>如果几个目录中都有 xx.h， <code>#include &quot;xx.h&quot;</code>  最多只会搜索到第一个就停止继续搜索</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6标识符的作用域\"><a class=\"anchor\" href=\"#6标识符的作用域\">#</a> 6. 标识符的作用域</h3>\n<h4 id=\"1局部作用域\"><a class=\"anchor\" href=\"#1局部作用域\">#</a> （1）局部作用域</h4>\n<ul>\n<li>\n<p>在函数定义或复合语句中、从标识符的定义点开始到函数定义或复合语句结束之间的程序段。</p>\n</li>\n<li>\n<p>具有局部作用域的标识符：局部常量名、局部变量名 / 对象名、函数的形参名</p>\n</li>\n<li>\n<p>如果在一个标识符的局部作用域中包含内层复合语句，并且在该内层复合语句中定义了一个同名的不同实体，则外层定义的标识符的作用域应该是从其潜在作用域中扣除内层同名标识符的作用域之后所得到的作用域。</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">void f()&#123;\n    int x;&#x2F;&#x2F;外层x的定义\n    ... x ...&#x2F;&#x2F;外层的x\n    while ( ... x ...)&#123;&#x2F;&#x2F;外层的x\n    \t...x...&#x2F;&#x2F;外层的x\n        double x;&#x2F;&#x2F;内层的x\n        ...x...&#x2F;&#x2F;内层的x\n    &#125;\n    ...x...&#x2F;&#x2F;外层的x\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n<h4 id=\"2全局作用域\"><a class=\"anchor\" href=\"#2全局作用域\">#</a> （2）全局作用域</h4>\n<p>（具有全局作用域的标识符主要用于标识被程序<strong>各个模块共享</strong>的程序实体）</p>\n<ul>\n<li>\n<p>构成 c++ 程序的所有模块（源文件）</p>\n</li>\n<li>\n<p>具有全局作用域的标识符：全局函数名、全局变量名 / 对象名、全局类名</p>\n</li>\n<li>\n<p>若标识符的定义点在其它源文件中或在本源文件中使用点之后，则在使用前需要声明它们。</p>\n</li>\n<li>\n<p>如果在某个局部作用域中定义了与某个全局标识符同名的标识符，则该全局标识符的作用域应扣掉与之同名的局部标识符的作用域。</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int x;&#x2F;&#x2F;外层x的定义\nvoid f()&#123;    \n    ... x ...&#x2F;&#x2F;外层的x\n    while ( ... x ...)&#123;&#x2F;&#x2F;外层的x\n    \t...x...&#x2F;&#x2F;外层的x\n        double x;&#x2F;&#x2F;内层的x\n        ...x...&#x2F;&#x2F;内层的x\n    &#125;\n    ...x...&#x2F;&#x2F;外层的x\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>若在局部标识符的作用域中要使用与其同名的全局标识符，需要用全局域选择符（ <code>::</code> ）对全局标识符进行修饰（受限）</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">double x;&#x2F;&#x2F;外\nvoid f()&#123;\n    ...x...&#x2F;&#x2F;外\n    int x;&#x2F;&#x2F;内\n    x&#x2F;&#x2F;内\n    ::x&#x2F;&#x2F;外\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n<h4 id=\"3文件作用域\"><a class=\"anchor\" href=\"#3文件作用域\">#</a> （3）文件作用域</h4>\n<p>（具有文件作用域的标识符用于标识在<strong>一个模块内部共享</strong>的程序实体）</p>\n<ul>\n<li>在全局标识符的定义中加上 <code>static</code></li>\n<li><code>const</code>  定义的全局常量名</li>\n<li>具有文件作用域的标识符只能在定义他们的源文件（模块）中使用</li>\n</ul>\n<h4 id=\"4函数作用域\"><a class=\"anchor\" href=\"#4函数作用域\">#</a> （4）函数作用域</h4>\n<ul>\n<li>语句标号 一个语句标号只能定义一次</li>\n</ul>\n<h4 id=\"5函数原型作用域\"><a class=\"anchor\" href=\"#5函数原型作用域\">#</a> （5）函数原型作用域</h4>\n<ul>\n<li>用于函数声明的函数原型，其中的形式参数名的作用域从函数原型开始到函数原型结束。</li>\n<li><code>void f(int x, double y);</code>  其中的 x 和 y 的作用域是从  <code>(</code>  开始到  <code>) </code> 结束</li>\n</ul>\n<h4 id=\"6名空间作用域\"><a class=\"anchor\" href=\"#6名空间作用域\">#</a> （6）名空间作用域</h4>\n<ul>\n<li>在一个源文件中要用到两个分别在另外两个源文件中定义的不同全局程序实体（如：全局函数），而这两个全局程序实体的名字相同，C++ 提供了名空间 (namespace）设施来解决上述的名冲突问题。</li>\n<li>在一个名空间中定义的全局标识符，其作用域为该<strong>名空间</strong>。</li>\n<li>当在一个名空间外部需要使用该名空间中定义的全局标识符时，可用该<strong>名空间的名字来修饰或受限</strong>。</li>\n</ul>\n<h3 id=\"7变量的生存期存储分配\"><a class=\"anchor\" href=\"#7变量的生存期存储分配\">#</a> 7. 变量的生存期（存储分配）</h3>\n<ul>\n<li>\n<p>生存期：程序运行时一个变量占有内存空间的时间段</p>\n</li>\n<li>\n<p>静态生存期</p>\n<p><strong>从程序开始执行时就进行内存空间分配，直到程序结束才收回它们的空间</strong>。全局变量具有静态生存期。<strong>静态数据区</strong>，系统将未显式初始化的变量初始化为 0</p>\n</li>\n<li>\n<p>自动生存期</p>\n<p><strong>内存空间在程序执行到定义它们的复合语句 (包括函数体）时才分配，当定义它们的复合语句执行结束时，它们的空间将被收回</strong>。局部变量和函数的参数一般具有自动生存期。<strong>栈区 M</strong></p>\n<ul>\n<li>局部变量默认存储类为 <code>auto</code>   使其具用自动生存期</li>\n<li><code>register</code>   使局部变量具有自动生存期，由编译程序根据 CPU 寄存器的使用情况来决定是否存放在寄存器中</li>\n<li><code>static</code>  使局部变量具有静态生存期 只在函数第一次调用时进行初始化，以后调用中不再进行初始化，它的值为上一次函数调用结束时的值。</li>\n</ul>\n<blockquote>\n<p>在全局标识符的定义中， <code>static</code>  用于把全局标识符的作用域改为文件作用域</p>\n<p>在局部变量的定义中， <code>static</code>  用于指出相应的局部变量具有静态生存期。</p>\n</blockquote>\n</li>\n<li>\n<p>动态生存期</p>\n<p>内存空间在程序中显式地用 <code>new</code>  操作或 <code>malloc</code>  库函数分配、用 <code>delete</code>  操作或 <code>free</code>  库函数收回。动态变量具动态生存期。在 ** 堆区  （大小：G）** 中分配</p>\n</li>\n</ul>\n<h3 id=\"8宏定义\"><a class=\"anchor\" href=\"#8宏定义\">#</a> 8. 宏定义</h3>\n<blockquote>\n<p>一种编译预处理命令</p>\n</blockquote>\n<p><code>#define &lt;宏名&gt; (&lt;参数表&gt;) &lt;文字串&gt;</code></p>\n<p>例： <code>#define max(a,b) ((a)&gt;(b)?(a):(b))</code></p>\n<h3 id=\"9内联函数\"><a class=\"anchor\" href=\"#9内联函数\">#</a> 9. 内联函数</h3>\n<ul>\n<li>在定义函数定义时，在函数返回类型之前加上一个 <code>inline</code></li>\n<li>编译时，直接将被调函数体的代码直接插到调用处</li>\n<li>可以提高程序的运行速度</li>\n<li>有些函数即使加上了 <code>inline</code>  关键词，编译程序也不会把它作为内联函数来对待（是否内联由编译器决定）</li>\n</ul>\n<h3 id=\"10带默认值的形式参数\"><a class=\"anchor\" href=\"#10带默认值的形式参数\">#</a> 10. 带默认值的形式参数</h3>\n<ul>\n<li>\n<p>有默认值的形参应处于形参表的<strong>右部</strong>。例如:</p>\n<p><code>void f(int a, int b=1, int c=O);//OK</code></p>\n<p><code>void f(int a, int b=1, int c); //Error</code></p>\n</li>\n<li>\n<p>对参数默认值的指定只在函数声明处有意义。</p>\n</li>\n<li>\n<p>在不同的源文件中，对同一个函数的声明可以对它的同一个参数指定不同的默认值；在同一个源文件中，对同一个函数的声明只能对它的每一个参数指定一次默认值。</p>\n</li>\n</ul>\n<h3 id=\"11函数名重载\"><a class=\"anchor\" href=\"#11函数名重载\">#</a> 11. 函数名重载</h3>\n<ul>\n<li>\n<p><strong>相同函数名，具有不同的参数列表</strong>（参数的类型或个数不同）</p>\n<blockquote>\n<p>参数类型和个数相同，只有返回值类型不同不能对他们重载函数名</p>\n</blockquote>\n</li>\n<li>\n<p>确定一个<strong>对重载函数的调用对应着哪一个重载函数定义的过程</strong>称为<strong>绑定</strong>（binding，又称定联、联编、捆绑)。</p>\n</li>\n<li>\n<p>按参数类型匹配优先级：</p>\n<ul>\n<li>精确匹配：细微的转换（数组名转化成第一个元素的指针、函数名转换成函数指针等）后相同</li>\n<li>提升匹配</li>\n<li>标准转换匹配\n<ul>\n<li>任何算术类型可以互相转换</li>\n<li>枚举类型可以转换成任何算术类型</li>\n<li>零可以转换成任何算术类型或指针类型</li>\n<li>任何类型的指针可以转换成 void *</li>\n<li>派生类指针可以转换成基类指针</li>\n<li>每个标准转换都是平等的</li>\n</ul>\n</li>\n<li>自定义转换匹配</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"12λlambda表达式\"><a class=\"anchor\" href=\"#12λlambda表达式\">#</a> 12.λ（lambda）表达式</h3>\n<ul>\n<li>\n<p>匿名函数</p>\n</li>\n<li>\n<p><code>[&lt;环境变量使用说明&gt;] &lt;形式参数&gt; &lt;返回值类型&gt; &lt;函数体&gt;</code></p>\n<p>&lt;环境变量使用说明&gt;：</p>\n<ul>\n<li>\n<p>空：不能使用外层作用域中的自动变量</p>\n</li>\n<li>\n<p>&amp;：按引用方式使用外层作用域中的自动变量（可以改变这些变量的值）</p>\n</li>\n<li>\n<p>=：按值方式使用外层作用域中的自动变量（不可以改变这些变量的值）</p>\n<blockquote>\n<p>可以使用 <code>&amp;</code>   <code>=</code>  统一指定外层作用域中的自动变量的使用方式，与可以在变量名前加 <code>$</code>   <code>=</code> （默认为 <code>=</code> ）单独指定</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#123; int k,m,n;\n    ... [](int x) -&gt; int &#123;return x;&#125; &#x2F;&#x2F;不能使用k、m、n\n    ...[&amp;](int x) -&gt; int &#123;k++,m++,n++; return k+m+n+x;&#125; &#x2F;&#x2F;k、m、n可以被修改\n    ...[&#x3D;](int x) -&gt; int &#123;return k+m+n+x;&#125; &#x2F;&#x2F;k、m、n不可以被修改\n    ...[&amp;,n](int x) -&gt; int &#123;k++,m++; return x+k+m+n;&#125; &#x2F;&#x2F;n不能被修改\n    ...[&#x3D;,&amp;n](int x) -&gt; int &#123;n++; return x+k+m+n;&#125; &#x2F;&#x2F;只有n能被修改\n    ...[&amp;k,m](int x) -&gt; int &#123;k++; return x+k+m;&#125; &#x2F;&#x2F;只能使用k、m，k可以被修改\n    ...[&#x3D;] &#123;return k+m+n;&#125; &#x2F;&#x2F;没有参数，返回值类型为int（编译器自动确定）\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h2 id=\"五-构造数据类型\"><a class=\"anchor\" href=\"#五-构造数据类型\">#</a> 五、构造数据类型</h2>\n<h3 id=\"一枚举\"><a class=\"anchor\" href=\"#一枚举\">#</a> （一）枚举</h3>\n<blockquote>\n<p>设计者自己来定义值集的数据类型</p>\n</blockquote>\n<h4 id=\"1枚举类型的定义\"><a class=\"anchor\" href=\"#1枚举类型的定义\">#</a> 1. 枚举类型的定义</h4>\n<p><code>enum &lt;枚举类型名&gt; &#123;&lt;枚举值表&gt;&#125;</code></p>\n<p>例： <code>enum Day &#123;SUN,MON,TUE,WED,THU,FRI,SAT&#125;</code></p>\n<p>默认情况下，第一个枚举值为 0，以此加 1，也可以显式地给枚举值指定值。</p>\n<p>例： <code>enum Day &#123;SUN=7,MON=1,TUE,WED,THU,FRI,SAT&#125;</code>   TUE=2,WED=3......</p>\n<ul>\n<li>枚举类型变量的定义： <code>&lt;枚举类型名&gt;&lt;变量表&gt;;</code>  或 <code>enum &lt;枚举类型名&gt;&lt;变量表&gt;;</code></li>\n<li>枚举类型和枚举类型变量同时定义： <code>enum Day &#123;SUN,MON,TUE,WED,THU,FRI,SAT&#125;d1,d2,d3;</code></li>\n</ul>\n<h4 id=\"2枚举类型的运算\"><a class=\"anchor\" href=\"#2枚举类型的运算\">#</a> 2. 枚举类型的运算</h4>\n<ul>\n<li>\n<p>赋值：</p>\n<ul>\n<li>\n<p>一个枚举类型的变量只能在相应枚举类型的值集中取值。</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">Day day;\nday &#x3D; SUN;&#x2F;&#x2F;OK<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n<p><s> <code>day = 1;</code> </s></p>\n</li>\n<li>\n<p>相同枚举类型之间可以进行赋值操作。</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">Day d1,d2;\nd2 &#x3D; d1;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>可以把一个枚举值赋值给一个整型变量。</p>\n<p><code>int a = d1;</code></p>\n</li>\n<li>\n<p>但不能把一个整型值赋值给枚举类型的变量.</p>\n<p><s> <code>d1 = a;</code> </s></p>\n<p><code>d1 = (Day)a;//可以，但不安全</code></p>\n</li>\n</ul>\n</li>\n<li>\n<p>比较：</p>\n<p>系统首先将枚举值转换为对应的整型值，然后进行比较。</p>\n</li>\n<li>\n<p>算术运算：</p>\n<p>运算时，将枚举值转换为对应的整型值。</p>\n</li>\n<li>\n<p>不能对枚举类型的值直接进行输入，但可以进行输出。~~ <code>cin &gt;&gt; d</code> ~~ 例：</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">Day d;\ncout &lt;&lt; d;&#x2F;&#x2F;输出时，枚举类型的值将转换成int型<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n<h3 id=\"二数组\"><a class=\"anchor\" href=\"#二数组\">#</a> （二）数组</h3>\n<h4 id=\"1一维数组\"><a class=\"anchor\" href=\"#1一维数组\">#</a> 1. 一维数组</h4>\n<h5 id=\"1定义\"><a class=\"anchor\" href=\"#1定义\">#</a> （1）定义：</h5>\n<ul>\n<li>直接定义变量 <code>int a[10]</code></li>\n<li>定义数组类型，再定义变量  <code>typedef int A[10];</code>   <code>A a;</code>  （数组类型的元素个数是固定的，在程序执行中不能改变）</li>\n<li>不能通过赋值修改数组长度</li>\n</ul>\n<h5 id=\"2变量的初始化\"><a class=\"anchor\" href=\"#2变量的初始化\">#</a> （2）变量的初始化</h5>\n<ul>\n<li>\n<p><code>int a[10]=&#123;1,2,3,4,5,6,7,8,9,10&#125;;</code></p>\n<p>若初始化表中的值的个数少于数组元素个数，则<strong>不足部分的数组元素初始化为 0</strong></p>\n</li>\n<li>\n<p><code>int c[]=&#123;1,2,3&#125;;</code></p>\n<p>若对每个元素都进行了初始化，可以省略元素个数，元素个数由初始化的个数来定</p>\n</li>\n<li>\n<p>若不使用 <code>=&#123;&#125;</code>  赋初值时（此时一定会定义长度）， <code>static</code>  和全局数组均默认其为 0 或‘0’，其他局部数组赋值随机</p>\n</li>\n</ul>\n<h4 id=\"2一维字符数组\"><a class=\"anchor\" href=\"#2一维字符数组\">#</a> 2. 一维字符数组</h4>\n<ul>\n<li>\n<p>在字符串中最后一个字符的后面存储一个 <code>'\\0'</code> ，<strong>作为字符串的结束标记</strong></p>\n</li>\n<li>\n<p>若初始化表中的值的个数少于数组元素个数，则<strong>不足部分的数组元素初始化为 '\\0'</strong></p>\n</li>\n<li>\n<p>初始化： <code>char s[10]=&#123;'h','e','l','l','o','\\0'&#125;;</code></p>\n<p>（只有这种形式程序中必须显式的加上 <code>'\\0'</code> ）</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">char* buf1 &#x3D; &quot;abcd12345678&quot;;\nchar buf2[] &#x3D; &quot;abcd12345678&quot;;\ncout &lt;&lt; sizeof(buf1) &lt;&lt; endl; &#x2F;&#x2F;8\ncout &lt;&lt; sizeof(buf2) &lt;&lt; endl; &#x2F;&#x2F;13 (包含结束符\\0)\ncout &lt;&lt; strlen(buf1) &lt;&lt; endl; &#x2F;&#x2F;12\ncout &lt;&lt; strlen(buf2) &lt;&lt; endl; &#x2F;&#x2F;12\n\nchar a[]&#x3D;&#123;&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;&#125;; &#x2F;&#x2F;长度为5\nchar a[]&#x3D; &quot;hello&quot;; &#x2F;&#x2F;长度为6\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n<h4 id=\"3二维数组\"><a class=\"anchor\" href=\"#3二维数组\">#</a> 3. 二维数组</h4>\n<h5 id=\"1定义-2\"><a class=\"anchor\" href=\"#1定义-2\">#</a> （1）定义：</h5>\n<ul>\n<li><code>int a[10][5]</code></li>\n<li><code>typedef int A[10][5];</code>   <code>A a;</code></li>\n</ul>\n<h5 id=\"2初始化\"><a class=\"anchor\" href=\"#2初始化\">#</a> （2）初始化：</h5>\n<ul>\n<li>\n<p><code>int a[2][3]=&#123;&#123;1,2,3&#125;,&#123;4,5,6&#125;&#125;;</code>  或 <code>int a[2][3]=&#123;1,2,3,4,5,6&#125;;</code></p>\n<p>初始化的值可以少于数组元素的个数，元素默认初始化为 0</p>\n</li>\n<li>\n<p>数组的行数可以省略，其行数由初始化的个数来决定（<strong>只能省略最高维</strong>）</p>\n<p><code>int a[][3]=&#123;&#123;1,2,3&#125;,&#123;4,5,6&#125;,&#123;7,8,9&#125;&#125;;</code></p>\n</li>\n</ul>\n<blockquote>\n<p>由于不存在数组的长度这个属性，在将数组作为函数参数时，通常同时将长度作为参数传输</p>\n<p>在 main 函数中可以使用 <code>sizeof(a)</code>  获得数组长度</p>\n</blockquote>\n<h3 id=\"三结构类型\"><a class=\"anchor\" href=\"#三结构类型\">#</a> （三）结构类型</h3>\n<h4 id=\"1定义-3\"><a class=\"anchor\" href=\"#1定义-3\">#</a> 1. 定义：</h4>\n<ul>\n<li>结构类型定义 <code>struct &lt;结构类型名&gt; &#123;&lt;成员表&gt;&#125;;</code>  例：</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">struct Student&#123;\n    int no;\n    char name[20];\n    Sex sex;\n&#125;;\nenum Sex &#123;MALE,FEMALE&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>\n<p>变量定义  <code>&lt;结构类型名&gt; &lt;变量名表&gt;</code>  或  <code>struct &lt;结构类型名&gt; &lt;变量名表&gt;</code>  例：</p>\n<p><code>Student a,b,c;</code></p>\n</li>\n<li>\n<p>也可以在定义结构类型的同时定义结构类型的变量，这时结构类型名可以省略，例：</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">struct&#123;\n    int x;\n    double y;\n&#125;a,b;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n<blockquote>\n<p><code>struct</code>  默认访问权限是 public， <code>class</code>  默认访问权限是 private</p>\n</blockquote>\n<h4 id=\"2初始化-2\"><a class=\"anchor\" href=\"#2初始化-2\">#</a> 2. 初始化：</h4>\n<p><strong>定义结构类型时不能对其成员初始化</strong>。因为类型不是程序运行时刻的实体，他们不占有内存空间，初始化没意义。可以在定义变量时初始化，例： <code>Student a=&#123;2,Amy,FEMALE&#125;;</code></p>\n<h4 id=\"3访问结构的成员\"><a class=\"anchor\" href=\"#3访问结构的成员\">#</a> 3. 访问结构的成员</h4>\n<p><code>&lt;结构类型变量&gt;.&lt;成员名&gt;</code></p>\n<ul>\n<li>\n<p>不同结构类型的成员的名字可以相同，它们可以与程序中非结构成员的名字相同；</p>\n</li>\n<li>\n<p>结构类型的名字可以与同一作用域中的其他非结构类型标识符相同；</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">struct A&#123;\n    ...;\n&#125;;\nint A;\n...\nstruct A a;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>对于上述这种情况，使用结构类型 A 必须要在结构类型名前加上关键字 <code>struct</code></p>\n</li>\n</ul>\n<h4 id=\"4结构数据的赋值\"><a class=\"anchor\" href=\"#4结构数据的赋值\">#</a> 4. 结构数据的赋值</h4>\n<ul>\n<li>对结构类型的数据可以整体赋值，但此操作必须要在相同的结构类型之间进行，不同类型结构之间不能相互赋值。</li>\n</ul>\n<h3 id=\"四联合类型\"><a class=\"anchor\" href=\"#四联合类型\">#</a> （四）联合类型</h3>\n<h4 id=\"1定义-4\"><a class=\"anchor\" href=\"#1定义-4\">#</a> 1. 定义：</h4>\n<ul>\n<li>联合类型定义  例：</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">union A&#123; &#x2F;&#x2F;A是一个联合类型\n    int i;\n    char c;\n    double d;\n&#125;;\nA a; &#x2F;&#x2F;a是一个联合类型的变量\n\n...a.i... &#x2F;&#x2F;可以把a作为int型来用<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<blockquote>\n<p>联合类型的所有成员占有同一块内存空间，该内存空间的大小为其最大成员所需要的内存空间的大小。</p>\n</blockquote>\n<ul>\n<li>可以进行整体赋值，可传给函数，可作为函数返回值</li>\n</ul>\n<h3 id=\"五指针类型\"><a class=\"anchor\" href=\"#五指针类型\">#</a> （五）指针类型</h3>\n<h4 id=\"1指针类型的定义\"><a class=\"anchor\" href=\"#1指针类型的定义\">#</a> 1. 指针类型的定义</h4>\n<blockquote>\n<p>指针是内存地址的抽象表示，<strong>一个指针代表了一个内存地址</strong></p>\n<p>获取变量的地址： <code>&amp;&lt;变量名&gt;</code></p>\n<p><strong>每一个地址都属于某一种指针类型</strong></p>\n</blockquote>\n<ul>\n<li><code>&lt;类型&gt; *&lt;指针变量&gt;</code></li>\n</ul>\n<p>例： <code>int *p,*q; //p q均为指针变量</code></p>\n<pre><code> \t`int *p,q; //p为指针变量，q为int型变量`\n\n \t`int* p,q; //p为指针变量，q为int型变量`\n</code></pre>\n<ul>\n<li>\n<pre><code class=\"language-c++\">typedef &lt;类型&gt;* &lt;指向数据类型数据的指针类型&gt;;\n&lt;指向数据类型数据的指针类型&gt; &lt;指针类型的变量名&gt;;\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n例：&#96;typedef int* Pointer;&#96; &#96;Pointer p,q;&#96;\n\n- &#96;void *p&#96; 表明该指针变量可以指向任意类型的数据\n\n- 符号常量&#96;NULL&#96; 空指针\n\n&gt; 指针变量拥有自己的内存空间，**在该空间中存储的是另一个数据的内存地址**\n&gt;\n&gt; 例：&#96;int x&#x3D;1; int *p&#x3D;&amp;x;&#96;\n\n#### 2.指针类型的基本操作\n\n##### （1）赋值\n\n&#96;&#96;&#96;c++\nint x,*p,*p1;\ndouble y,*q;\n......\n&#x2F;&#x2F;相同类型指针变量可以互相赋值\np &#x3D; &amp;x;\nq &#x3D; &amp;y;\np &#x3D; &amp;y; &#x2F;&#x2F;Error 类型不同不能赋值\np1 &#x3D; p;\np &#x3D; 0; &#x2F;&#x2F;使得p不指向任何变量\np &#x3D; 120; &#x2F;&#x2F;Error 120为int型<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n</code></pre>\n</li>\n</ul>\n<blockquote>\n<p>任意类型的都可以赋给 <code>void*</code>  类型的指针变量</p>\n</blockquote>\n<h5 id=\"2间接访问操作\"><a class=\"anchor\" href=\"#2间接访问操作\">#</a> （2）间接访问操作</h5>\n<p><code>*&lt;指针变量&gt;</code>  访问指针变量所指向的变量</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int x;\nint *p &#x3D; &amp;x;\n&#x2F;&#x2F;赋值：\nx &#x3D; 1; &#x2F;&#x2F;或 \n*p &#x3D; 1; &#x2F;&#x2F;此时x&#x3D;1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<blockquote>\n<p>使用指针变量前，必须先给它赋一个指向合法具体对象的地址值</p>\n<p>Error： <code>int *px; *px = x;</code></p>\n<p>Error： <code>char *s; cin&gt;&gt;s;</code></p>\n</blockquote>\n<h5 id=\"3指针的运算\"><a class=\"anchor\" href=\"#3指针的运算\">#</a> （3）指针的运算</h5>\n<h6 id=\"1一个指针加上或减去一个整型值\"><a class=\"anchor\" href=\"#1一个指针加上或减去一个整型值\">#</a> ①一个指针加上或减去一个整型值</h6>\n<blockquote>\n<p>通常用此访问数组元素</p>\n<p>一个指针可以与一个整型值进行加或减运算，运算结果为与该指针同类型的指针</p>\n</blockquote>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int a[10];\nint *p &#x3D; &amp;a[0]; &#x2F;&#x2F;p指向数组a的第0个元素\np &#x3D; p + 3; &#x2F;&#x2F;p指向数组a的第3个元素\np++; &#x2F;&#x2F;p指向数组a的第4个元素<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int *p;\ndouble *q;\np++; &#x2F;&#x2F;p的值加sizeof(int)\nq -&#x3D;4; &#x2F;&#x2F;q的值减4*sizeof(double)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281109576.jpg\" alt=\"img\"></p>\n<p><code>y = *px++;</code>  相当于  <code>y = *px  (px++)</code>  （取当前元素，指向下一个）</p>\n<h6 id=\"2两个同类型的指针相减\"><a class=\"anchor\" href=\"#2两个同类型的指针相减\">#</a> ②两个同类型的指针相减</h6>\n<blockquote>\n<p>两个同类型的指针相减，结果为两个指针之间相差元素的个数</p>\n<p>两个指针不能相加</p>\n</blockquote>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int a[10];\nint *p &#x3D; &amp;a[0];\nint *q &#x3D; &amp;a[3];\ncout &lt;&lt; q-p &lt;&lt; endl; &#x2F;&#x2F;输出3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"3两个同类型的指针比较\"><a class=\"anchor\" href=\"#3两个同类型的指针比较\">#</a> ③两个同类型的指针比较</h6>\n<p>即：比较他们所对应的内存地址的大小</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int a[10],sum &#x3D; 0,*p &#x3D; &amp;a[0],*q &#x3D; &amp;a[3];\nwhile(p&lt;&#x3D;q)&#123;\n    sum +&#x3D; *p;\n    p++;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h5 id=\"4指针的输出\"><a class=\"anchor\" href=\"#4指针的输出\">#</a> （4）指针的输出</h5>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int x&#x3D;1;\nint *p&#x3D;&amp;x;\ncout &lt;&lt; p; &#x2F;&#x2F;输出p的值（x的地址）\ncout &lt;&lt; *p; &#x2F;&#x2F;输出p指向的值（x的值）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>当输出字符指针 <code>*char</code>  时，输出的不是指针值，而是该指针所指向的字符串（特例）</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">char str[] &#x3D; &quot;ABCD&quot;;\nchar *p&#x3D;&amp;str[0];\ncout &lt;&lt; p; &#x2F;&#x2F;输出p指向的字符串：ABCD\ncout &lt;&lt; *p; &#x2F;&#x2F;输出p指向的字符：A\n\ncout &lt;&lt; (void *)p; &#x2F;&#x2F;输出p的值，即字符串&quot;ABCD&quot;的内存首地址<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h4 id=\"3指针作为参数类型\"><a class=\"anchor\" href=\"#3指针作为参数类型\">#</a> 3. 指针作为参数类型</h4>\n<h5 id=\"1提高传参效率\"><a class=\"anchor\" href=\"#1提高传参效率\">#</a> （1）提高传参效率</h5>\n<h5 id=\"2通过参数返回函数的计算结果\"><a class=\"anchor\" href=\"#2通过参数返回函数的计算结果\">#</a> （2）通过参数返回函数的计算结果</h5>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">void swap(int *px, int *py)&#123;\n    int t &#x3D; *px;\n    *px &#x3D; *py;\n    *py &#x3D; t;\n&#125;\nint main()&#123;\n    int a&#x3D;0.b&#x3D;1;\n    swap(&amp;a,&amp;b);\n    cout &lt;&lt; a &lt;&lt; &quot; &quot; &lt;&lt; b; &#x2F;&#x2F; 1 0\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h5 id=\"3指向常量的指针\"><a class=\"anchor\" href=\"#3指向常量的指针\">#</a> （3）指向常量的指针</h5>\n<ul>\n<li>指向<strong>常量的指针</strong>（常量指针）</li>\n</ul>\n<p><code>const &lt;类型&gt; *&lt;指针变量&gt;</code></p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">const int *p; &#x2F;&#x2F;p为指向常量的指针变量\nconst int x &#x3D; 0; &#x2F;&#x2F; 常量必须初始化\np &#x3D; &amp;x;\n*p &#x3D; 1; &#x2F;&#x2F;Error 不能通过常量指针改变它所指向的常量的值\nint *q;\nq &#x3D; &amp;x; &#x2F;&#x2F;Error 指向变量的指针变量不能指向一个常量<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int a，b；\n const int *p&#x3D;&amp;a &#x2F;&#x2F;常量指针 可以指向变量（但不能改变其值）\n&#x2F;&#x2F;那么分为一下两种操作\n*p&#x3D;9; &#x2F;&#x2F;操作错误\np&#x3D;&amp;b; &#x2F;&#x2F;操作成功<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li><strong>指针类型的常量</strong>（指针常量）是一个常量，但是是指针修饰的</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int x,y;\nint *const p &#x3D; &amp;x; &#x2F;&#x2F;定义了一个指针类型的常量p，p指向一个变量\n*p &#x3D; 1; &#x2F;&#x2F;*p是一个常量\np &#x3D; *y; &#x2F;&#x2F;Error p是一个常量，其值不能被修改<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre><br>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int a，b；\nint * const p&#x3D;&amp;a &#x2F;&#x2F;指针常量\n&#x2F;&#x2F;那么分为一下两种操作\n*p&#x3D;9;&#x2F;&#x2F;操作成功\np&#x3D;&amp;b;&#x2F;&#x2F;操作错误<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<blockquote>\n<ul>\n<li><code>const &lt;类型&gt; *</code>   常量指针：不可以改变值，可以改变指向</li>\n<li><code>* const</code>   指针常量：不可以改变指向，可以改变值</li>\n</ul>\n</blockquote>\n<ul>\n<li>指向常量的指针常量</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">const int x &#x3D; 0,y &#x3D; 1;\nconst int * const p &#x3D; &amp;x; &#x2F;&#x2F;p是一个指向常量的指针常量<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n<p>例：<strong>C</strong>（A B 相同）</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">以下哪个仅表示指针指向不能变\nA.const char*\nB.char const*\nC.char* const\nD.const char* const<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h5 id=\"4作为返回值类型\"><a class=\"anchor\" href=\"#4作为返回值类型\">#</a> （4）作为返回值类型</h5>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int *max(const int x[], int num)&#123;\n    int max_index&#x3D;O;\n\tfor (int i&#x3D;1; i&lt;num; i++)&#123;\n        if(x[i]&gt; x[max_index])&#123;\n            max_index &#x3D; i;\n        &#125;\n    &#125;\n\treturn (int*)&amp;x[max_index];\n&#125;\n\nint main()&#123;\n    int a[100];\n    ...\n\tcout &lt;&lt; *max(a,100)&lt;&lt; endl;\n    return 0;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>不能把局部量的地址作为指针返回给调用者</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int *f()&#123;\n    int i&#x3D;O;\n    return &amp;i;\n&#125; &#x2F;&#x2F;f调用完i的变量空间就归还了\nint*g()&#123;\n    int j&#x3D;1; &#x2F;&#x2F;j与i分配的是同一块空间\n    return &amp;j;\n&#125;\nint main()&#123;\n    int x ;\n    int *p&#x3D;f();\n    int *q&#x3D;g();\n    x&#x3D;*p+*q;\n\tcout &lt;&lt;x &lt;&lt;endl; &#x2F;&#x2F;输出2 (p和q用的同一空间，地址相同，该内存空间最后的值是1)\n    return 0;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h4 id=\"4指针与动态变量\"><a class=\"anchor\" href=\"#4指针与动态变量\">#</a> 4. 指针与动态变量</h4>\n<ul>\n<li>数组元素个数不能是变量，必须在编译时就能确定它的值是多少 <s> <code>int n; cin &gt;&gt; n; int a[n];</code> </s></li>\n</ul>\n<h5 id=\"1动态变量的创建\"><a class=\"anchor\" href=\"#1动态变量的创建\">#</a> （1）动态变量的创建</h5>\n<blockquote>\n<p>动态变量是指在程序运行中，由程序根据需要所创建的变量。</p>\n</blockquote>\n<h6 id=\"1new-类型名\"><a class=\"anchor\" href=\"#1new-类型名\">#</a> ① <code>new &lt;类型名&gt;</code></h6>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int *p, *p0;\np &#x3D; new int;&#x2F;&#x2F;创建了一个int型动态变量，p指向该变量\n*p &#x3D; 1; &#x2F;&#x2F;只能通过改变指针变量来访问该动态的整型变量\np0 &#x3D; new int(10); &#x2F;&#x2F;创建一个int型数，并且用()括号中的数据进行初始化<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p><code>new</code>  操作类型应保持一致</p>\n<h6 id=\"2new-类型名\"><a class=\"anchor\" href=\"#2new-类型名\">#</a> ② <code>new &lt;类型名&gt; [][]</code></h6>\n<blockquote>\n<p>除第一维的大小外，其他维的大小必须是常量或常量表达式</p>\n</blockquote>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int *p; &#x2F;&#x2F;p为指向一个int型数据的指针\nint n;\np &#x3D; new int[n];\n&#x2F;&#x2F;用 p[i]访问第i个元素<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int (*q)[20]; &#x2F;&#x2F;q为一个指向由20个int型元素所构成的一维数组的指针\n\t\t      &#x2F;&#x2F;等价于typedef int A[20]; A *q;\nint n;\n...\nq&#x3D; new int[n][20]; &#x2F;&#x2F;创建一个n行、20列的二维动态数组，返回第一行的地址。 等价于: q&#x3D;new A[n];\n...q[i][j]... &#x2F;&#x2F;访问q指向的二维数组的第i行第j列的元素<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>\n<p>如何创建一个 m 行、n 列的动态数组？</p>\n<ul>\n<li>\n<p>用一维数组实现: <code>int *p=new int[m*n];</code></p>\n</li>\n<li>\n<p>第 i 行、第 j 列元素: <code>*(p+i*n+j)</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"3void-mallocunsigned-int-size\"><a class=\"anchor\" href=\"#3void-mallocunsigned-int-size\">#</a> ③ <code>void *malloc(unsigned int size)</code></h6>\n<p><code>#include &lt;cstdlib&gt;</code></p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int *p1,*p2,*r;\ntypedef int A[20];\nA *q;\nint m,n;\n...\np1 &#x3D; (int *)malloc(sizeof(int)); &#x2F;&#x2F;创建一个int型动态变量\np2 &#x3D; (int *)malloc(sizeof(int)*n); &#x2F;&#x2F;创建一个由n个int型元素构成的一维动态数组变量\n\nq &#x3D; (A *)malloc(sizeof(int)*n*20);&#x2F;&#x2F;创建一个n行20列的二维动态数组变量\nr &#x3D; (int *)malloc(sizeof(int)*m*n); &#x2F;&#x2F;创建一个隐含的m行n列的二维动态数组变量<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li><code>new</code>   <code>malloc</code>  区别：\n<ul>\n<li><code>new</code>  自动计算所需分配的空间大小，而 <code>malloc</code>  需要显式指出</li>\n<li><code>new</code>  自动返回相应类型的指针，而 <code>malloc</code>  要做显式类型转换</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"2动态变量的访问\"><a class=\"anchor\" href=\"#2动态变量的访问\">#</a> （2）动态变量的访问</h5>\n<p>动态变量没有名字，对动态变量的访问需要通过指向动态变量的指针变量来进行（间接访问）。</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int *p,*q;\np &#x3D;new int;\n...*p... &#x2F;&#x2F;访问上面创建的int型动态变量q&#x3D;new int[n];\n...*(q+3)... &#x2F;&#x2F;或...q[3]...访问上面创建的动态数组中的第4个元素<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h5 id=\"3动态变量的撤销\"><a class=\"anchor\" href=\"#3动态变量的撤销\">#</a> （3）动态变量的撤销</h5>\n<ul>\n<li>\n<p>在 C++ 中，动态变量需要由程序显式地撤消（使之消亡）</p>\n<p>例如:<br>\n <code>delete p;//撤消p指向的int型动态变量</code> 或 <code>free(p);</code></p>\n<p>再例如:<br>\n <code>delete []q;//撤消q指向的动态数组</code> 或  <code>free(q);</code></p>\n</li>\n<li>\n<p>一般来说，用 new 创建的动态变量需要用 delete 来撤销；用 malloc 创建的动态变量则需要用 free 撤销。</p>\n</li>\n</ul>\n<h6 id=\"1delete-指针变量\"><a class=\"anchor\" href=\"#1delete-指针变量\">#</a> ① <code>delete &lt;指针变量&gt;</code></h6>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int *p &#x3D; new int;\ndelete p;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n<h6 id=\"2delete-指针变量\"><a class=\"anchor\" href=\"#2delete-指针变量\">#</a> ② <code>delete []&lt;指针变量&gt;</code></h6>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int *p &#x3D; new int[20];\ndelete []p;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n<h6 id=\"3void-freevoid-p\"><a class=\"anchor\" href=\"#3void-freevoid-p\">#</a> ③ <code>void free(void *p)</code></h6>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">p1 &#x3D; (int *)malloc(sizeof(int));\nq &#x3D; (A *)malloc(sizeof(int)*n*20);\nfree(p);\nfree(q);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>\n<p>用 delete 和 free<strong> 只能撤消动态变量</strong>！<s> <code>int x,*p; p = &amp;x; delete p;</code> </s></p>\n</li>\n<li>\n<p>用 delete 和 free 撤消动态数组时，其中的指针变量必须指向数组的第一个元素</p>\n<p><s> <code>int *p = new int[n];  p++; delete []p;</code> </s></p>\n</li>\n<li>\n<p>悬浮指针</p>\n<p>用 delete 或 free 撤消动态变量后，C++ 编译程序一般不会把指向它的指针变量的值赋为 0，这时该指针指向一个无效空间。</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int *p;\np &#x3D; new int;\ndelete p;&#x2F;&#x2F;撤销了p所指向的动态变量\n*p&#x3D; 1;&#x2F;&#x2F;逻辑错误，P指向的内存空间已经分配给其他动态变量了<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>内存泄漏</p>\n<p>没有撤消动态变量，而把指向它的指针变量指向了别处或指向它的指针变量的生存期结束了，这时，这个动态变量存在但不可访问（这个动态变量已成为一个 “孤儿”），从而浪费空间。</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int x,*p;\np &#x3D; new int[10];&#x2F;&#x2F;动态数组\np&#x3D;&amp;x; &#x2F;&#x2F;之后，上面的动态数组就访问不到了!<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n<h4 id=\"5指针与数组\"><a class=\"anchor\" href=\"#5指针与数组\">#</a> 5. 指针与数组</h4>\n<blockquote>\n<p>指针访问数组元素能提高效率</p>\n</blockquote>\n<h5 id=\"1一维数组的首地址\"><a class=\"anchor\" href=\"#1一维数组的首地址\">#</a> （1）一维数组的首地址</h5>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int a[10]; &#x2F;&#x2F;等价于: typedef int A[10]; A a;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<h6 id=\"1通过数组首元素来获得\"><a class=\"anchor\" href=\"#1通过数组首元素来获得\">#</a> ①通过数组首元素来获得</h6>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int *p;\np &#x3D; &amp;a[0];\n或\np &#x3D; a; &#x2F;&#x2F;把一维数组a隐式类型转换成第一个元素的地址: &amp;a[0]\np++;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>\n<p>把一维数组传给一个函数时，编译器也会对数组变量进行类型转换 例： <code>int a[10]; f(a);</code>  相当于 <code>f(&amp;a[0]);</code></p>\n</li>\n<li>\n<p>字符串常量也可隐式转换成他的第一个字符在内存中的首地址。</p>\n</li>\n</ul>\n<h6 id=\"2通过整个数组获得\"><a class=\"anchor\" href=\"#2通过整个数组获得\">#</a> ②通过整个数组获得</h6>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">A *q;&#x2F;&#x2F;或int(*q)[10];\nq &#x3D; &amp;a; &#x2F;&#x2F;整个数组的地址，它与&amp;a[0]值相同，但类型不同\nq++;&#x2F;&#x2F;加:10×sizeof(int)\n&#x2F;&#x2F;q为1x10的二维数组，q[0][i]或(*q)[i]用于按行来访问二维数组<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>\n<p>当创建一个动态的一维数组时，得到的是第一个元素的地址。例如:</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int n;\nint *p;\np &#x3D; new int[n];&#x2F;&#x2F;创建一个由n个int型元素构成的一维动态数组，返回第一个元素的地址，其类型为: int *<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n<h5 id=\"2多维数组的首地址\"><a class=\"anchor\" href=\"#2多维数组的首地址\">#</a> （2）多维数组的首地址</h5>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int b[5][10];&#x2F;&#x2F;等价于: typedef int A[10]; A b[5];<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<ul>\n<li><code>int b[2][3]=&#123;1,2,3,4,5,6&#125;</code></li>\n</ul>\n<h6 id=\"1通过第一行第一列元素来获得\"><a class=\"anchor\" href=\"#1通过第一行第一列元素来获得\">#</a> ①通过第一行第一列元素来获得</h6>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int *p;\np&#x3D; &amp;b[0][0];&#x2F;&#x2F;或p&#x3D; b[0];(自动转换成&amp;b[0][0])第一行第一列元素的地址\np++;&#x2F;&#x2F;加:sizeof(int)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>访问元素  <code>p[i]</code>   <code>*(p+i)</code></li>\n</ul>\n<h6 id=\"2通过第一行的一维数组来获得\"><a class=\"anchor\" href=\"#2通过第一行的一维数组来获得\">#</a> ②通过第一行的一维数组来获得</h6>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">A *q; &#x2F;&#x2F;或int (*q)[10];\nq&#x3D;&amp;b[0];&#x2F;&#x2F;或q&#x3D;b; (自动转换成&amp;b[0]) 第一行的地址\nq++; &#x2F;&#x2F;加:10×sizeof(int) q指向下一行<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>访问元素  <code>q[i][j]</code>   <code>*(*(q+i)+j)</code></li>\n</ul>\n<p><code>q++</code> （此时指向第 1 行)  <code>**q</code>  4（第 1 行第 0 个元素）   <code>*(*q+1)</code>  5（第 1 行第 1 个元素）  <code>(*q)[1]</code>  5</p>\n<h6 id=\"3通过整个数组来获得\"><a class=\"anchor\" href=\"#3通过整个数组来获得\">#</a> ③通过整个数组来获得</h6>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">B *r; &#x2F;&#x2F;或int (*r)[5][10];\nr &#x3D;&amp;b;&#x2F;&#x2F;整个二维数组的地址\nr++; &#x2F;&#x2F;加:5×10×sizeof(int)\n&#x2F;&#x2F;在三维数组中使用<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>\n<p>访问元素 <code>r[0][i][j]</code>   <code>*(r)[i][j]</code></p>\n</li>\n<li>\n<p>例题：</p>\n</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">设int a[3][4]&#x3D;&#123;&#123;1,3,5,7&#125;,&#123;2,4,6,8&#125;&#125;;则*(*a+1)的值为  3 （第0行第1个元素）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<ul>\n<li>\n<p>对于一个动态的 n 维数组，实际上是按一维动态数组来创建的，返回的首地址类型是去掉第一维后的数组指针类型。例如，下面创建一个动态的二维数组：</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">typedef int A[10];&#x2F;&#x2F;A表示一个由10个int型元素所构成的一维数组类型\nint m;\nA *q;&#x2F;&#x2F;或: int(*q)[10];\nq&#x3D; new int[m][10];&#x2F;&#x2F;创建一个由m行10列的二维数组，返回第一行的地址（类型为:A*)。\n或\nq&#x3D;new A[m];<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n<h5 id=\"3函数main的参数\"><a class=\"anchor\" href=\"#3函数main的参数\">#</a> （3）函数 main 的参数</h5>\n<ul>\n<li>\n<p>可以给函数 main 定义参数，其定义格式为: <code>int main(int argc, char *argv[]);</code> <br>\n <code>argc</code>  表示传给函数 main 的参数的个数，<br>\n <code>argv</code>  表示各个参数，它是一个一维数组，其每个元素为一个指向字符串的指针。</p>\n</li>\n<li>\n<p>以 <code>“copy file1 file2”</code>  执行程序 copy 时，copy 的函数 main 将得到参数:<br>\nargc:3<br>\nargv[0]: &quot;copy&quot;</p>\n<p>argv[1]: &quot;file1&quot;</p>\n<p>argv[2]: &quot;file2&quot;</p>\n</li>\n</ul>\n<h4 id=\"6函数指针\"><a class=\"anchor\" href=\"#6函数指针\">#</a> 6. 函数指针</h4>\n<ul>\n<li>\n<p>C++ 中可以定义一个指针变量，使其指向一个函数。</p>\n</li>\n<li>\n<p>函数指针定义格式： <code>&lt;返回类型&gt; (*&lt;指针类型&gt;)(&lt;形式参数表&gt;)</code></p>\n</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">double (*fp)(int);&#x2F;&#x2F;fp是一个指向函数的指针变量\n或者\ntypedef double (*FP)(int);\nFP fp;  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>\n<p>对于一个函数，可以用取地址操作符 <code>&amp;</code>  来获得它的内存地址，或直接用函数名来表示。</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">double f(int x)&#123; ...&#125;\nfp&#x3D; &amp;f;&#x2F;&#x2F;或者，fp &#x3D;f;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>通过函数指针调用函数可采用下面的形式</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">(*fp)(10); &#x2F;&#x2F;或者，fp(10);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;函数指针，可以指向有相同参数列表和返回值的不同名函数\nint max(int x,int y)&#123;\n    return x&gt;y?x:y;\n&#125;\nint min(int x,int y)&#123;\n    return x&gt;y?y:x;\n&#125;\n\nvoid main(void)&#123;\n    int (*p)(int,int);\n    p &#x3D; max;\n    cout &lt;&lt; p(3,5) &lt;&lt; endl;\n    p &#x3D; min;\n    cout &lt;&lt; p(3,5) &lt;&lt; endl;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281109515.png\" alt=\"image-20230508153735544\"></p>\n<p>A：指向整型量的指针</p>\n<p>B：指向字符型的指针</p>\n<p>C：由指向字符的指针构成的数组，即指针数组</p>\n<p>D：指向字符数组的指针，即数组指针</p>\n<p>F：返回值为指向整型量的指针的函数，即指针函数</p>\n<p>G：指向返回值为整型量的函数的指针，即函数指针</p>\n<h4 id=\"7多级指针\"><a class=\"anchor\" href=\"#7多级指针\">#</a> 7. 多级指针</h4>\n<p>（可能不考 待补充）</p>\n<h4 id=\"六引用类型变量的别名\"><a class=\"anchor\" href=\"#六引用类型变量的别名\">#</a> （六）引用类型（变量的别名）</h4>\n<h4 id=\"1定义-5\"><a class=\"anchor\" href=\"#1定义-5\">#</a> 1. 定义</h4>\n<ul>\n<li>\n<p>定义格式： <code>&lt;类型&gt; &amp;&lt;引用变量&gt;=&lt;变量&gt;</code></p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int x&#x3D;O;\nint &amp;y&#x3D;x;&#x2F;&#x2F;y为引用类型的变量，可以看成是x的别名\ncout &lt;&lt;x&lt;&lt;&#39;,&#39;&lt;&lt;y &lt;&lt; endl;&#x2F;&#x2F;结果为:0,0\ny &#x3D; 1;\ncout &lt;&lt;x &lt;&lt;&#39;,&#39;&lt;&lt;y &lt;&lt;endl;&#x2F;&#x2F;结果为:1,1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>引用类型用于给一个变量取一个别名。</p>\n</li>\n<li>\n<p>在语法上，<br>\n对引用类型变量的访问与非引用类型相同。</p>\n</li>\n<li>\n<p>在语义上，<br>\n 对引用类型变量的访问实际访问的是另一个变量（被引用的变量）。<br>\n效果与通过指针间接访问另一个变量相同。</p>\n</li>\n<li>\n<p>对引用类型需要注意下面几点:</p>\n<ul>\n<li>定义引用类型变量时，应在变量名加上符号 “&amp;”，以区别于普通变量。</li>\n<li><strong>定义引用变量时必须要有初始化</strong>，并且引用变量和被引用变量应具有相同的类型。</li>\n<li>引用类型的变量定义之后，它不能再引用其它变量。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>引用本质：指针常量</p>\n<p>指针指向不可变，指针指向的值可变</p>\n</blockquote>\n<h4 id=\"2引用类型作为函数的参数类型\"><a class=\"anchor\" href=\"#2引用类型作为函数的参数类型\">#</a> 2. 引用类型作为函数的参数类型</h4>\n<ul>\n<li>\n<p>通过形参改变实参的值</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\nusing namespace std;\nvoid swap(int &amp;x, int &amp;y)&#123;&#x2F;&#x2F;交换两个int型变量的值\n    int t;\n\tt &#x3D; x;\n    x &#x3D; y;\n    y &#x3D; t;\n&#125;\nint main()&#123;\n    int a&#x3D;0,b&#x3D;1;\n    cout &lt;&lt;a&lt;&lt;&#39;,&#39;&lt;&lt;b&lt;&lt; endl; &#x2F;&#x2F;结果为:0,1\n    swap(a,b);\n\tcout &lt;&lt;a&lt;&lt;&#39;,&#39;&lt;&lt;b&lt;&lt;endl; &#x2F;&#x2F;结果为:1,0\n    return 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>指针的引用</p>\n</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\nusing namespace std;\nvoid swap(int *&amp;x, int *&amp;y)&#123;&#x2F;&#x2F;交换两个int型指针变量的值\n    int *t;\n\tt &#x3D; x;\n    x &#x3D; y;\n    y &#x3D; t;\n&#125;\nint main()&#123;\n    int a&#x3D;0,b&#x3D;1;\n    int *p&#x3D;&amp;a,*q&#x3D;&amp;b;\n    cout &lt;&lt;*p&lt;&lt;&#39;,&#39;&lt;&lt;*q&lt;&lt; endl; &#x2F;&#x2F;p指向a，q指向b 结果为:0,1\n    swap(p,q);\n\tcout &lt;&lt;*p&lt;&lt;&#39;,&#39;&lt;&lt;*q&lt;&lt;endl; &#x2F;&#x2F;p指向b，q指向a 结果为:1,0\n    return 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>引用做函数返回值类型</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;返回数组中最大元素的引用（注意:不能返回局部变量的引用)\nint &amp;max(int x[], int num)&#123;\n    int i, j;\n\tj &#x3D; 0;\n\tfor (i&#x3D;1;i&lt;num;i++)&#123;\n        if(x[i]&gt;x[j])&#123;\n            j &#x3D; i;\n            return x[j];\n        &#125;\n    &#125;\n&#125;\n&#x2F;&#x2F;引用具有左值,可以通过返回的引用修改值\nint a[10];\ncout&lt;&lt;max(a,10)&lt;&lt;endl;\nmax(a,10)+&#x3D;1; &#x2F;&#x2F;把数组最大元素的值+1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>\n<p>通过把形参定义成对常量的引用，可以防止在函数中通过引用类型的形参改变实参的值。</p>\n</li>\n<li>\n<p>引用类型与指针类型的区别</p>\n<ul>\n<li>\n<p>引用类型和指针类型都可以实现通过一个变量访问另一个变量，但在语法上，</p>\n<ul>\n<li>\n<p>引用是采用直接访问形式</p>\n</li>\n<li>\n<p>指针则需要采用间接访问形式</p>\n</li>\n</ul>\n</li>\n<li>\n<p>在作为函数参数类型时，</p>\n<ul>\n<li>\n<p>引用类型参数的实参是一个变量的名字</p>\n</li>\n<li>\n<p>指针类型参数的实参是一个变量的地址</p>\n</li>\n</ul>\n</li>\n<li>\n<p>在定义时初始化以后，</p>\n<ul>\n<li>引用类型变量不能再引用其它变量</li>\n<li>指针类型变量可以指向其它的变量</li>\n</ul>\n</li>\n<li>\n<p>引用类型一般作为指针类型来实现（有时又把引用类型称作隐蔽的指针，hidden pointer)</p>\n</li>\n<li>\n<p>能够用引用实现的指针功能，尽量用引用！</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"六-对象与类\"><a class=\"anchor\" href=\"#六-对象与类\">#</a> 六、对象与类</h2>\n<h3 id=\"一面向对象程序设计\"><a class=\"anchor\" href=\"#一面向对象程序设计\">#</a> （一）面向对象程序设计</h3>\n<h4 id=\"1基础\"><a class=\"anchor\" href=\"#1基础\">#</a> 1. 基础</h4>\n<h5 id=\"1数据抽象\"><a class=\"anchor\" href=\"#1数据抽象\">#</a> （1）数据抽象</h5>\n<ul>\n<li>数据的使用者只需要知道对数据所能实施的操作以及这些操作之间的关系，而不必知道数据的具体表示。</li>\n</ul>\n<h5 id=\"2数据封装\"><a class=\"anchor\" href=\"#2数据封装\">#</a> （2）数据封装</h5>\n<ul>\n<li>\n<p>指把数据及其操作作为一个整体来进行描述。</p>\n</li>\n<li>\n<p>数据的具体表示对使用者是不可见的，对数据的访问只能通过封装体所提供的对外接口 (操作）来完成。</p>\n</li>\n</ul>\n<h5 id=\"3栈\"><a class=\"anchor\" href=\"#3栈\">#</a> （3）栈</h5>\n<ul>\n<li>\n<p>栈是一种由若干个具有线性次序关系的元素所构成的复合数据。对栈只能实施两种操作:</p>\n<ul>\n<li>\n<p>进栈（push）: 往栈中增加一个元素</p>\n</li>\n<li>\n<p>退栈（pop）: 从栈中删除一个元素</p>\n<p>上述两个操作必须在栈的同一端（称为栈顶，top）进行。后进先出<br>\n (Last In First Out，简称 LIFO) 是栈的一个重要性质</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2对象和类\"><a class=\"anchor\" href=\"#2对象和类\">#</a> 2. 对象和类</h4>\n<ul>\n<li>对象是由数据及能对其实施的操作所构成的封装体，它属于值的范畴。</li>\n<li>类描述了对象的特征（包含哪些数据和操作），它属于类型的范畴 (对象的类型)。\n<ul>\n<li>数据：数据成员、成员变量、实例变量、对象的局部变量等</li>\n<li>操作：成员函数、方法、消息处理过程等</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3继承inheritance\"><a class=\"anchor\" href=\"#3继承inheritance\">#</a> 3. 继承 (Inheritance)</h4>\n<ul>\n<li>在定义一个新类（派生类、子类）时，可以利用已有类（基类、父类）的一些特征描述。</li>\n<li>单继承与多继承</li>\n<li>作用：分类、代码复用等</li>\n</ul>\n<h4 id=\"4多态与绑定\"><a class=\"anchor\" href=\"#4多态与绑定\">#</a> 4. 多态与绑定</h4>\n<blockquote>\n<p>多态性 (Polymorphism) 动态绑定 (Dynamic Binding)・</p>\n</blockquote>\n<h5 id=\"1多态\"><a class=\"anchor\" href=\"#1多态\">#</a> （1）多态</h5>\n<ul>\n<li>某一论域中的一个元素存在多种解释。通常体现为:\n<ul>\n<li>一名多用:\n<ul>\n<li>函数名重载</li>\n<li>操作符重载</li>\n</ul>\n</li>\n<li>类属性:\n<ul>\n<li>类属函数：一个函数能对多种类型的数据进行操作。</li>\n<li>类属类型：一个类型可以描述多种类型的数据。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>面向对象程序特有的多态（动态多态）:\n<ul>\n<li>对象类型的多态：子类对象既属于子类，也属于父类</li>\n<li>对象标识的多态：父类的引用或指针可以引用或指向子类对象</li>\n<li>消息的多态：一个消息集有多种解释（父类与子类有不同解释）</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"2绑定\"><a class=\"anchor\" href=\"#2绑定\">#</a> （2）绑定</h5>\n<ul>\n<li>确定对多态元素的某个使用是多态元素的那一种形式。\n<ul>\n<li>静态绑定（Static Binding，也称前期绑定，EarlyBinding）: 在编译时刻确定。</li>\n<li>动态绑定（Dynamic Binding，也称后期绑定或延迟绑定 Late Binding）: 在运行时刻确定。</li>\n</ul>\n</li>\n<li>多态带来的好处:\n<ul>\n<li>易于实现程序高层 (上层）代码的复用。</li>\n<li>使得程序扩充变得容易（只要增加底层的具体实现）。</li>\n<li>增强语言的可扩充性（操作符重载等）。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"二类\"><a class=\"anchor\" href=\"#二类\">#</a> （二）类</h3>\n<blockquote>\n<p>对象构成了面向对象程序的基本计算单位，而对象的特征则由相应的类来描述。类也可看成是对象的集合。</p>\n</blockquote>\n<h4 id=\"1数据成员\"><a class=\"anchor\" href=\"#1数据成员\">#</a> 1. 数据成员</h4>\n<ul>\n<li>\n<p>数据成员指类的对象所包含的数据，它们可以是常量和变量。数据成员的说明格式与非成员数据的声明格式相同</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class Datell&#123;&#x2F;&#x2F;类定义\n\tprivate:&#x2F;&#x2F;访问控制说明\n      int year,month,day;&#x2F;&#x2F;数据成员说明\n&#125;;\n例如:class A&#123;\n    int x&#x3D;0;&#x2F;&#x2F;Error\n\tconst double y&#x3D;0.0;&#x2F;&#x2F;Error\n&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p><strong>说明数据成员时不允许进行初始化</strong>。</p>\n</li>\n</ul>\n<h4 id=\"2成员函数\"><a class=\"anchor\" href=\"#2成员函数\">#</a> 2. 成员函数</h4>\n<ul>\n<li>\n<p>成员函数描述了对类定义中的数据成员所能实施的操作。</p>\n</li>\n<li>\n<p>成员函数的实现也可以放在类定义外</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class A&#123;\n    void f();&#x2F;&#x2F;声明\n&#125;;\nvoid A::f() &#123;...&#125; &#x2F;&#x2F;定义，非内联函数，需要用类名受限，区别于全局函数。\n或\ninline void A:f() &#123;...&#125; &#x2F;&#x2F;显式说明该成员函数也是一个内联函数<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>类成员函数名是可以重载的（析构函数除外），遵循一般函数名的重载规则</p>\n</li>\n<li>\n<p>成员函数可以对其形参设置默认值</p>\n</li>\n</ul>\n<h4 id=\"3成员的访问控制\"><a class=\"anchor\" href=\"#3成员的访问控制\">#</a> 3. 成员的访问控制</h4>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class A\n&#123; public:&#x2F;&#x2F;访问不受限制。\n\tint x;\n\tvoid f();\n  private: &#x2F;&#x2F;只能在本类和友元的代码中访问。\n    int y;\n\tvoid g();\n  protected: &#x2F;&#x2F;只能在本类、派生类和友元的代码中访问。\n    int z;\n\tvoid h();\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>在 C++ 的类定义中，<strong>默认访问控制是 private</strong>（结构和联合成员的默认访问控制为 public)<br>\n 可以有多个 public、private 和 protected 访问控制说明</li>\n</ul>\n<h3 id=\"三对象\"><a class=\"anchor\" href=\"#三对象\">#</a> （三）对象</h3>\n<h4 id=\"1对象的创建\"><a class=\"anchor\" href=\"#1对象的创建\">#</a> 1. 对象的创建</h4>\n<h5 id=\"1直接方式\"><a class=\"anchor\" href=\"#1直接方式\">#</a> （1）直接方式</h5>\n<p><code>Date today,yesterday</code></p>\n<ul>\n<li>全局对象：在函数外定义的对象</li>\n<li>局部对象：在函数内定义的对象</li>\n</ul>\n<h5 id=\"2间接方式动态对象\"><a class=\"anchor\" href=\"#2间接方式动态对象\">#</a> （2）间接方式（动态对象）</h5>\n<ul>\n<li>\n<p>在程序运行时刻，通过 <code>new</code>  操作来创建对象，用 <code>delete</code>  操作来撤消 (使之消亡）。</p>\n<blockquote>\n<p><code>new</code>  创建对象自动调用构造函数<br>\n <code>delete</code>  释放对象自动调用析构函数</p>\n<p>而 <code>malloc</code>  与 <code>free</code>  则否</p>\n</blockquote>\n</li>\n<li>\n<p>通过指针来标识和访问。</p>\n</li>\n<li>\n<p>单个动态对象的创建与撤消</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">A *p;\np &#x3D;new A;&#x2F;&#x2F;创建一个A类的动态对象\n...*p...&#x2F;&#x2F;通过p访问动态对象\ndelete p;&#x2F;&#x2F;撤消p所指向的动态对象。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>动态对象数组的创建与撤消</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">A *q;\nq&#x3D; new A[100]; &#x2F;&#x2F;创建一个动态对象数组。\n...q[i]...&#x2F;&#x2F;或者，*(q+i)，通过q访问动态对象数组\ndelete []q; &#x2F;&#x2F;撤消q所指向的动态对象数组。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n<h4 id=\"2对象的操作\"><a class=\"anchor\" href=\"#2对象的操作\">#</a> 2. 对象的操作</h4>\n<ul>\n<li>非动态对象 <code>&lt;对象&gt;.&lt;类成员&gt;</code></li>\n<li>动态对象 <code>&lt;对象指针&gt;-&gt;&lt;类成员&gt;</code>  或 <code>(*&lt;对象指针&gt;).&lt;类成员&gt;</code></li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class A&#123;\n     int x;\n    public:\n     void f();\n&#125;;\nint main()&#123;\n    A a;&#x2F;&#x2F;创建A类的一个局部对象a。\n\ta.f();&#x2F;&#x2F;调用A类的成员函数f对对象a进行操作。\n\tA *p&#x3D;new A;&#x2F;&#x2F;创建A类的一个动态对象，p指向之。\n\tp-&gt;f();&#x2F;&#x2F;调用A类的成员函数f对p所指向的对象进行操作。\n    delete p;\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>\n<p>在类的外部，通过对象来访问类的成员时要受到类成员访问控制的限制</p>\n</li>\n<li>\n<p>可以对同类对象进行赋值</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">Date yesterday,today,some_day;\nsome_day &#x3D; yesterday;&#x2F;&#x2F;把对象yesterday的数据成员分别赋值给对象some_day的相应数据成员。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>取对象地址</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">Date *p_date;\np_date &#x3D; &amp;today;&#x2F;&#x2F;把对象today的地址赋值给对象指针p_date。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>把对象作为实参传给函数以及作为函数的返回值等操作。</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">Date f(Date d)&#123;\n    Date x;\n\treturn x;\n\tsome_day2 &#x3D; f(yesterday);&#x2F;&#x2F;调用函数f，把对象yesterday作为实参。返回值对象赋给对象some_day2。\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n<h4 id=\"3this指针\"><a class=\"anchor\" href=\"#3this指针\">#</a> 3. <code>this</code>  指针</h4>\n<ul>\n<li>\n<p>类定义中说明的数据成员（静态数据成员除外）对该类的每个对象都有一个拷贝。</p>\n</li>\n<li>\n<p>实际上，每一个成员函数都有一个隐藏的形参 <code>this</code> ，其类型为： <code>&lt;类名&gt;*const this;</code></p>\n</li>\n<li>\n<p>成员函数所属对象的指针，明确地表示了成员函数当前操作数据所属对象</p>\n</li>\n<li>\n<p>在成员函数中对类成员的访问是通过 this 来进行的。</p>\n</li>\n<li>\n<p>一般情况下，类的成员函数中不必显式使用 this 指针来访问对象的成员（编译程序会自动加上）。</p>\n</li>\n<li>\n<p>如果成员函数中要把 this 所指向的对象作为整体来操作（如：取对象的地址），则需要显式地使用 this 指针。</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">void func(A *p);\nclass A&#123;\n    int x;\n    public:\n      void f()&#123;func(this);&#125; &#x2F;&#x2F;！！！\n      void g(int i)&#123;x &#x3D; i; f();&#125;\n&#125;;\n...\nA a,b;\na.f(); &#x2F;&#x2F;要求在f中调用func(&amp;a)\nb.f(); &#x2F;&#x2F;要求在f中调用func(&amp;b)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n<h3 id=\"四对象的初始化和消亡前处理\"><a class=\"anchor\" href=\"#四对象的初始化和消亡前处理\">#</a> （四）对象的初始化和消亡前处理</h3>\n<h4 id=\"1构造函数constructors\"><a class=\"anchor\" href=\"#1构造函数constructors\">#</a> 1. 构造函数 (Constructors)</h4>\n<h5 id=\"1定义-6\"><a class=\"anchor\" href=\"#1定义-6\">#</a> （1）定义</h5>\n<ul>\n<li>\n<p>构造函数是类的特殊成员函数，它的<strong>名字与类名相同</strong>、<strong>无返回值类型</strong>。创建对象时，构造函数会自动被调用。</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class A&#123;\n      int x,y;\n\tpublic:\n      A()&#123;x &#x3D;0; y &#x3D; 0;&#125;&#x2F;&#x2F;构造函数\n    ...\n&#125;;\nA a; &#x2F;&#x2F;创建对象a:为a分配内存空间，然后调用a的构造函数A()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>构造函数可以重载，其中，不带参数的（或所有参数都有默认值的）构造函数被称为<strong>默认构造函数</strong>。(可以不用实参进行调用的构造函数)</p>\n</li>\n<li>\n<p>构造函数一般为 <code>public</code>  可以设置为 <code>private</code></p>\n</li>\n</ul>\n<h5 id=\"2调用\"><a class=\"anchor\" href=\"#2调用\">#</a> （2）调用</h5>\n<ul>\n<li>对象创建后不能再调用构造函数，构造函数的调用是对象创建过程的一部分。</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class A&#123;\n    ...\n    public:\n      A();\n      A(int i);\n      A(char *p);\n&#125;;\n...\nA a1; &#x2F;&#x2F;调用默认构造函数  也可写成: A a1&#x3D;A(); 但不能写成: A a1();\nA a2(1); &#x2F;&#x2F;调用A(int i)  也可写成:A a2&#x3D;A(1); (显示)或 A a2&#x3D;1;(隐式)\nA a3(&quot;abcd&quot;); &#x2F;&#x2F;调A(char *)  也可写成:A a3&#x3D;A(&quot;abcd&quot;); 或A a3&#x3D;&quot;abcd&quot;;\nA a[4];&#x2F;&#x2F;调用对象a[0]、a[1]、a[2]、a[3]的默认构造函数。\nA b[5]&#x3D;&#123;A(),A(1),A(&quot;abcd&quot;),2,&quot;xyz&quot;&#125;; &#x2F;&#x2F;调用b[0]的A()、b[1]的A(int)、b[2]的A(char *)、b[3]的A(int)和b[4]的A(char *)\nA *p1&#x3D;new A;&#x2F;&#x2F;调用默认构造函数。\nA *p2&#x3D;new A(2);&#x2F;&#x2F;调用A(int i)。\nA *p3&#x3D;new A(&quot;xyz&quot;);&#x2F;&#x2F;调用A(char *)。\nA *p4&#x3D;new A[20];&#x2F;&#x2F;创建动态对象数组时只能调用各对象的默认构造函数<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h5 id=\"3成员初始化表\"><a class=\"anchor\" href=\"#3成员初始化表\">#</a> （3）成员初始化表</h5>\n<ul>\n<li>\n<p>对于常量数据成员和引用数据成员（某些静态成员除外），不能在说明它们时初始化，也不能采用赋值操作对它们初始化（说明数据成员时不允许初始化）</p>\n</li>\n<li>\n<p>对于常量数据成员和引用数据成员，可以在定义构造函数时，在函数头和函数体之间加入一个成员初始化表来对它们进行初始化。例如：</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class A&#123;\n    int x;\n\tconst int y;\n    int &amp;z;\n    public:\n\t  A():x(0),z(x),y(1) &#x2F;&#x2F;成员初始化表(按照 x(0) y(1) z(x)顺序初始化)\n      &#123;&#125;\n&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>成员初始化表中成员初始化的书写次序并不决定它们的初始化次序，数据成员的初始化次序由它们在<strong>类定义中的说明次序</strong>来决定。</p>\n</li>\n<li>\n<p>先初始化再执行构造函数体</p>\n</li>\n</ul>\n<blockquote>\n<p>例题：假定 MyClass 为一个类，执行 <code>MyClass a[3],*p[2];</code>  语句时会自动调用该类构造函数 (3) 次</p>\n</blockquote>\n<h4 id=\"2析构函数destructors\"><a class=\"anchor\" href=\"#2析构函数destructors\">#</a> 2. 析构函数 (Destructors)</h4>\n<p><code>~&lt;类名&gt;</code>  没有返回类型、不带参数、不能被重载</p>\n<ul>\n<li>一个对象消亡时，系统在收回它的内存空间之前，将会自动调用析构函数。</li>\n<li>可以在析构函数中完成对象被删除前的一些清理工作（如归还对象额外申请的资源等)。</li>\n<li>析构函数的调用顺序与构造函数的调用顺序完全相反</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class String&#123;\n    int len;\n    char *str;\n  public:\n    String(char* s)&#123; \n        len &#x3D; strlen(s);\n        str &#x3D; new char[len+1];&#x2F;&#x2F;申请资源\n        strcpy(str， s); &#x2F;&#x2F;复制字符串\n    &#125;\n    ~String()&#123;\n        delete[] str;&#x2F;&#x2F;归还资源\n        str&#x3D;NULL;&#x2F;&#x2F;一般情况下不需要这条语句，有时需要\n    &#125;\n&#125;\n\tvoid f()&#123;\n        String s1(&quot;abcd&quot;);&#x2F;&#x2F;调用s1的构造函数\n    ......\n    &#125;&#x2F;&#x2F;调用s1的析构函数<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281110275.png\" alt=\"image-20230515134011070\"></p>\n<p>注意：系统为对象 s1 分配的内存空间只包含 len 和 str（指针）本身所需的空间，str 所指向的空间不由系统分配，而是由对象作为资源自己处理！</p>\n<ul>\n<li>析构函数可以显式调用</li>\n<li>把 string 类的对象 s 变成空字符串的对象，显式调 <code>s1.~String();</code> （只归还对象的资源，对象并未消亡！）</li>\n<li>注意：一般不需要自定义析构函数\n<ul>\n<li>需要时系统隐式提供，如：需要调用成员对象类和基类的析构函数</li>\n<li>归还资源时需自定义</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"总结对比\"><a class=\"anchor\" href=\"#总结对比\">#</a> 总结对比</h4>\n<h5 id=\"构造函数的特殊性质\"><a class=\"anchor\" href=\"#构造函数的特殊性质\">#</a> 构造函数的特殊性质</h5>\n<ul>\n<li>构造函数的名字必须与类名相同</li>\n<li>构造函数不指定返回类型，它隐含有返回值，由系统内部使用</li>\n<li>构造函数可以有一个或多个参数，因此<strong>构造函数可以重载</strong></li>\n<li>在创建对象时，系统会自动调用构造函数</li>\n</ul>\n<h5 id=\"析构函数的特殊性质\"><a class=\"anchor\" href=\"#析构函数的特殊性质\">#</a> 析构函数的特殊性质</h5>\n<ul>\n<li>\n<p>析构函数名是在类名前加 <code>~</code>  符号</p>\n</li>\n<li>\n<p>析构函数不指定返回类型，它不能有返回值</p>\n</li>\n<li>\n<p>析构函数<strong>没有参数</strong>，因此析构函数不能重载，<strong>一个类中只能定义一个析构函数</strong></p>\n</li>\n<li>\n<p>在撤销对象时，系统会自动调用析构函数</p>\n</li>\n<li>\n<p>析构与构造顺序相反</p>\n</li>\n<li>\n<p>如果一个类没有定义构造和析构函数，则编译器将生成默认构造函数（不必为其提供参数的构造函数）和默认析构函数</p>\n</li>\n</ul>\n<blockquote>\n<p>例题 1</p>\n</blockquote>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;date.h\nclass Date&#123;\n    int year, month, day;\n  public:\n\tDate(int y, int m, int d); &#x2F;&#x2F;构造函数1\n    Date(int y&#x3D;2000): year(y)&#123; &#x2F;&#x2F;构造函数2\n\t\tmonth &#x3D; 4;\n\t\tday&#x3D;8;\n\t\tcout&lt;&lt;&quot;Constructor of Date with 1 parameter.&quot;&lt;&lt;endl;\n    &#125;\n\t~Date()&#123;\n            cout&lt;&lt;&quot;Destructor of Date: &quot;&lt;&lt;year&lt;&lt;&quot;.&quot;&lt;&lt;month&lt;&lt;&quot;.&quot;&lt;&lt;day&lt;&lt;endl;\n    &#125;\n\tint IsLeapYear();\n    void Print()&#123;cout&lt;&lt;year&lt;&lt;&quot;.&quot;&lt;&lt;month&lt;&lt;&quot;.&quot;&lt;&lt;day&lt;&lt;endl;&#125;\n&#125;\n&#x2F;&#x2F;date.cpp\nDate::Date(int y, int m, int d):year(y),month(m), day(d)&#123;\n    cout&lt;&lt;&quot;Constructor of Date with 3 paramenters.&quot;&lt;&lt;endl;\n&#125;\nint Date::IsLeapYear()&#123;\n\treturn (year%4&#x3D;&#x3D;0 &amp;&amp; year%100&#x3D; 0) || (year%400)&#x3D;&#x3D;0;\n&#125;\n\n&#x2F;&#x2F;example.cpp\n#include“date.h”\nint main()\n&#123;\n\tDate date1(2022,4,8), date2; &#x2F;&#x2F;分别调用构造函数1，2\n    cout&lt;&lt;&quot;date1:&quot;;\n    date1.Print();\n    cout&lt;&lt;&quot;date2:&quot;;\n    date2.Print();\n\tif(date2.IsLeapYear())&#123;\n        cout&lt;&lt;&quot;date2 is a leapyear.&quot;&lt;&lt;endl;\n\telse \n        cout&lt;&lt;&quot;date2 is not a leapyear. &quot;&lt;&lt;endl;\n\treturn 0;\n&#125;&#x2F;&#x2F;分别调用析构函数\n\n&#x2F;*\nConstructor of Date with 3 paramenters.\nConstructor of Date with 1 paramenters.\ndate1: 2022.4.8\ndate2: 2000.4.8\ndate2 is leapyear.\nDestructor of Date: 2000.4.8\nDestructor of Date: 2022.4.8\n*&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<blockquote>\n<p>对象数组</p>\n<ul>\n<li>数组元素为对象的数组，即数组中每个元素都是同一个类的对象</li>\n<li>对象数组的格式: <code>&lt;类名&gt;&lt;数组名&gt;[&lt;大小&gt;]…..</code>    <code>DATE dates[5];</code> <br>\n 使用对象数组成员: <code>&lt;数组名&gt;[&lt;下标&gt;].&lt;成员名&gt;</code>   <code>dates[0].year</code></li>\n</ul>\n</blockquote>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class DATE\n&#123;\n    int year, month, day;\n  public:\n\tDATE():month(0), day(0), year(0)&#123;\n\t\tcout&lt;&lt;&quot;Default constructor called.&quot;&lt;&lt;endl;\n\t&#125;\n\tDATE(int m, int d, int y):month(m), day(d), year(y)&#123;\n\t\tcout&lt;&lt;&quot;Constructor called.&quot;&lt;&lt;day&lt;&lt;endl;\n\t&#125;\n\t~DATE()&#123;\n\t\tcout&lt;&lt;&quot;Destructor called.&quot;&lt;&lt;day&lt;&lt;endl;\n\t&#125;\n\tvoid Print() const&#123;\n\t\tcout&lt;&lt;&quot;Month&#x3D;&quot;&lt;&lt;month&lt;&lt;&quot;, Day&#x3D;&quot;&lt;&lt;day&lt;&lt;&quot;, Year&#x3D;&quot;&lt;&lt;year&lt;&lt;endl;\n\t&#125;\n&#125;;\nint main()&#123;\n\tDATE dates[5]&#x3D;&#123;DATE(10,1,2002),DATE(10,2,2002),DATE(10,3,2002)&#125;;\n    dates[3] &#x3D; DATE(10,4,2002);\n\tdates[4] &#x3D; DATE(10,5,2002);\n\tfor(int i&#x3D;0;i&lt;5;i++) dates[i].Print();\n    return 0; \n&#125;\n\n&#x2F;*\nConstructor called.1\nConstructor called.2\nConstructor called.3\nDefault constructor called.\nDefault constructor called.\nConstructor called.4\nDestructor called.4 &#x2F;&#x2F;！\nConstructor called.5 \nDestructor called.5 &#x2F;&#x2F;！\nMonth &#x3D; 10, Day &#x3D; 1, Year &#x3D; 2002\nMonth &#x3D; 10, Day &#x3D; 2, Year &#x3D; 2002\nMonth &#x3D; 10, Day &#x3D; 3, Year &#x3D; 2002\nMonth &#x3D; 10, Day &#x3D; 4, Year &#x3D; 2002\nMonth &#x3D; 10, Day &#x3D; 5, Year &#x3D; 2002\nDestructor called.5\nDestructor called.4\nDestructor called.3\nDestructor called.2\nDestructor called.1\n*&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<blockquote>\n<p>自由存储对象</p>\n<ul>\n<li>在程序运行过程中根据需要可以随时建立或者删除的对象称为自由存储对象（建立及删除可使用 new 和 delete）</li>\n</ul>\n</blockquote>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">Class test&#123;\n\tint X, Y;\n  public:\n\tTest();\n\tTest(int i, int j);\n\t~Test()&#123;cout&lt;&lt;“Destructor called: ”&lt;&lt; X &lt;&lt;“,”&lt;&lt; Y &lt;&lt; endl;&#125;\n\tvoid Set(int i, int j);\n\tvoid Print()&#123;cout&lt;&lt;  X &lt;&lt;“, ”&lt;&lt; Y &lt;&lt;endl;&#125;\n&#125;;\n\nTest::Test(): X(0), Y(0)&#123;\n\tcout&lt;&lt;“Default constructor called. ”&lt;&lt;endl;\n&#125;;\nTest::Test(int i, int j): X(i), Y(j)&#123;\n\tcout&lt;&lt;“Constructor called: ”&lt;&lt; X &lt;&lt;‘, ’&lt;&lt; Y &lt;&lt;endl;\n&#125;;\nvoid Test::Set(int i, int j)&#123;X&#x3D;i, Y&#x3D;j&#125;;\n\nint main()&#123;\n\tTest *ptr1, *ptr2, *ptr3;\n\tptr1 &#x3D; new Test(1, 2);\n\tptr2 &#x3D; new Test(3, 4);\n\tptr3 &#x3D; new Test[2];\n\tptr3[0].Set(5, 6);\n\tptr3[1].Set(7, 8);\n\tptr1-&gt;Print();\n\tptr2-&gt;Print();\n\tptr3[0].Print();\n\tptr3[1].Print();\n\tdelete ptr1;\n\tdelete ptr2;\n\tdelete [] ptr3;\n\treturn 0;\n&#125;\n\n&#x2F;*\nConstructor called: 1, 2\nConstructor called: 3, 4\nDefault constructor called.\nDefault constructor called.\n1, 2\n3, 4\n5, 6\n7, 8\nDestructor called: 1, 2\nDestructor called. 3, 4\nDestructor called: 7, 8\nDestructor called. 5, 6\n*&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h4 id=\"3成员对象的初始化\"><a class=\"anchor\" href=\"#3成员对象的初始化\">#</a> 3. 成员对象的初始化</h4>\n<ul>\n<li>\n<p>成员对象：</p>\n<p>对于类的数据成员，其类型可以是另一个类。也就是说，一个对象可以包含另一个对象（称为成员对象）</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class A&#123; \n    ...\n&#125;;\n\nclass B&#123; \n    ...\n\tA a; &#x2F;&#x2F;成员对象\n\t...\n&#125;;\n\nB b; &#x2F;&#x2F;对象b包含一个成员对象：b.a<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>成员对象由成员对象类的构造函数初始化：</p>\n<ul>\n<li>如果在包含成员对象的类中，没有指出用成员对象类的什么构造函数对成员对象初始化，则调用成员对象类的默认构造函数。</li>\n<li>可以在类构造函数的成员初始化表中显式指出用成员对象类的某个构造函数对成员对象初始化。</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class A&#123; \n    int x;\n  public:\n\tA() &#123; x &#x3D; 0; &#125;\n\tA(int i) &#123; x &#x3D; i; &#125;\n&#125;;\nclass B&#123; \n    A a;\n\tint y;\n  public:\n\tB(int i) &#123; y &#x3D; i;&#125; &#x2F;&#x2F;调用A的默认构造函数对a初始化。\n\tB(int i, int j): a(j) &#123; y &#x3D; i; &#125; &#x2F;&#x2F;调用A(int)对初始化。\n&#125;;\nB b1(1); &#x2F;&#x2F;b1.y初始化为1，b1.a.x初始化为0\nB b2(1,2); &#x2F;&#x2F;b2.y初始化为1，b2.a.x初始化为2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>创建包含成员对象的类的对象时，先执行成员对象类的构造函数，再执行本身类的构造函数。</p>\n<ul>\n<li>\n<p>初始化成员对象时，若调用成员对象的非默认构造数，必用成员初始化列表</p>\n</li>\n<li>\n<p>若成员初始化表为空，则调用成员对象的默认构造函数完成初始化</p>\n</li>\n<li>\n<p>一个类若包含多个成员对象，这些对象的初始化次序按它们在类中的说明次序（而不是成员初始化表的次序）进行。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>析构函数的执行次序与构造函数的执行次序正好相反。</p>\n<ul>\n<li>先析构类对象，再析构成员对象</li>\n<li>若有多个成员对象，则析构与构造次序相反</li>\n</ul>\n</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class Counter&#123;\n\tint val;\n  Public:\n\tCounter(): val(0)&#123;cout&lt;&lt;“Defalut Constructor of Counter”&lt;&lt;endl;&#125;\n\tCounter(int x): val(x)&#123;cout&lt;&lt;“Constructor of \t\t\t\tCounter:”&lt;&lt;val&lt;&lt;endl;&#125;\n\t~Counter()&#123;cout&lt;&lt;“Destructor of Counter:”&lt;&lt;val&lt;&lt;endl;&#125;\n&#125;;\nclass Example&#123;\n\tCounter c1, c2;\n\tint val;\n  Public:\n\tExample(): val(0)&#123;cout&lt;&lt;“Defalut Constructor of Example”&lt;&lt;endl;&#125;\n\tExample(int x): c2(x),val(x)&#123;cout&lt;&lt;“Constructor of Example:”&lt;&lt;val&lt;&lt;endl;&#125;\n\t~Example()&#123;cout&lt;&lt;“Destructor of Example:”&lt;&lt;val&lt;&lt;endl;&#125;\n\tvoid Print() const &#123;cout&lt;&lt;“value &#x3D; ”&lt;&lt;val&lt;&lt;emdl;&#125;\n&#125;;\n\nint main()&#123;\n\tExample e1, e2(4);\n\te2.Print();\n\treturn 0;\n&#125;\n\n&#x2F;*\nDefalut Constructor of Counter\nDefalut Constructor of Counter\nDefalut Constructor of Example\nDefalut Constructor of Counter\nConstructor of Counter: 4\nConstructor of Example: 4\nvalue&#x3D;4\nDestructor of Example: 4\nDestructor of Counter: 4\nDestructor of Counter: 0\nDestructor of Example: 0\nDestructor of Counter: 0\nDestructor of Counter: 0\n*&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h4 id=\"4拷贝构造函数\"><a class=\"anchor\" href=\"#4拷贝构造函数\">#</a> 4. 拷贝构造函数</h4>\n<ul>\n<li>在创建一个对象时，若用一个同类型的对象对其初始化，这时将会调用一个特殊的构造函数：拷贝构造函数。</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class A&#123; \n    ......\n  public:\n\tA(); &#x2F;&#x2F;默认构造函数\n\tA(const A&amp; a); &#x2F;&#x2F;拷贝构造函数 const可以省略，只是为了防止在函数体中修改实参对象\n&#125;;\n\n&#x2F;&#x2F;此外拷贝构造函数还可如下：\nA(const A&amp; a， int i&#x3D;0, int j&#x3D;0);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>\n<p>在三种情况下，会调用类的拷贝构造函数：</p>\n<ul>\n<li>\n<p>定义对象时，例如：</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">A a1;\nA a2(a1); &#x2F;&#x2F;也可写成：A a2&#x3D;a1; 或：A a2&#x3D;A(a1);\n&#x2F;&#x2F;调用A的拷贝构造函数，用对象a1初始化对象a2，<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>把对象作为值参数传给函数时，例如：</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">void f(A x);\nA a;\nf(a); &#x2F;&#x2F;调用f时将创建形参对象x，并调用A的拷贝构造函数，用对象a对其初始化。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>把对象作为函数的返回值时，例如：</p>\n</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">A f()&#123; \n    A a;\n\t......\n\treturn a; &#x2F;&#x2F;创建一个A类的临时对象，并调用A的拷贝构造函数，用对象a对其初始化。\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;date.h\n#include &lt;iostream&gt;\nusing namespace std;\n\nclass Date&#123;\n\t\tint year, month, day;\n  public:\n\tDate(int y, int m, int d);\n\tDate(int y&#x3D;2000): year(y)&#123;\n\t\tmonth &#x3D; 4;\n\t\tday&#x3D;8;\n\t\tcout&lt;&lt;&quot;Constructor ofDate with 1 parameter.&quot;&lt;&lt;endl;\n\t&#125;\n\tDate(const Date&amp; d);\n\t~Date()&#123;cout&lt;&lt;&quot;Destructor of Date: &quot;&lt;&lt; year &lt;&lt;&quot;.&quot;&lt;&lt; month &lt;&lt;&quot;.&quot;&lt;&lt; day &lt;&lt; endl;&#125;\n\tint IsLeapYear();\n\tvoid Print()&#123;cout&lt;&lt;year&lt;&lt;&quot;.&quot;&lt;&lt;month&lt;&lt;&quot;.&quot;&lt;&lt;day&lt;&lt;endl;&#125;\n&#125;;\n\n&#x2F;&#x2F;date.cpp\nDate::Date(int y, int m, int d): year(y),month(m),day(d)&#123;\n\tcout&lt;&lt;&quot;Constructor of Date with 3 paramenters.&quot;&lt;&lt;endl;\n&#125;\nDate::Date(const Date&amp; d)&#123;\n\tyear&#x3D;d.year;\n\tmonth&#x3D;d.month;\n\tday&#x3D;d.day;\n\tcout&lt;&lt;&quot;Copy constructor of Date&quot;&lt;&lt;endl;\n&#125;\nint Date::IsLeapYear()&#123;\n\treturn (year%4&#x3D;&#x3D;0 &amp;&amp; year%100 !&#x3D;0) || (year%400)&#x3D;&#x3D;0;\n&#125;\n\nDate fun(Date d)&#123;\n\tDate temp; temp&#x3D;d; return temp;\n&#125;\n\nint main()&#123;\n\tDate date1(2000, 1, 1), date2(0, 0, 0);\n\tDate date3(date1);\n\tdate2&#x3D;fun(date3);\n\tcout&lt;&lt;&quot;date1: &quot;;\n\tdate1.Print();\n\tcout&lt;&lt;&quot;date2: &quot;;\n\tdate2.Print();\n\tcout&lt;&lt;&quot;date3: &quot;;\n\tdate3.Print();\n\treturn 0;\n&#125;\n\n&#x2F;*\nConstructor of Date with 3 parameters.\nConstructor of Date with 3 parameters.\nCopy constructor of Date. &#x2F;&#x2F;date3(date1)\nCopy constructor of Date. &#x2F;&#x2F;d(date3) !!!!! 调用方法fun()时\nConstructor of Date with 1 parameters. &#x2F;&#x2F;(temp)\nCopy constructor of Date.&#x2F;&#x2F;匿名date2(temp)\nDestructor of Date: 2000.1.1&#x2F;&#x2F;temp对象\nDestructor of Date: 2000.1.1 &#x2F;&#x2F;d对象\nDestructor of Date: 2000.1.1 &#x2F;&#x2F;匿名对象\ndate1: 2000.1.1\ndate2: 2000.1.1\ndate3: 2000.1.1\nDestructor of Date: 2000.1.1&#x2F;&#x2F;date3对象\nDestructor of Date: 2000.1.1&#x2F;&#x2F;date2对象\nDestructor of Date: 2000.1.1&#x2F;&#x2F;date1对象\n*&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>如果程序中没有为类提供拷贝构造函数，则编译器将会为其生成一个隐式拷贝构造函数。</li>\n<li>隐式拷贝构造函数将逐个成员拷贝初始化：\n<ul>\n<li>对于普通成员：它采用通常的初始化操作；</li>\n<li>对于成员对象：则调用成员对象类的拷贝构造函数来实现成员对象的初始化 。</li>\n</ul>\n</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class A&#123; \n    int x,y;\n  public:\n\tA() &#123; x &#x3D; y &#x3D; 0; &#125;\n\t......\n&#125;;\nclass B&#123; \n    int z;\n\tA a;\n  public:\n\tB() &#123; z &#x3D; 0; &#125;\n\t...... &#x2F;&#x2F;其中没有定义拷贝构造函数\n&#125;;\n...\nB b1; &#x2F;&#x2F;b1.z、b1.a.x以及b1.a.y均为0。\nB b2(b1); &#x2F;&#x2F;b2.z初始化成b1.z；调用A的拷贝构造函数用b1.a对b2.a初始化。如果A中没有定义拷贝构造函数，则A的隐式拷贝构造函数把b2.a.x和b2.a.y分别初始化成 b1.a.x和b1.a.y；否则，由A的自定义拷贝构造函数决定如何对b2.a.x和b2.a.y进行初始化。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>\n<p>一般情况下，编译程序提供的默认拷贝构造函数的行为足以满足要求，类中不需要自定义拷贝构造函数。</p>\n</li>\n<li>\n<p>在有些情况下必须要自定义拷贝构造函数，否则，将会产生设计者未意识到的严重的程序错误：</p>\n<ul>\n<li>\n<p>浅拷贝</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class A&#123; \n    int x,y;\n\tchar *p;\n  public:\n\tA(char *str)&#123; \n        x &#x3D; 0; y &#x3D; 0;\n\t\tp &#x3D; new char[strlen(str)+1];\n\t\tstrcpy(p,str);\n\t&#125;\n\t~A() &#123; delete [] p; p&#x3D;NULL; &#125;\n&#125;;\n......\nA a1(“abcd”);\nA a2(a1);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281110027.png\" alt=\"image-20230530140234188\"></p>\n<p>系统提供的隐式拷贝构造函数将会使得 a1 和 a2 的成员指针 p 指向同一块内存区域！</p>\n<blockquote>\n<ul>\n<li>如果对一个对象操作之后修改了这块空间的内容，则另一个对象将会受到影响。如果不是设计者特意所为，这将是一个隐藏的错误。</li>\n<li>当对象 a1 和 a2 消亡时，将会分别去调用它们的析构函数，<br>\n这会使得同一块内存区域将被归还两次，从而导致程<br>\n序运行异常。</li>\n</ul>\n</blockquote>\n</li>\n<li>\n<p>深拷贝</p>\n<p>解决上面问题的办法是在类 A 中显式定义一个拷贝构造函数。</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">A::A(const A&amp; a)&#123; \n    x &#x3D; a.x;\n\ty &#x3D; a.y;\n\tp &#x3D; new char[strlen(a.p)+1];\n\tstrcpy(p,a.p);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281110527.png\" alt=\"image-20230530140326030\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>隐式拷贝构造函数会调用成员对象的拷贝构造函数</p>\n</li>\n<li>\n<p>自定义的拷贝构造函数将默认调用成员对象类的默认构造函数对成员对象初始化！</p>\n</li>\n</ul>\n<h3 id=\"五-进阶\"><a class=\"anchor\" href=\"#五-进阶\">#</a> （五） 进阶</h3>\n<h4 id=\"1常const成员函数\"><a class=\"anchor\" href=\"#1常const成员函数\">#</a> 1. 常 (const) 成员函数</h4>\n<h5 id=\"1常成员函数\"><a class=\"anchor\" href=\"#1常成员函数\">#</a> （1）常成员函数</h5>\n<ul>\n<li>\n<p>为了防止在获取对象状态的成员函数中改变对象的状态，可以把它们说明成 ** <code>const</code>  成员函数 **。</p>\n</li>\n<li>\n<p>声明与定义时都应加上 <code>const</code></p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class Date&#123; \n  public:\n\tvoid set(int y, int m, int d); &#x2F;&#x2F;改变对象状态\n\tint get_day() const; &#x2F;&#x2F;获取对象状态\n&#125;;\nint Date::get_day() const &#123;.....&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p><code>const</code>  成员函数不能改变对象的状态（数据成员的值）。</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class A&#123; \n    int x;\n\tchar *p;\n  public:\n\t......\n\tvoid f() const&#123;\n\t\tx &#x3D; 10; &#x2F;&#x2F;Error\n\t\tp &#x3D; new char[20]; &#x2F;&#x2F;Error\n\t\tstrcpy(p,&quot;ABCD&quot;); &#x2F;&#x2F;没有改变p的值，编译程序认为OK！\n\t&#125;\n&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>给成员函数加上 const 修饰符还有一个作用：描述对常量对象所能进行的操作（常对象只能调用常成员函数）。</p>\n</li>\n<li>\n<p>常成员函数不能调用非常成员函数。</p>\n</li>\n</ul>\n<blockquote>\n<p>const 成员函数可以修改 static 成员变量<br>\n✓ const 修饰 this 指针指向内容不可更改<br>\n✓ static 变量不用 this 指针访问</p>\n<p>const 成员函数不能修改对象的任何数据成员</p>\n</blockquote>\n<h5 id=\"2常对象\"><a class=\"anchor\" href=\"#2常对象\">#</a> （2）常对象</h5>\n<ul>\n<li>\n<p>使用 const 关键字修饰的对象称为<strong>常对象</strong> <code>&lt;类名&gt; const &lt;对象名&gt;</code>  或者  <code>const &lt;类名&gt; &lt;对象名&gt;</code></p>\n</li>\n<li>\n<p><strong>常数据成员</strong>： <code>const</code>  说明的数据成员，只能通过构造函数的成员初始化列表显式进行初始化</p>\n</li>\n<li>\n<p>注意：</p>\n<ul>\n<li>\n<p>常对象在<strong>定义时</strong>必须进行<strong>初始化</strong>，而且不能被更新</p>\n</li>\n<li>\n<p>常对象只能调用它的常成员函数</p>\n</li>\n<li>\n<p>一般对象既可以调用常成员函数，也可以调用一般成员函数</p>\n</li>\n<li>\n<p>对于成员函数，<strong> <code>const</code>  参与函数重载的区分</strong></p>\n<p>常对象调用常成员函数，一般对象调用一般成员函数</p>\n</li>\n<li>\n<p>常成员函数可以直接访问类的常数据成员及一般数据成员</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2静态数据成员\"><a class=\"anchor\" href=\"#2静态数据成员\">#</a> 2. 静态数据成员</h4>\n<h5 id=\"1静态数据成员\"><a class=\"anchor\" href=\"#1静态数据成员\">#</a> （1）静态数据成员</h5>\n<ul>\n<li>可通过静态数据成员来实现属于同一个类的不同对象之间的数据共享</li>\n<li>类的静态数据成员对该类的所有对象只有一个拷贝。</li>\n<li>往往在类的外部给出定义并进行初始化。在函数内部声明。</li>\n<li>需要通过对象来访问。 <code>a.x</code></li>\n</ul>\n<h5 id=\"2静态成员函数\"><a class=\"anchor\" href=\"#2静态成员函数\">#</a> （2）静态成员函数</h5>\n<ul>\n<li>\n<p>静态成员函数可以通过对象来访问外，也可以直接通过类来访问。 <code>A::get_shared(); </code> 或 <code>A a; a.get_shared();</code></p>\n</li>\n<li>\n<p>静态成员函数可以直接访问类的静态成员</p>\n</li>\n<li>\n<p>静态成员函数不能直接访问类的非静态成员</p>\n<blockquote>\n<p>静态成员函数没有隐藏的 this 参数</p>\n</blockquote>\n</li>\n<li>\n<p>若要访问非静态成员，必须通过参数传递的方式得到相应的对象，再通过对象进行访问</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class A&#123; \n    int x,y;\n\tstatic int shared;\n  public:\n\tA() &#123; x &#x3D; y &#x3D; 0; &#125;\n\t......\n\tstatic int get_shared(A&amp; a) &#123; return shared; &#125;\n\t......\n\tint A::get_shared(A&amp; a)&#123;\n\t......a.x......a.y\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n<h4 id=\"3友元friend\"><a class=\"anchor\" href=\"#3友元friend\">#</a> 3. 友元 (friend)</h4>\n<ul>\n<li>指定与一个类密切相关的、又不适合作为该类成员的程序实体（某些全局函数、某些其它类或某些其它类的某些成员函数）<strong>可以直接访问该类的 private 和 protected 成员</strong>。这些程序实体称为该类的友元。</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class A&#123; \n    ......\n\tfriend void func(); &#x2F;&#x2F;友元函数，可访问x\n\tfriend class B; &#x2F;&#x2F;友元类，可访问x 类B中的所有成员函数都可以访问A类中的成员\n\tfriend void C::f(); &#x2F;&#x2F;友元类成员函数，可访问x\n  private:\n\tint x;\n&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>友元关系具有不对称性，不具有传递性，友元关系不能被继承。</li>\n<li>友元是数据保护和数据访问效率之间的一种折中方案。（破坏了类的封装性）</li>\n<li>一个类的友元函数不属于这个类。</li>\n</ul>\n<h4 id=\"4转移构造函数\"><a class=\"anchor\" href=\"#4转移构造函数\">#</a> 4. 转移构造函数</h4>\n<h4 id=\"5操作符重载\"><a class=\"anchor\" href=\"#5操作符重载\">#</a> 5. 操作符重载</h4>\n<h5 id=\"1概述\"><a class=\"anchor\" href=\"#1概述\">#</a> （1）概述</h5>\n<ul>\n<li>\n<p>操作符重载实质上是函数重载</p>\n</li>\n<li>\n<p>可以重载 C++ 中除下列操作符外的所有操作符：<br>\n成员选择符 <code>.</code> ，间接成员选择符 <code>.*</code>   <code>-&gt;*</code>  ，条件操作符 <code>?:</code> ，域解析符 <code>::</code>  ，  <code>sizeof</code></p>\n</li>\n<li>\n<p>重载操作符时，其操作数中至少应该有一个是类、结构、枚举以及它们的引用类型。</p>\n</li>\n<li>\n<p>操作符重载可通过下面两个途径来实现：</p>\n<ul>\n<li>\n<p>作为一个类的非静态的成员函数（ <code>new</code>  和 <code>delete</code>  除外）。</p>\n</li>\n<li>\n<p>作为一个全局（友元）函数。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>一般情况下，操作符既可以作为全局函数，也可以作为成员函数来重载。</p>\n</li>\n<li>\n<p>在有些情况下，操作符只能作为全局函数或只能作为成员函数来重载。</p>\n</li>\n</ul>\n<h5 id=\"2双目操作符重载\"><a class=\"anchor\" href=\"#2双目操作符重载\">#</a> （2）双目操作符重载</h5>\n<p>① 作为成员函数重载</p>\n<ul>\n<li>\n<p>重载函数的声明格式</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class &lt;类名&gt;\n&#123; ......\n&lt;返回值类型&gt; operator # (&lt;类型&gt;); &#x2F;&#x2F;#代表可重载的操作符\n&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>重载函数的定义格式</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&lt;返回值类型&gt; &lt;类名&gt;::operator # (&lt;类型&gt; &lt;参数&gt;) &#123; ...... &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n</li>\n<li>\n<p>使用格式</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&lt;类名&gt; a;\n&lt;类型&gt; b;\na # b\n或\na.operator#(b)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n<p>例：</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class Complex&#123; \n    double real, imag;\npublic:\n......\n\tbool operator &#x3D;&#x3D;(const Complex&amp; x) const&#123; \n    \treturn (real &#x3D;&#x3D; x.real) &amp;&amp; (imag &#x3D;&#x3D; x.imag);\n\t&#125;\n\tbool operator !&#x3D;(const Complex&amp; x) const&#123; \n   \t\treturn (real !&#x3D; x.real) || (imag !&#x3D; x.imag);\n\t&#125;\n&#125;;\n......\nComplex c1,c2;\n......\nif (c1 &#x3D;&#x3D; c2) &#x2F;&#x2F; 或 if (c1 !&#x3D; c2)\n......<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>② 作为全局（友元）函数重载</p>\n<ul>\n<li>\n<p>定义格式</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&lt;返回值类型&gt; operator #(&lt;类型1&gt; &lt;参数1&gt;,&lt;类型2&gt; &lt;参数2&gt;)\n&#123; ...... &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>使用格式：</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&lt;类型1&gt; a;\n&lt;类型2&gt; b;\na # b 或 operator#(a,b)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n<p>例：</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class Complex&#123; \n    double real, imag;\npublic:\n\tComplex() &#123; real &#x3D; 0; imag &#x3D; 0; &#125;\n\tComplex(double r, double i) &#123; real &#x3D; r; imag &#x3D; i; &#125;\n......\n\tfriend Complex operator + (const Complex&amp; c1,const Complex&amp; c2);\n\tfriend Complex operator + (const Complex&amp; c,double d);\n\tfriend Complex operator + (double d,const Complex&amp; c);\n&#125;;\n\nComplex operator + (const Complex&amp; c1,const Complex&amp; c2)&#123; \n    return Complex(c1.real+c2.real,c1.imag+c2.imag);\n&#125;\nComplex operator + (const Complex&amp; c, double d)&#123; \n    return Complex(c.real+d,c.imag);\n&#125;\n&#x2F;&#x2F;只能作为全局函数重载,若使用成员函数不符合显式调用（操作符重载本质）\nComplex operator + (double d, const Complex&amp; c)&#123; \n    return Complex(d+c.real,c.imag);\n&#125;\n......\nComplex a(1,2),b(3,4),c1,c2,c3;\nc1 &#x3D; a + b;\nc2 &#x3D; b + 21.5;\nc3 &#x3D; 10.2 + a;   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<blockquote>\n<p>表达式 x=operator-(y,z) 还可以表示为 x=y-z</p>\n</blockquote>\n<h5 id=\"3单目操作符重载\"><a class=\"anchor\" href=\"#3单目操作符重载\">#</a> （3）单目操作符重载</h5>\n<p>①作为成员函数重载</p>\n<ul>\n<li>\n<p>定义格式</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class &lt;类名&gt;\n&#123; ......\n&lt;返回值类型&gt; operator # ();\n&#125;;\n&lt;返回值类型&gt; &lt;类名&gt;::operator # () &#123; ...... &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>使用格式</p>\n</li>\n</ul>\n<p><code>&lt;类名&gt; a; #a</code>  或 <code>a.operator#()</code></p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class Complex&#123; \n    ......\n  public:\n\t......\n\tComplex operator -() const&#123; \n        Complex temp;\n\t\ttemp .real &#x3D; -real;\n\t\ttemp.imag &#x3D; -imag;\n\t\treturn temp;\n\t&#125;\n&#125;;\n......\nComplex a(1,2),b;\nb &#x3D; -a; &#x2F;&#x2F;把b修改成a的负数。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>②作为全局（友元）函数重载</p>\n<ul>\n<li>\n<p>定义格式</p>\n<p><code>&lt;返回值类型&gt; operator #(&lt;类型&gt; &lt;参数&gt;) &#123; ...... &#125;</code></p>\n</li>\n<li>\n<p>使用格式</p>\n<p><code>&lt;类型&gt; a; #a</code>  或 <code>operator#(a)</code></p>\n</li>\n</ul>\n<h6 id=\"操作符和-的重载\"><a class=\"anchor\" href=\"#操作符和-的重载\">#</a> 操作符 ++ 和 -- 的重载</h6>\n<ul>\n<li>\n<p>操作符 ++（--）有前置和后置两种用法：</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int x&#x3D;0;\n++x; x++; &#x2F;&#x2F;OK\n++(++x); (++x)++; &#x2F;&#x2F;OK，++x为左值表达式\n++(x++); (x++)++; &#x2F;&#x2F;Error，x++为右值表达式<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<pre><code class=\"language-c++\">class Counter&#123; \n    int value;\n  public:\n\tCounter() &#123; value = 0; &#125;\n\tCounter&amp; operator ++()&#123; //前置的++重载函数\n    \tvalue++;\n\t  \treturn *this;\n\t&#125;\n\tconst Counter operator ++(int)&#123; //后置的++重载函数\n \t\tCounter temp=*this; //保存原来的对象\n\t\tvalue++; //写成：++(*this);更好！调用前置的++重载函数\n\t\treturn temp; //返回原来的对象\n\t&#125;\n&#125;;\nCounter a,b,c;\nb = ++a; //使用的是上述类定义中不带参数的操作符++重载函数\nc = a++; //使用的是上述类定义中带int型参数的操作符++重载函数\n++(++a); (++a)++; //OK\n++(a++); (a++)++; //Error\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n##### （4）特殊操作符的重载\n\n###### ①赋值操作符“&#x3D;”的重载\n\n- C++编译程序会为每个类定义一个隐式的赋值操作符重载函数，其行为是：逐个成员进行赋值操作\n\n- 参照浅拷贝，解决上面问题的办法是自己定义赋值操作符重载函数\n\n&#96;&#96;&#96;c++\nclass A&#123; \n    ......\n\tA&amp; operator &#x3D; (const A&amp; a)&#123;&#x2F;&#x2F;返回值应声明为引用\n \t\tif (&amp;a &#x3D;&#x3D; this) return *this; &#x2F;&#x2F;防止自身赋值。\n\t\tdelete []p;&#x2F;&#x2F;如果被赋值对象占用了动态空间，应先释放，后接收\n\t\tp &#x3D; new char[strlen(a.p)+1];\n\t\tstrcpy(p,a.p);\n\t\tx &#x3D; a.x; y &#x3D; a.y;\n\t\treturn *this;\n\t&#125;\n&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n</code></pre>\n</li>\n<li>\n<p>自定义的赋值操作符重载函数不会自动地去进行成员对象的赋值操作，必须要在自定义的赋值操作符重载函数中显式地指出。</p>\n</li>\n<li>\n<p>赋值操作符只能作为非静态的成员函数来重载。</p>\n<blockquote>\n<p>若使用全局函数，则会与隐式赋值操作符重载函数存在歧义</p>\n</blockquote>\n</li>\n<li>\n<p>一般来讲，需要自定义拷贝构造函数的类通常也需要自定义赋值操作符重载函数。</p>\n</li>\n</ul>\n<h6 id=\"2访问数组元素操作符-的重载\"><a class=\"anchor\" href=\"#2访问数组元素操作符-的重载\">#</a> ②访问数组元素操作符 “[]” 的重载</h6>\n<ul>\n<li>对于由具有线性关系的元素所构成的对象，可通过重载 “[]”，实现对其元素的访问。</li>\n</ul>\n<h6 id=\"3重载操作符new\"><a class=\"anchor\" href=\"#3重载操作符new\">#</a> ③重载操作符 new</h6>\n<ul>\n<li>\n<p>操作符 <code>new</code>  必须作为静态的成员函数来重载（ <code>static</code>  说明可以不写）</p>\n<p><code>void *operator new(size_t size);</code></p>\n<ul>\n<li>返回类型必须为 <code>void *</code></li>\n<li>参数表示对象所需空间的大小，其类型为 size_t (unsigned int)</li>\n<li>new 重载函数可以有多个（参数需有所不同）</li>\n</ul>\n</li>\n<li>\n<p>重载 new 时，除了对象空间大小参数以外，也可以带有其它参数</p>\n<p><code>void *operator new(size_t size,XXX);</code></p>\n<p>使用格式： <code>p = new (XXX) A(...);</code></p>\n</li>\n</ul>\n<h6 id=\"4重载操作符delete\"><a class=\"anchor\" href=\"#4重载操作符delete\">#</a> ④重载操作符 delete</h6>\n<ul>\n<li>\n<p>与重载操作符 new 相同</p>\n</li>\n<li>\n<p>操作符 delete 也必须作为静态的成员函数来重载（ <code>static</code>  说明可以不写）</p>\n</li>\n<li>\n<p>delete 重载函数只能有一个</p>\n</li>\n</ul>\n<h6 id=\"5函数调用操作符\"><a class=\"anchor\" href=\"#5函数调用操作符\">#</a> ⑤函数调用操作符 “()”</h6>\n<h6 id=\"6类成员访问操作符-的重载\"><a class=\"anchor\" href=\"#6类成员访问操作符-的重载\">#</a> ⑥类成员访问操作符 “-&gt;” 的重载</h6>\n<ul>\n<li>\n<p>“-&gt;” 为一个双目操作符，其第一个操作数为一个指向类或结构的指针，第二个操作数为第一个操作数所指向的类或结构的成员。</p>\n</li>\n<li>\n<p>通过对 “-&gt;” 进行重载，可以实现一种<strong>智能指针</strong>（smart pointers）：</p>\n<p>一个具有指针功能的对象，通过该对象访问所 “指向” 的另一个对象时，在访问所指向对象的成员前能做一些额外的事情。</p>\n<p>智能指针 (smart pointer) 是存储指向动态分配（堆）对象指针的类，用于生存期控制，能够确保自动正确的销毁动态分配的对象，防止内存泄露（利用自动调用类的析构函数来释放内存）。</p>\n<blockquote>\n<p>必用成员函数重载</p>\n</blockquote>\n</li>\n</ul>\n<h6 id=\"7带一个参数的构造函数\"><a class=\"anchor\" href=\"#7带一个参数的构造函数\">#</a> ⑦带<strong>一个参数</strong>的构造函数</h6>\n<ul>\n<li>带<strong>一个参数</strong>的构造函数可以用作从一个基本数据类型或其它类到某个类的转换。</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class Complex&#123; \n    double real, imag;\n  public:\n\tComplex() &#123; real &#x3D; 0; imag &#x3D; 0; &#125;\n\tComplex(double r) &#123; real &#x3D; r; imag &#x3D; 0; &#125;\n\tComplex(double r, double i) &#123; real &#x3D; r; imag &#x3D; i; &#125;\n\t......\n\tfriend Complex operator + (const Complex&amp; x, const Complex&amp; y);\n&#125;;\n......\nComplex c1(1,2),c2,c3;\nc2 &#x3D; c1 + 1.7; &#x2F;&#x2F;1.7隐式转换成一个复数对象Complex(1.7)\nc3 &#x3D; 2.5 + c2; &#x2F;&#x2F;2.5隐式转换成一个复数对象Complex(2.5)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"8自定义类型转换\"><a class=\"anchor\" href=\"#8自定义类型转换\">#</a> ⑧自定义类型转换</h6>\n<ul>\n<li>\n<p>自定义类型转换，从一个类转换成基本数据类型或其它类（不需要返回值类型的声明）</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class A&#123; \n    int x,y;\n  public:\n\t......\n\toperator int() &#123; return x+y; &#125; &#x2F;&#x2F;类型转换操作符int的重载函数\n&#125;;\n......\nA a;\nint i&#x3D;1;\nint z &#x3D; i + a; &#x2F;&#x2F;将调用类型转换操作符int的重载函数把对象a隐式转换成int型数据。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n<h2 id=\"七-继承类的复用-派生类\"><a class=\"anchor\" href=\"#七-继承类的复用-派生类\">#</a> 七、继承（类的复用）---- 派生类</h2>\n<h3 id=\"一概述\"><a class=\"anchor\" href=\"#一概述\">#</a> （一）概述</h3>\n<h4 id=\"1继承关系\"><a class=\"anchor\" href=\"#1继承关系\">#</a> 1. 继承关系</h4>\n<ul>\n<li>在继承关系中存在两个类：基类（或称父类）和派生类（或称子类）。</li>\n<li>派生类拥有基类的所有特征，并可以\n<ul>\n<li>定义新的特征</li>\n<li>或对基类的一些特征进行重定义。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"二单继承\"><a class=\"anchor\" href=\"#二单继承\">#</a> （二）单继承</h3>\n<blockquote>\n<p>单继承时，派生类只能有一个直接基类</p>\n</blockquote>\n<h4 id=\"1单继承派生类的定义\"><a class=\"anchor\" href=\"#1单继承派生类的定义\">#</a> 1. 单继承派生类的定义：</h4>\n<ul>\n<li>定义：</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class &lt;派生类名&gt;：[&lt;继承方式&gt;] &lt;基类名&gt;\n&#123; &lt;成员说明表&gt;\n&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></p>\n<p>&lt;继承方式&gt; 指出对从基类继承来的成员的访问控制，可以是 <code>public</code>   <code>private</code>   <code>protected</code></p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class A &#123;&#x2F;&#x2F;基类\n \tint x,y;\n  public:\n\tvoid f();\n\tvoid g();\n&#125;;\nclass B: public A &#123;&#x2F;&#x2F;派生类\n \tint z; &#x2F;&#x2F;新成员\n  public:\n\tvoid h(); &#x2F;&#x2F;新成员\n&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>\n<p>派生类除了拥有新定义的成员外，还拥有基类的所有成员（除了基类的构造 / 析构函数和赋值操作符重载函数）</p>\n</li>\n<li>\n<p>定义派生类时一定要见到基类的定义。</p>\n</li>\n<li>\n<p>如果在派生类中没有显式说明，基类的友元不是派生类的友元；如果基类是另一个类的友元，而该类没有显式说明，则派生类也不是该类的友元。</p>\n</li>\n</ul>\n<h4 id=\"2访问基类成员\"><a class=\"anchor\" href=\"#2访问基类成员\">#</a> 2. 访问基类成员</h4>\n<ul>\n<li>派生类不能直接访问基类的私有成员。</li>\n<li><code>protected</code>  用它说明的成员<strong>不能通过对象使用</strong>，但可以在派生类中使用。</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class A &#123; &#x2F;&#x2F;基类\n\tint x,y;\n  public:\n\tvoid f();\n\tvoid g();\n&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>\n<p>派生类对基类成员的访问除了受到基类的访问控制的限制以外，还要受到标识符作用域的限制。</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class B: public A&#123; \n    int z;\n  public:\n\tvoid f();\n\tvoid h()&#123; \n        f(); &#x2F;&#x2F;B类中的f\n\t\tA::f(); &#x2F;&#x2F;A类中的f\n\t&#125;\n&#125;;\nB b;\nb.f(); &#x2F;&#x2F;B类中的f\nb.A::f(); &#x2F;&#x2F;A类中的f<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>即使派生类中定义了与基类同名但参数不同的成员函数，<strong>基类的同名函数在派生类的作用域中也是不直接可见的</strong>，可以用基类名受限方式来使用之</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class B: public A&#123; \n    int z;\n  public:\n\tvoid f(int); &#x2F;&#x2F;不是重载A的f！\n\tvoid h()&#123; \n        f(1); &#x2F;&#x2F;OK\n\t\tf(); &#x2F;&#x2F;Error\n\t\tA::f(); &#x2F;&#x2F;OK\n\t&#125;\n&#125;;\n......\nB b;\nb.f(1); &#x2F;&#x2F;OK\nb.f(); &#x2F;&#x2F;Error\nb.A::f(); &#x2F;&#x2F;OK<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>也可以在派生类中使用 using 声明把基类中某个的函数名对派生类开放</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class B: public A&#123; \n    int z;\n  public:\n\tusing A::f;\n\tvoid f(int); &#x2F;&#x2F;不是重载A的f！\n\tvoid h()&#123; \n        f(1); &#x2F;&#x2F;OK\n\t\tf(); &#x2F;&#x2F;OK，等价于A::f();\n\t&#125;\n&#125;;\n......\nB b;\nb.f(1); &#x2F;&#x2F;OK\nb.f(); &#x2F;&#x2F;OK，等价于b.A::f();<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n<h4 id=\"3继承方式\"><a class=\"anchor\" href=\"#3继承方式\">#</a> 3. 继承方式</h4>\n<ul>\n<li>默认的继承方式为： <code>private</code></li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281110141.png\" alt=\"img\"></p>\n<ul>\n<li>\n<p>可在派生类中分别调整基类各成员的访问控制属性（基类 private 成员除外）</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class A&#123;\n  public:\n\tvoid f1();\n  protected:\n\tvoid g1();\n&#125;;\n\nclass B: private A&#123;\n  public:\n\tA::f1;&#x2F;&#x2F;f1调整为public\n\tA::g1;&#x2F;&#x2F;g1调整为public\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>可以将派生类对象赋值给基类对象</p>\n<p>可以将派生类对象的地址赋值给基类指针</p>\n<p>可以将派生类对象赋值给基类的引用</p>\n</li>\n<li>\n<p>派生类对象不能赋值给派生类对象。</p>\n<p>派生类指针变量不能指向基类对象。</p>\n<p>派生类操作不能用于基类对象。</p>\n</li>\n</ul>\n<h4 id=\"4初始化和赋值操作\"><a class=\"anchor\" href=\"#4初始化和赋值操作\">#</a> 4. 初始化和赋值操作</h4>\n<h5 id=\"1初始化\"><a class=\"anchor\" href=\"#1初始化\">#</a> ①初始化</h5>\n<ul>\n<li>\n<p>派生类构造函数必须负责<strong>调用基类构造函数</strong>，并对其所需要的参数进行设置</p>\n</li>\n<li>\n<p>派生类对象的初始化由基类和派生类共同完成：</p>\n<ul>\n<li>基类的数据成员由基类的构造函数初始化</li>\n<li>派生类的数据成员由派生类的构造函数初始化</li>\n</ul>\n</li>\n<li>\n<p>当创建派生类的对象时：</p>\n<ul>\n<li><strong>先执行基类的构造函数，再执行派生类构造函数</strong>。</li>\n<li>默认情况下，调用基类的默认构造函数，如果要调用基类的<strong>非默认构造函数</strong>，则必须在派生类构造函数的<strong>成员初始化表</strong>中指出。</li>\n</ul>\n</li>\n<li>\n<p>如果一个类 D 既有基类 B、又有成员对象类 M：</p>\n<ul>\n<li>在创建 D 类对象时，构造函数的执行次序为：<br>\nB（调用顺序按照各个基类被继承时声明的顺序）-&gt;M-&gt;D 类构造函数体</li>\n<li>当 D 类的对象消亡时，析构函数的执行次序为：D-&gt;M-&gt;B</li>\n</ul>\n</li>\n<li>\n<p>对于拷贝构造函数：</p>\n<ul>\n<li>派生类的<strong>隐式</strong>拷贝构造函数（由编译程序提供）将会调用<strong>基类的拷贝构造函数</strong>。</li>\n<li>派生类自定义的拷贝构造函数在默认情况下则调用基类的<strong>默认构造函数</strong>。需要时，可在派生类自定义拷贝构造函数的 “基类 / 成员初始化表” 中显式地指出调用<strong>基类的拷贝构造函数</strong>。</li>\n</ul>\n</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class A&#123; \n    int a;\n  public:\n\tA() &#123; a &#x3D; 0; &#125;\n\tA(const A&amp; x) &#123; a &#x3D; x.a; &#125;\n\t......\n&#125;;\nclass B: public A&#123; \n  public:\n\tB() &#123; ...... &#125; \n    ...... &#x2F;&#x2F;没有定义拷贝构造，需要时用隐式拷贝构造\n&#125;;\n\t\nclass C: public A&#123; \n  public:\n\tC() &#123;......&#125;\n\tC(const C&amp; ) &#123; ...... &#125; &#x2F;&#x2F;调用A的默认构造\n\t......\n&#125;;\nclass D: public A&#123; \n  public:\n\tD() &#123;......&#125;\n\tD(const D&amp; d): A(d) &#123; ...... &#125; &#x2F;&#x2F;显式指定调用A的拷贝构造\n\t......\n&#125;;\n\nB b1;&#x2F;&#x2F;调用A()\nB b2(b1); &#x2F;&#x2F;调用A的拷贝构造\nC c1;&#x2F;&#x2F;调用A()\nC c2(c1);&#x2F;&#x2F;调用A的默认构造函数A()\nD d1;&#x2F;&#x2F;调用A()\nD d2(d1);&#x2F;&#x2F;调用A的拷贝构造<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h5 id=\"2赋值\"><a class=\"anchor\" href=\"#2赋值\">#</a> ②赋值</h5>\n<ul>\n<li>\n<p>如果派生类没有提供赋值操作符重载，则系统会为它提供一个<strong>隐式的赋值操作符重载函数</strong>，其行为是：</p>\n<ul>\n<li>对基类成员调用基类的赋值操作进行赋值，</li>\n<li>对派生类的成员按逐个成员赋值。</li>\n</ul>\n</li>\n<li>\n<p>派生类<strong>自定义</strong>的赋值操作符重载函数<strong>不会自动调用基类的赋值操作</strong>，需要<strong>显式地调用基类的赋值操作符</strong>来实现基类成员的赋值。</p>\n</li>\n<li>\n<p>派生类不从基类继承赋值操作</p>\n</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class A&#123; \n    ......\n&#125;;\nclass B: public A&#123; \n    ......\n  public:\n\tB&amp; operator &#x3D;(const B&amp; b)&#123; \n        if (&amp;b &#x3D;&#x3D; this) return *this; &#x2F;&#x2F;防止自身赋值。\n\t\t*(A*)this &#x3D; b; &#x2F;&#x2F;调用基类的赋值操作符对基类成员进行赋值。也可写成：this-&gt;A::operator &#x3D;(b);\n\t\t...... &#x2F;&#x2F;对派生类的成员赋值\n\t\treturn *this;\n\t&#125;\n&#125;;\n......\nB b1,b2;\nb1 &#x3D; b2;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h5 id=\"3聚集\"><a class=\"anchor\" href=\"#3聚集\">#</a> ③聚集</h5>\n<ul>\n<li>继承不是代码复用的唯一方式，有些代码复用不宜用继承来实现。</li>\n<li>类之间还存在一种聚集（aggregation，也称聚合）关系：\n<ul>\n<li>一个类作为另一个类的成员对象类。</li>\n<li>具有聚集关系的两个类之间属于部分与整体的关系（is-a-part-of）</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"4子类型\"><a class=\"anchor\" href=\"#4子类型\">#</a> ④子类型</h5>\n<ul>\n<li>子类型关系可以传递，但是不可逆</li>\n</ul>\n<h3 id=\"三消息成员函数调用的动态绑定\"><a class=\"anchor\" href=\"#三消息成员函数调用的动态绑定\">#</a> （三）消息（成员函数调用）的动态绑定</h3>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class A&#123; \n    int x,y;\n  public:\n\tvoid f();\n&#125;;\nclass B: public A&#123; \n    int z;\n  public:\n\tvoid f(); \n\tvoid g();\n&#125;;\nvoid func1(A&amp; x)&#123; \n    ......\n\tx.f(); &#x2F;&#x2F;调用A::f\n\t......\n&#125;\nvoid func2(A *p)&#123; \n    ......\n\tp-&gt;f(); &#x2F;&#x2F;调用A::f\n\t......\n&#125;\n......\nA a;\nfunc1(a);\nfunc2(&amp;a);\nB b;\nfunc1(b);\nfunc2(&amp;b);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h4 id=\"1静态绑定\"><a class=\"anchor\" href=\"#1静态绑定\">#</a> 1. 静态绑定</h4>\n<ul>\n<li>默认静态绑定</li>\n</ul>\n<h4 id=\"2动态绑定\"><a class=\"anchor\" href=\"#2动态绑定\">#</a> 2. 动态绑定</h4>\n<ul>\n<li>一般情况下，需要在 func1（或 func2）中根据 x（或 p）实际引用（或指向）的对象来决定是调用 <code>A::f</code>  还是 <code>B::f</code> 。即，采用动态绑定。在 C++ 中用虚函数来实现动态绑定。</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class A&#123; \n    int x,y;\n  public:\n\tvirtual void f(); &#x2F;&#x2F;虚函数\n&#125;;\nclass B: public A&#123; \n    int z;\n  public:\n\tvoid f();&#x2F;&#x2F;仍为虚函数，在其派生类中可被再次重写\n\tvoid g();\n&#125;;\nvoid func1(A&amp; x)&#123; \n    ......\n\tx.f(); \n\t......\n&#125;\nvoid func2(A *p)&#123; \n    ......\n\tp-&gt;f(); \n\t......\n&#125;\nA a;\nfunc1(a); &#x2F;&#x2F;在func1中调用A::f\nfunc2(&amp;a); &#x2F;&#x2F;在func2中调用A::f\nB b;\nfunc1(b); &#x2F;&#x2F;在func1中调用B::f\nfunc2(&amp;b); &#x2F;&#x2F;在func2中调用B::f<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>\n<p>基类中的一个成员函数如果被定义成虚函数，则在派生类中定义的、与之具有<strong>相同型构</strong>的成员函数是对基类该成员函数的<strong>重定义</strong>（或称<strong>覆盖</strong>，override）</p>\n<blockquote>\n<p><strong>相同的型构</strong>是指：派生类中定义的成员函数的<strong>名字、参数类型和个数</strong>与基类相应成员函数相同，其<strong>返回值类型</strong>与基类成员函数返回值类型或者<strong>相同</strong>，或者是基类成员函数返回值类型的<strong>派生类</strong>。</p>\n</blockquote>\n</li>\n<li>\n<p>一旦在基类中指定某成员函数为虚函数，那么，不管在派生类中是否给出 <code>virtual</code>  声明，派生类（以及派生类的派生类...）中与其有相同型构的成员函数均为虚函数。</p>\n</li>\n<li>\n<p>只有类的成员函数才可以是虚函数，但<strong>静态成员函数不能是虚函数</strong>。</p>\n</li>\n<li>\n<p><strong>构造函数不能是虚函数</strong>，析构函数可以（往往）是虚函数。</p>\n</li>\n<li>\n<p>只有通过基类的指针或引用访问基类的虚函数时才进行动态绑定。</p>\n</li>\n<li>\n<p>基类的构造函数中对虚函数的调用不进行动态绑定。</p>\n</li>\n</ul>\n<p><pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class A&#123;                                                  \n  public:\n\tA() &#123; f();&#125;\n\t~A();\n\tvirtual void f();\n\tvoid g();\n\tvoid h() &#123; f(); g(); &#125;\n&#125;;\nclass B: public A&#123; \n  public:\n\t~B();\n\tvoid f();\n\tvoid g();\n&#125;;\n......\nA a; &#x2F;&#x2F;调用A::A()和A::f\na.f(); &#x2F;&#x2F;调用A::f\na.g(); &#x2F;&#x2F;调用A::g\na.h(); &#x2F;&#x2F;调用A::h、A::f和A::g\nB b; &#x2F;&#x2F;调用B::B(), A::A() 和 A::f !!!\nb.f(); &#x2F;&#x2F;调用B::f\nb.g(); &#x2F;&#x2F;调用B::g !!!!\nb.h(); &#x2F;&#x2F;调用A::h、B::f 和 A::g !!!\n\nA *p;\np &#x3D; &amp;a;\np-&gt;f(); &#x2F;&#x2F;调用A::f\np-&gt;g(); &#x2F;&#x2F;调用A::g\np-&gt;h(); &#x2F;&#x2F;调用A::h, A::f和A::g\np &#x3D; &amp;b;\np-&gt;f(); &#x2F;&#x2F;调用B::f\np-&gt;A::f(); &#x2F;&#x2F;调用A::f\np-&gt;g(); &#x2F;&#x2F;调用A::g，对非虚函数的调用采用静态绑定。 !!!\np-&gt;h(); &#x2F;&#x2F;调用A::h, B::f和A::g\np &#x3D; new B; &#x2F;&#x2F;调用B::B(), A::A()和A::f !!!\n.......\ndelete p; &#x2F;&#x2F;调用A::~A()，因为没有把A的析构函数定义为虚函数。 !!!<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h4 id=\"3纯虚函数和抽象类\"><a class=\"anchor\" href=\"#3纯虚函数和抽象类\">#</a> 3. 纯虚函数和抽象类</h4>\n<ul>\n<li>\n<p><strong>纯虚函数</strong>是指函数体为空（=0）的虚函数</p>\n<p><pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class A&#123; \n    ......\n  public:\n\tvirtual int f()&#x3D;0; &#x2F;&#x2F;纯虚函数\n\t......\n&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>包含纯虚函数的类称为<strong>抽象类</strong></p>\n</li>\n<li>\n<p>抽象类不能用于创建对象。</p>\n</li>\n<li>\n<p>抽象类的作用是为派生类提供一个基本框架和一个公共的对外接口</p>\n</li>\n</ul>\n<h3 id=\"四-多继承\"><a class=\"anchor\" href=\"#四-多继承\">#</a> （四） 多继承</h3>\n<ul>\n<li>多继承是指派生类可以有一个以上的直接基类。</li>\n</ul>\n<h4 id=\"1定义-7\"><a class=\"anchor\" href=\"#1定义-7\">#</a> 1. 定义</h4>\n<ul>\n<li>定义格式：</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class &lt;派生类名&gt;： [&lt;继承方式&gt;] &lt;基类名1&gt;，[&lt;继承方式&gt;] &lt;基类名2&gt;，...\n&#123; \n    &lt;成员说明表&gt;\n&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>继承方式及访问控制的规定同单继承。\n<ul>\n<li>派生类拥有所有基类的所有成员。</li>\n<li>基类的声明次序决定：\n<ul>\n<li>对基类构造函数 / 析构函数的调用次序</li>\n<li>对基类数据成员的存储安排。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class C: public A, public B\n&#123; \n    ......\n&#125;;\n&#x2F;&#x2F;构造函数的执行次序是：A()、B()、C()\n&#x2F;&#x2F;（A()和B()实际是在C()的成员初始化表中调用。）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h4 id=\"2命名冲突\"><a class=\"anchor\" href=\"#2命名冲突\">#</a> 2. 命名冲突</h4>\n<ul>\n<li>解决方法：基类名受限</li>\n</ul>\n<h4 id=\"3重复继承-虚基类\"><a class=\"anchor\" href=\"#3重复继承-虚基类\">#</a> 3. 重复继承 ---- 虚基类</h4>\n<ul>\n<li>\n<p>若直接基类有公共的基类，则会出现重复继承</p>\n<p>例：</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class A\n&#123; int x;\n......\n&#125;;\nclass B: public A &#123; ... &#125;;\nclass C: public A &#123; ... &#125;;\nclass D: public B, public C &#123; ... &#125;;\n&#x2F;&#x2F;上面的类D将包含两个x成员：B::x和C::x<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>虚基类</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class B: virtual public A &#123;...&#125;;\nclass C: virtual public A &#123;...&#125;;\nclass D: public B, public C &#123;...&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></p>\n<p>对于包含虚基类的类：</p>\n<ul>\n<li>虚基类的构造函数由最新派生出的类的构造函数调用。</li>\n<li>虚基类的构造函数优先非虚基类的构造函数执行。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"八-类属类型泛型-模板\"><a class=\"anchor\" href=\"#八-类属类型泛型-模板\">#</a> 八、类属类型（泛型）---- 模板</h2>\n<h3 id=\"一模板\"><a class=\"anchor\" href=\"#一模板\">#</a> （一）模板</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281110912.png\" alt=\"image-20230609202134205\"></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281110326.png\" alt=\"image-20230609202353873\"></p>\n<h3 id=\"二c标准模板库stl\"><a class=\"anchor\" href=\"#二c标准模板库stl\">#</a> （二）C++ 标准模板库（STL）</h3>\n<hr>\n<p>以下可忽略（）</p>\n<h2 id=\"n-库函数\"><a class=\"anchor\" href=\"#n-库函数\">#</a> N、库函数</h2>\n<h3 id=\"1输入输出\"><a class=\"anchor\" href=\"#1输入输出\">#</a> 1. 输入输出</h3>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iomanip&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()&#123;\n    cout &lt;&lt; &quot;Hello, world!&quot;;  &#x2F;&#x2F;输出\n\tcout &lt;&lt; endl; &#x2F;&#x2F;换行\n\tcout &lt;&lt; &quot;Rainnn!&quot; &lt;&lt; endl;\n    double root&#x3D;5.33333;\n    cout &lt;&lt; fixed &lt;&lt; setprecision(2) &lt;&lt; root;&#x2F;&#x2F;保留两位小数\n    int i;\n    double d;\n    &#x2F;&#x2F;输入\n    cin &gt;&gt; i;\n    cin &gt;&gt; d;\n    return 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">ios::sync_with_stdio(false); &#x2F;&#x2F; 这两行能极大加速C++的输入性能。\ncin.tie(nullptr);            &#x2F;&#x2F; 代价是不能混用scanf&#x2F;printf。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n<h3 id=\"2cmath\"><a class=\"anchor\" href=\"#2cmath\">#</a> 2. <code>&lt;cmath&gt;</code></h3>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;cmath&gt;\n#include &lt;iostream&gt;\nusing namespace std;\nint main()&#123;\n    double count;\n    count &#x3D; sqrt(double x); &#x2F;&#x2F;求平方根\n    count &#x3D; pow(double x,double y); &#x2F;&#x2F;pow(底,指数的幂);\n    \n    &#x2F;&#x2F;三角函数\n    count &#x3D; cos(double x); \n    count &#x3D; sin(double x);\n    count &#x3D; tan(double x);\n    count &#x3D; acos(double x);\n    count &#x3D; asin(double x);\n    count &#x3D; atan(double x);\n    \n    count &#x3D; log(double x); &#x2F;&#x2F;返回logex的值\n    count &#x3D; log10(double x); &#x2F;&#x2F;返回log10x的值\n    count &#x3D; exp(double x); &#x2F;&#x2F;返回指数函数e^x的值\n    count &#x3D; exp2(double x); &#x2F;&#x2F;指数函数e^x的值\n    \n    count &#x3D; hypot(3.0,4.0); &#x2F;&#x2F;5.0 返回两个参数的平方总和的平方根,如果参数为一个直角三角形的两个直角边,函数会返回斜边的长度) \n    \n    int c &#x3D; abs(int x); &#x2F;&#x2F;绝对值(只能填整数)\n    count &#x3D; fabs(double x); &#x2F;&#x2F;绝对值（可以填小数）\n    \n    count &#x3D; floor(5.89); &#x2F;&#x2F;5 向下取整\n    count &#x3D; ceil(5.89); &#x2F;&#x2F;6 向上取整\n    \n    count &#x3D; max(5.0,4.0); &#x2F;&#x2F;5.0 两者最大值\n    count &#x3D; min(5.0,4.0); &#x2F;&#x2F;4.0 两者最小值\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h3 id=\"3bitset\"><a class=\"anchor\" href=\"#3bitset\">#</a> 3. <code>&lt;bitset&gt;</code></h3>\n<h4 id=\"1进制-oct-dec-hex\"><a class=\"anchor\" href=\"#1进制-oct-dec-hex\">#</a> (1) 进制 oct dec hex</h4>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;bitset&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nint main()&#123;\n    int a;\n    cin &gt;&gt; hex &gt;&gt; a；&#x2F;&#x2F;输入16进制数\n    cout &lt;&lt; dec &lt;&lt; a &lt;&lt; endl;&#x2F;&#x2F;转成10进制  \n    cout &lt;&lt; oct &lt;&lt; 35&lt;&lt; endl; &#x2F;&#x2F;转成8进制\n    cout &lt;&lt; dec &lt;&lt; 35 &lt;&lt; endl; &#x2F;&#x2F;转成10进制\n    cout &lt;&lt; hex &lt;&lt; 35 &lt;&lt; endl; &#x2F;&#x2F;转成16进制\n    cout &lt;&lt; bitset&lt;8&gt;(35) &lt;&lt; endl; &#x2F;&#x2F;2进制 &lt;8&gt;：表示保留8位输出\n    return 0;  \n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h3 id=\"4字符串\"><a class=\"anchor\" href=\"#4字符串\">#</a> 4. 字符串</h3>\n<h4 id=\"1基础-2\"><a class=\"anchor\" href=\"#1基础-2\">#</a> (1) 基础</h4>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">1.类似于使用数组\nstring a &#x3D; “abcdef”;\nint num &#x3D; a.length();\nfor (int i &#x3D; 0; i &lt; num; ++i)\n&#123;\n\tcout &lt;&lt; a[i];\n&#125;\n\n2.使用for循环\nstring a &#x3D; “asdfa”;\nfor (char ch : a)&#123;\n    cout &lt;&lt; ch;\n&#125;\ncout &lt;&lt; a.length();<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h4 id=\"2-string\"><a class=\"anchor\" href=\"#2-string\">#</a> (2)  <code>&lt;string&gt;</code></h4>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;string&gt;\nusing namespace std;\n\nint main()&#123;\n    string s1, s2;\n    getline(cin, s1);&#x2F;&#x2F;输入字符串\n    getline(cin, s2);\n    s1 +&#x3D; s2;&#x2F;&#x2F;字符串拼接\n    s1.append(s2); &#x2F;&#x2F;把字符串s连接到当前字符串的结尾\n    int num&#x3D;10;\n    string to_string(num);&#x2F;&#x2F;将数字转换为字符串，这里注意如果是浮点型数转字符，会将精度范围内小数点后的数全部显示出来\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">1.int a &#x3D; str.find_first_of(&#39;abc&#39;); &#x2F;&#x2F; 获取字符串中第一个指定字符(串)的位置\n\n2.int a &#x3D; str.find_last_of(&#39;.&#39;);&#x2F;&#x2F; 获取字符串中最后一个指定字符(串)的位置\n\n3.string str1 &#x3D; str.substr(a,b);&#x2F;&#x2F; 根据以上两个端位置，保留第a位及之后共b个字符，（若b超出size则到最后）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">stoi函数: 将string类型转换成int类型的函数\n\nstod函数: 将string类型转换成double类型的函数\n\natof函数: 将string类型转换成double类型的函数<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h3 id=\"5cctype\"><a class=\"anchor\" href=\"#5cctype\">#</a> 5. <code>&lt;cctype&gt;</code></h3>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">1.isalpha()，用来判断一个字符是否为字母，如果是字符则返回非零，否则返回零。\n\n2.isalnum()，用来判断一个字符是否为数字或者字母，也就是说判断一个字符是否属于a~z||A~Z||0~9。是返回非零，不是返回0。\n\n3.islower()，用来判断一个字符是否为小写字母，也就是是否属于a~z。是返回非零，不是返回0。\n\n4.isupper()，用来判断一个字符是否为大写字母。是返回非零，不是返回0。\n\nif(isupper(str[i]))&#123;\n   ...\n&#125;\n\n5.char c &#x3D; toupper(a)，a为字符时，如果a是小写字母则将其转换为大写字母，否则不变。a为数字则将其按ASCLL码转换为对应字符。（其实即使a是字符，输入之后还是会将其转换为int类型）\n\n6.char c &#x3D; tolower(a)，a为字符时，如果a是大写字母则将其转换为小写字母，否则不变。a为数字则将其按ASCLL码转换为对应字符。\n\n7.isdigit()，用来判断一个字符是否为数字，如果是数字则返回非零，否则返回零。\n    \n8.int isxdigit( int c )（判断字符c是否：16进制数字）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h3 id=\"6sstream\"><a class=\"anchor\" href=\"#6sstream\">#</a> 6. <code>&lt;sstream&gt;</code></h3>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;sstream&gt;\n#include &lt;iostream&gt;\n#include &lt;sstream&gt;\nusing namespace std;\n\nint main()&#123;\n    istringstream iss;\n    string s &#x3D; &quot;32 240 2 1450&quot;;\n    iss.str(s);\n    for (int n&#x3D;0; n&lt;4; n++)&#123;\n    \tint v;\n    \tiss &gt;&gt; v;\n    \tcout &lt;&lt; v &lt;&lt; endl;\n  \t&#125;\n    cout &lt;&lt; &quot;Finished writing the numbers in: &quot;;\n  \tcout &lt;&lt; iss.str() &lt;&lt; endl;\n&#125;\n&#x2F;*\n32\n240\n2\n1450\nFinished writing the numbers in: 32 240 2 1450\n*&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;sstream&gt;\nusing namespace std;\n\nint main()\n&#123;\n    int i &#x3D; 1000;\n \n    ostringstream ss;\n    ss &lt;&lt; hex &lt;&lt; i;\n    string result &#x3D; ss.str();\n \n    cout &lt;&lt; result &lt;&lt; endl;        &#x2F;&#x2F; 3e8\n \n    return 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h3 id=\"7iomanip\"><a class=\"anchor\" href=\"#7iomanip\">#</a> 7. <code>&lt;iomanip&gt;</code></h3>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iomanip&gt;\n\ncout &lt;&lt; setw(3) &lt;&lt; 1; &#x2F;&#x2F;按3列宽度输出(默认右对齐)\ncout &lt;&lt; setw(3) &lt;&lt; left &lt;&lt; 1;&#x2F;&#x2F;左对齐\ncout &lt;&lt; fixed &lt;&lt; setprecision(2) &lt;&lt; root;&#x2F;&#x2F;保留两位小数<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h3 id=\"8algorithm\"><a class=\"anchor\" href=\"#8algorithm\">#</a> 8. <code>&lt;algorithm&gt;</code></h3>\n<h4 id=\"1sort\"><a class=\"anchor\" href=\"#1sort\">#</a> (1) <code>sort()</code></h4>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\nint main()&#123;\n\tint num[10] &#x3D; &#123;6,5,9,1,2,8,7,3,4,0&#125;;\n\tsort(num,num+10,greater&lt;int&gt;());\n\tfor(int i&#x3D;0;i&lt;10;i++)&#123;\n\t\tcout&lt;&lt;num[i]&lt;&lt;&quot; &quot;;\n\t&#125;&#x2F;&#x2F;输出结果:9 8 7 6 5 4 3 2 1 0\n\treturn 0;\n&#125; <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>它有三个参数 <code>sort(begin, end, cmp)</code> ，其中 begin 为指向待 sort () 的数组的 <code>第一个元素的指针</code> ，end 为指向待 sort () 的数组的 <code>最后一个元素的下一个位置的指针</code> ，cmp 参数为排序准则，cmp 参数可以不写，如果不写的话，默认从小到大进行排序。如果我们想从大到小排序可以将 cmp 参数写为 <code>greater&lt;int&gt;()</code>  就是对 int 数组进行排序，当然 <code>&lt;&gt;</code>  中我们也可以写 double、long、float 等等。</p>\n<ul>\n<li>\n<p>自定义排序准则</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\nbool cmp(int x,int y)&#123;\n\treturn x % 10 &gt; y % 10;\n&#125;\n\nint main()&#123;\n\tint num[10] &#x3D; &#123;65,59,96,13,21,80,72,33,44,99&#125;;\n\tsort(num,num+10,cmp);\n\tfor(int i&#x3D;0;i&lt;10;i++)&#123;\n\t\tcout&lt;&lt;num[i]&lt;&lt;&quot; &quot;;\n\t&#125;&#x2F;&#x2F;输出结果：59 99 96 65 44 13 33 72 21 80\n\treturn 0;\n&#125; <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>（也可以对结构体进行排序）</p>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\nstruct Student&#123;\n\tstring name;\n\tint score;\n\tStudent() &#123;&#125;\n\tStudent(string n,int s):name(n),score(s) &#123;&#125;\n&#125;;\n\nbool cmp_score(Student x,Student y)&#123;\n\treturn x.score &gt; y.score;\n&#125;\n\nint main()&#123;\n\tStudent stu[3];\n\tstring n;\n\tint s;\n\tfor(int i&#x3D;0;i&lt;3;i++)&#123;\n\t\tcin&gt;&gt;n&gt;&gt;s;\n\t\tstu[i] &#x3D; Student(n,s);\n\t&#125;\n\tsort(stu,stu+3,cmp_score);\n\tfor(int i&#x3D;0;i&lt;3;i++)&#123;\n\t\tcout&lt;&lt;stu[i].name&lt;&lt;&quot; &quot;&lt;&lt;stu[i].score&lt;&lt;endl;\n\t&#125;\n\treturn 0;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n<h3 id=\"9regex\"><a class=\"anchor\" href=\"#9regex\">#</a> 9. <code>&lt;regex&gt;</code></h3>\n<h4 id=\"1regex_match\"><a class=\"anchor\" href=\"#1regex_match\">#</a> (1) <code>regex_match</code></h4>\n<p>此函数模板用于匹配给定的模式。如果给定的表达式与字符串匹配，则此函数返回  <code>true</code> 。否则，该函数返回  <code>false</code> 。</p>\n<h2 id=\"n1-算法\"><a class=\"anchor\" href=\"#n1-算法\">#</a> N+1、算法</h2>\n<h3 id=\"1排序\"><a class=\"anchor\" href=\"#1排序\">#</a> 1. 排序</h3>\n<h4 id=\"1冒泡排序\"><a class=\"anchor\" href=\"#1冒泡排序\">#</a> （1）冒泡排序</h4>\n<h4 id=\"2选择排序\"><a class=\"anchor\" href=\"#2选择排序\">#</a> （2）选择排序</h4>\n<p><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\nusing namespace std;\n&#x2F;&#x2F;从大到小\nint main()&#123;\n    int max,temp;\n    int n;\n    cin &gt;&gt; n;\n    int num[n];\n    for(int i&#x3D;0;i&lt;n;i++)&#123;\n        cin &gt;&gt; num[i];\n    &#125;\n    for(int index&#x3D;0;index&lt;n-1;index++)&#123;\n        max&#x3D;index;\n        for(int scan&#x3D;index+1;scan&lt;n;scan++)&#123;\n            if(num[scan]&gt;num[max])&#123;\n                max&#x3D;scan;\n            &#125;\n        &#125;\n        temp&#x3D;num[index];\n        num[index]&#x3D;num[max];\n        num[max]&#x3D;temp;\n    &#125;\n&#125;\n&#x2F;&#x2F;从小到大\nvoid sort(string str[],int n)&#123;\n    int min;\n    string temp;\n    for(int index&#x3D;0;index&lt;n-1;index++)&#123;\n        min&#x3D;index;\n        for(int scan&#x3D;index+1;scan&lt;n;scan++)&#123;\n            if(str[scan].length()&lt;str[min].length())&#123;\n                min&#x3D;scan;\n            &#125;\n        &#125;\n        temp&#x3D;str[index];\n        str[index]&#x3D;str[min];\n        str[min]&#x3D;temp;\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n",
            "tags": [
                "c++"
            ]
        },
        {
            "id": "https://rainnn-w.github.io/posts/14743.html",
            "url": "https://rainnn-w.github.io/posts/14743.html",
            "title": "computing essentials",
            "date_published": "2023-02-27T06:08:28.000Z",
            "content_html": "<p>\n\n\t<div class=\"row\">\n    <embed src=\"/pdf/computing-essentials.pdf\" width=\"100%\" height=\"550\" type=\"application/pdf\">\n\t</div>\n\n\n</p>\n",
            "tags": []
        },
        {
            "id": "https://rainnn-w.github.io/posts/31528.html",
            "url": "https://rainnn-w.github.io/posts/31528.html",
            "title": "Java Notes",
            "date_published": "2023-02-27T05:38:51.000Z",
            "content_html": "<h1 id=\"i选择\"><a class=\"anchor\" href=\"#i选择\">#</a> Ⅰ 选择</h1>\n<h3 id=\"一-知识点\"><a class=\"anchor\" href=\"#一-知识点\">#</a> 一、知识点</h3>\n<p>1. 对同一个 package 中的各个类，类的名称不能重复。定义在同一个包（package）内的类可以不经过 import 而直接相互使用。</p>\n<p>2.Java 中保留但不允许使用的标识符： <code>goto</code>   <code>const</code></p>\n<p>3. 逻辑 / 位运算结合性的优先级：非、与、或</p>\n<p>4. 用关键字 static final 修饰属性变量，必须同时定义变量的初始值。</p>\n<p>​\t&lt;!-- 用关键字 final 修饰属性变量，不必同时定义变量初始值。--&gt;(待确认)</p>\n<p>5. <code>byte</code>  8  [-128,127]     <code>short</code>  16     <code>int</code>  32    <code>long</code>  64    <code>float</code>  32    <code>double</code>  64 位</p>\n<p>6. 计算机是由硬件系统和软件系统两部分组成的。</p>\n<p>7. 在程序中书写注释不会影响程序的执行，可以多写一些详细的注释。（√）</p>\n<p>8. 基本数据类型是没有静态方法的，但是基本数据类型的包装类却有静态方法</p>\n<p>9. 默认的浮点数类型是 double</p>\n<p>10.Java 中的接口 (interface) 没有继承 Object 类</p>\n<p>11.java 中的包和操作系统没有任何关系，java 的包是用来组织文件的一种虚拟文件系统。</p>\n<p>12.main 方法的返回值类型只可以是 void</p>\n<p>13. 方法 main 与方法 Main 在 Java 中被认为是不同的方法，可以同时在一个类中定义。</p>\n<p>14. 父类的引用指向子类对象，该引用只能调用父类中定义的方法和变量，如果子类中重写了父类中的一个方法，那么在调用这个方法的时候，将会调用子类中的这个方法。</p>\n<p>15. 关键字 static 修饰的方法（静态方法），不能直接调用实例方法（不用 static 修饰的方法）。</p>\n<p>16. 对于二进制文件的读取，读到文件末尾会抛出 EOFException 异常。</p>\n<p>17. 各种数据类型混合运算结果</p>\n<ul>\n<li>\n<p>相同数据类型正常计算</p>\n</li>\n<li>\n<p><strong>short</strong>、byte、<strong>char</strong> 等类型的变量在参与运算时会先被隐含地转换为 int 类型，再参与运算。</p>\n</li>\n<li>\n<p>int 和 long 做运算，则 int 转成 long，最后结果是 long 类型。</p>\n</li>\n<li>\n<p>int 和 float 运算，先有 float 到 double，再由 int 到 double。最后结果是 double。</p>\n</li>\n</ul>\n<p>18. 将 java 文件编译成字节码文件（.class)，使用 java 虚拟机（JVM）（在不同操作系统上虚拟机不同）运行字节码文件（将字节码翻译为机器码），计算机硬件直接执行机器码。</p>\n<p>19.String 实例一旦创建完毕，就不能再修改其内容。（String 不等同于 char []）</p>\n<p>20.this 是对象内部指代自身的引用，同时也是解决成员变量和局部变量同名问题</p>\n<p>21. <code>main</code>  函数遵循静态函数的规则，所以每个类都可以写一个 <code>main</code> ，但运行时要选定一个作为程序入口。（一个 Java 文件中可以有多个类，但只能有一个用 <code>public</code>  修饰的类，每个类里都可以有一个 <code>main</code>  方法。因此一个 java 文件可以有多个 <code>main</code>  方法。 ）</p>\n<p>22. 在一个类的 main 方法中，不能够使用 <code>super</code>  关键字调用父类的方法。</p>\n<p>23. <code>static</code>  变量可以不用初始化，默认为 0</p>\n<p>24.Java 运行环境（JRE）能够自动完成常规的内存管理，不用显式的释放内存</p>\n<p>25.Java 程序的 jar 文件不可以双击执行</p>\n<h3 id=\"二-方法\"><a class=\"anchor\" href=\"#二-方法\">#</a> 二、方法</h3>\n<p>1. 字符串转换为数字</p>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> l<span class=\"token operator\">=</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> d<span class=\"token operator\">=</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseDouble</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5.5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> f<span class=\"token operator\">=</span><span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5.5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>2. 最大公约数 最小公倍数</p>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 最大公约数 （辗转相减法）</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">!=</span> num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">></span> num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tnum1 <span class=\"token operator\">=</span> num1 <span class=\"token operator\">-</span> num2<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tnum2 <span class=\"token operator\">=</span> num2 <span class=\"token operator\">-</span> num1<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> num1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 最大公约数（辗转相除法）</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 最小公倍数</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lcm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> num1 <span class=\"token operator\">*</span> num2 <span class=\"token operator\">/</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>3.break 只能用于 switch 语句和循环语句中</p>\n<p>​\tcontinue 只能用于循环语句中</p>\n<p>4.return 语句的返回值形式，和方法定义的返回值形式，可以存在默认类型转化关系</p>\n<ol start=\"5\">\n<li>赋值语句</li>\n</ol>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span><span class=\"token number\">97</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">byte</span> a<span class=\"token operator\">=</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n<p>6. 字符串获取长度的方法： <code>.length()</code>  注意是方法而非属性。</p>\n<blockquote>\n<p>数组 有属性    <code>.length</code>    长度是属性而不是方法，不能写成 <code>.length()</code></p>\n</blockquote>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span>num<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str<span class=\"token operator\">=</span><span class=\"token string\">\"abcdefg\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>7.main 方法参数必须为<strong>字符串数组 (String [])，变量名可以随意，通常使用 args</strong></p>\n<p>8. 负数对正数取余结果为负数，正数对负数取余结果为正数</p>\n<p><pre class=\"line-numbers language-none\"><code class=\"language-none\">-5 % 4 &#x3D; -1\n-5 % -4 &#x3D; -1\n5 % -4 &#x3D; 1\n5 % 4 &#x3D; 1 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>9.switch   break   default</p>\n<h3 id=\"三-类和对象\"><a class=\"anchor\" href=\"#三-类和对象\">#</a> 三、类和对象</h3>\n<h5 id=\"一变量\"><a class=\"anchor\" href=\"#一变量\">#</a> （一）变量</h5>\n<p>1. 局部变量：在方法体中声明的变量</p>\n<ul>\n<li>\n<p>没有默认值，必须初始化</p>\n</li>\n<li>\n<p>方法结束后，局部变量就会自动销毁</p>\n</li>\n<li>\n<p>不可以是静态的</p>\n</li>\n<li>\n<p>访问权限修饰符不能用于局部变量</p>\n</li>\n</ul>\n<p>2. 实例（成员）变量：在类中但在方法体外声明的变量，成员变量定义了类的属性</p>\n<ul>\n<li>在对象创建时创建，在对象销毁时销毁</li>\n<li><code>byte short int long</code>  默认值为 0， <code>float double</code>  为 0.0， <code>String</code>  为 null</li>\n<li>可以被访问权限修饰符修饰</li>\n<li>可以被类中方法、构造方法和特定类的语句块访问</li>\n</ul>\n<p>3. 静态变量：** 由所有的类实例共享。** 对于类的所有对象，只存在一个静态变量实体。随着类的加载而加载，随着类的销毁而销毁。有默认值，不必初始化。</p>\n<h5 id=\"二静态方法\"><a class=\"anchor\" href=\"#二静态方法\">#</a> （二）静态方法</h5>\n<p>1. 静态方法：可以通过类名称来调用</p>\n<p>2. 非静态方法的调用必须先有一个实例，通过实例来调用</p>\n<p>3. 静态方法只能引用静态变量或局部变量</p>\n<p>4. 静态方法中不能有 <code>this</code>  和 <code>super</code>  ，因为 <code>static</code>  属于类的范畴， <code>this</code>  和  <code>super</code>  属于对象的范畴。同样静态方法中也不允许出现将成员变量赋值给局部变量的操作</p>\n<p>5. 方法的局部变量不允许被 static 修饰</p>\n<p>6. 静态方法可以被子类重写，但两个静态方法各自属于各自的类，即当使用多态创建子类对象调用该静态方法时，由于是父类引用，所以会调用父类中的静态方法。若是子类引用指向子类对象调用该静态方法，则调用子类中的静态方法。</p>\n<p>7. 被 <code>static</code>  修饰的方法必然也可以重载</p>\n<h3 id=\"四-数组\"><a class=\"anchor\" href=\"#四-数组\">#</a> 四、数组</h3>\n<blockquote>\n<p>数组是一种对象</p>\n</blockquote>\n<h6 id=\"1定义数组\"><a class=\"anchor\" href=\"#1定义数组\">#</a> 1. 定义数组：</h6>\n<ul>\n<li>\n<p>数组有属性 例： <code>.length</code></p>\n</li>\n<li>\n<p>数组创建后长度不可变</p>\n</li>\n<li>\n<p>定义多维数组，第一维数组的大小必须初始化，其他的不必初始化</p>\n<p>但是使用时必须先对要使用的其他维度的数组进行大小初始化才可以赋值</p>\n<p><code>int[][][] arr = new int[3][][]; </code></p>\n</li>\n</ul>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 定义可以容纳 10 个整数的数组</span>\n<span class=\"token comment\">// 方法一：</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> scores<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> scores<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 可读性差</span>\n<span class=\"token comment\">// 方法二：</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> scores<span class=\"token punctuation\">;</span>\nscores<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 方法三：</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> scores<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">99</span><span class=\"token punctuation\">,</span><span class=\"token number\">98</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">,</span><span class=\"token number\">97</span><span class=\"token punctuation\">,</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span><span class=\"token number\">92</span><span class=\"token punctuation\">,</span><span class=\"token number\">93</span><span class=\"token punctuation\">,</span><span class=\"token number\">94</span><span class=\"token punctuation\">,</span><span class=\"token number\">98</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 多维数组</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 低维可以不等长</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 可以逐级创建：</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> v <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \nv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"2for-each\"><a class=\"anchor\" href=\"#2for-each\">#</a> 2.for-each</h6>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> score<span class=\"token operator\">:</span>scores<span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 此 for-each 循环只适用处理从索引 0 开始的所有数组元素</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> scores<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>For-each 版本的循环，每次把数组中的下一个元素拷贝到循环变量中，对于数组类型是基本数据类型的情况，不会改变原来数组内容</li>\n</ul>\n<blockquote>\n<p>例：</p>\n</blockquote>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> values<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value <span class=\"token operator\">:</span> values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tvalue<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>value <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 2 3 4</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value <span class=\"token operator\">:</span> values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>value <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 1 2 3 </span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"3可变长度参数表\"><a class=\"anchor\" href=\"#3可变长度参数表\">#</a> 3. 可变长度参数表</h6>\n<ul>\n<li>使用某种特殊语法的形参表，使所定义的方法能接收任意个数的参数，并将参数自动存入数组以便在方法中进行处理。</li>\n<li>参数可以是任何类型</li>\n</ul>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">distance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">double</span> sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token operator\">:</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        sum<span class=\"token operator\">=</span>sum<span class=\"token operator\">+</span>num<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>可变参数必须写在形参表的最后，且一个方法不能接受两组可变参数</li>\n</ul>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> count<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> nums<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// whatever\t\t&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n<ul>\n<li>可以在构造方法中使用可变参数列表</li>\n</ul>\n<h6 id=\"4二维数组\"><a class=\"anchor\" href=\"#4二维数组\">#</a> 4. 二维数组</h6>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> table <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 行：5 列：10</span>\n\n      <span class=\"token comment\">// Load the table with values</span>\n      <span class=\"token comment\">//row 行  col 列  </span>\n      <span class=\"token comment\">//table.length:5   table [row].length:row 行的列数</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> row <span class=\"token operator\">&lt;</span> table<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> row<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n         <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> col<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> col <span class=\"token operator\">&lt;</span> table<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> col<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            table<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> row <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> col<span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Print the table</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> row <span class=\"token operator\">&lt;</span> table<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> row<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> col<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> col <span class=\"token operator\">&lt;</span> table<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> col<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>数组的每一维可以有不同的长度，所以高维数组有时也被称为不规则数组</li>\n</ul>\n<h3 id=\"五-异常\"><a class=\"anchor\" href=\"#五-异常\">#</a> 五、异常</h3>\n<p>1. 分类</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281108191.png\" alt=\"image-20230123132104985\"></p>\n<ul>\n<li>错误 catch 无意义，无法修复</li>\n<li>exception\n<ul>\n<li>checked exception 强制处理异常 （非运行时异常）\n<ul>\n<li>ClassNotFoundException</li>\n<li>NoSuchMethodException</li>\n<li>IllegalAccessException</li>\n</ul>\n</li>\n<li>unchecked exception  非强制处理异常  （运行时异常）\n<ul>\n<li>NullPointerException</li>\n<li>IndexOutOfBoundsException</li>\n<li>ArithmeticException</li>\n<li>StringIndexOutofBoundsException</li>\n<li>NumberFormatException</li>\n<li>ClassCastException 强制类型转换</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>2. 处理程序中的异常，可以使用  <code>try-catch</code>  语句</p>\n<ul>\n<li>\n<p>一个 try 块后跟一个或多个 catch 子句</p>\n</li>\n<li>\n<p>当 try 块中发生异常时，处理会立即跳转到与异常类型匹配的第一个 catch 子句</p>\n</li>\n<li>\n<p>try 语句可以有一个可选的 finally 子句，该子句始终执行</p>\n<ul>\n<li>\n<p>如果未生成异常，则在 try 块中的语句完成后执行 finally 子句中的语句</p>\n</li>\n<li>\n<p>如果生成异常，则 finally 子句中的语句将在相应 catch 子句中的语句完成后执行</p>\n<p><strong>结论：finally 中的语句无论如何都会被执行，即使之前有 return 语句，也要先 finally，再 return。 例外是 System.exit ();</strong></p>\n</li>\n</ul>\n</li>\n</ul>\n<p>3. 可以在方法定义中抛出异常而不是用 catch 语句块进行异常捕获</p>\n<p>4.finally 段中的语句，不允许再次出现异常。（×）</p>\n<p>5. 通过 throws 关键字在方法上声明该方法要拋出的异常，然后在方法内部通过 throw 拋出异常对象。</p>\n<p>6. 自定义异常的对象，只能由 throw 语句手动抛出</p>\n<p>7.finally 关键字的代码块中，允许再出现 try…catch… 再次捕获异常。</p>\n<p>8. <code>catch</code>  中的语句可以重抛或抛出新异常</p>\n<p>9. 所有的异常类是从 Exception 类继承的子类</p>\n<p>10.Exception 类是 Throwable 类的子类。除了 Exception 类外，Throwable 还有一个子类 Error 。</p>\n<p>11.Java 程序通常不捕获错误。错误一般发生在严重故障时，它们在 Java 程序处理的范畴之外。</p>\n<p>12.Error 用来指示运行时环境发生的错误。</p>\n<blockquote>\n<p>例如，JVM 内存溢出。一般地，程序不会从错误中恢复。</p>\n</blockquote>\n<p>13. 异常类有两个主要的子类：IOException 类和 RuntimeException 类。</p>\n<ol start=\"14\">\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre># <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 返回关于发生的异常的详细信息。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 这个消息在 Throwable 类的构造函数中初始化了。 </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">12</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>自定义异常类的对象可以打印属于自己的异常信息。</pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre># <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 返回此 Throwable 的简短描述。 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">13</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n</ol>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StringTest1</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getStringLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> s<span class=\"token operator\">=</span><span class=\"token string\">\"Hello Alibaba\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 此处报错！！！不能使用 private 修饰符！！！</span>\n<span class=\"token keyword\">int</span> l<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> l<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringTest1</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStringLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>public\n<ul>\n<li>类公开可见</li>\n<li>（成员）数据、方法公开可见</li>\n<li>一个 Java 文件中，只能有一个 public 类，遵循封装原则，public 不应该修饰数据成员</li>\n</ul>\n</li>\n<li>protected\n<ul>\n<li>对于其子类，或者同一个包中的类可见</li>\n<li>protected 成员，在其他包中只能通过继承的方式来使用</li>\n</ul>\n</li>\n<li>缺省 default\n<ul>\n<li>整个类的访问权限是本地</li>\n<li>对于同一个包中的类，可见</li>\n<li>缺省类，其成员的最高访问权限为缺省，尽管可以用 public，protected 修饰，</li>\n</ul>\n</li>\n<li>private\n<ul>\n<li>私有，仅对本类或者其外部类公开</li>\n</ul>\n</li>\n<li>final\n<ul>\n<li>禁止变量被赋值（实现只读效果）</li>\n<li>禁止方法被覆写</li>\n<li>禁止类被继承</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"三重写方法方法覆盖\"><a class=\"anchor\" href=\"#三重写方法方法覆盖\">#</a> （三）重写方法 / 方法覆盖</h5>\n<p>1. 子类中方法名、参数列表与父类中的方法名、参数列表一样时发生重写</p>\n<p>2. 返回值类型必须一致（新版本：返回值类型必须小于或者等于父类方法的返回值类型，可以类型转换 ）</p>\n<p>3. 子类方法访问权限＞= 被覆盖的父类方法</p>\n<p>4. 子类不能重写父类中用 final 修饰的方法</p>\n<p>5. 子类不能重写父类的构造方法</p>\n<p>6. 子类无法继承父类的构造函数</p>\n<blockquote>\n<p>方法重载（overloading）：</p>\n<p>参数个数、类型或顺序不同，方法名相同（返回值类型可以不同）</p>\n</blockquote>\n<blockquote>\n<p>java 中方法的重写 (overriding) 和重载 (overloading) 是多态性的不同表现</p>\n</blockquote>\n<p>7. 父类被重写后，子类使用 super 调用的是父类的方法（被重写前的），其他情况下，直接调用被重写的方法，调用的就是子类中的方法。</p>\n<p>8.java 不支持 super.super 的用法</p>\n<p>9. 关键字 final 定义的方法，可以在同一个类中有重载（overloading）方法。（被继承后不能重写）</p>\n<p>10. 子类和父类的方法必须都是实例方法才会实现重写，若父类是静态方法，子类是实例方法或者相反都会报错，若父类和子类都是静态方法，那么子类会隐藏父类的静态方法，而不是覆盖。</p>\n<h5 id=\"四影子变量\"><a class=\"anchor\" href=\"#四影子变量\">#</a> （四）影子变量</h5>\n<p>1. 子类中定义的与父类同名的变量</p>\n<p>2. 合法但不提倡</p>\n<h5 id=\"五object类\"><a class=\"anchor\" href=\"#五object类\">#</a> （五）Object 类</h5>\n<p>1. 所有的类都直接或间接的由 Object 类派生</p>\n<p>2.Java 程序的每一个类都继承 <code>toString</code>  方法和 <code>equals</code>  方法（都是 public）</p>\n<blockquote>\n<p>equals 方法只能比较对象 不能比较基本数据类型变量（int 等）</p>\n</blockquote>\n<p>3.<strong>Java 中的接口 (interface) 没有继承 Object 类</strong></p>\n<h5 id=\"六抽象类\"><a class=\"anchor\" href=\"#六抽象类\">#</a> （六）抽象类</h5>\n<blockquote>\n<p><code>public abstract class ABC&#123;&#125;</code></p>\n<p><code>public abstract void run()；</code></p>\n</blockquote>\n<p>1. <code>abstract</code>  修饰符类为抽象类</p>\n<p>2. 抽象类中每一个抽象方法（例： <code>public abstract void run();</code>  ）都必须用 <code>abstract</code>  修饰符，但抽象类不必一定包含抽象方法（抽象方法必须在抽象类中，抽象类中可以有抽象方法和其他方法，也可以没有抽象方法）</p>\n<p>3. 不能实例化抽象类</p>\n<p>4. 抽象类的子类必须重写父类的所有抽象方法，否则它也将被视为抽象类</p>\n<p>5. 抽象类中可以有 <code>final</code>  修饰的方法</p>\n<p>6.abstract 类不能实例化对象。</p>\n<p>7. 抽象方法不能用 <code>final</code>   <code>private</code>  和 <code>static</code>  修饰符（这三种修饰符修饰后无法被重写）</p>\n<blockquote>\n<ul>\n<li><code>this</code>  与 <code>static</code>  互斥。</li>\n<li><code>abstract</code>  与 <code>static</code>  互斥  通过对象引用才能实现多态行为，因此不能是静态方法。</li>\n<li><code>abstract</code>  与 <code>private</code>  互斥：抽象方法要求子类实现，因此子类必须能够访问该方法。</li>\n<li><code>abstract</code>  与 <code>final</code>  互斥  抽象方法需要被覆写。</li>\n<li><code>private</code>  方法不可能被继承并覆写，所以隐含 <code>final</code>  修饰。</li>\n</ul>\n</blockquote>\n<h5 id=\"七接口\"><a class=\"anchor\" href=\"#七接口\">#</a> （七）接口</h5>\n<p>1. 接口的所有成员都是 public 的，不涉及 protected 和 private 等</p>\n<p>2. 子接口继承父接口所有的抽象方法和常量，任何实现子接口的类都必须实现所有的抽象方法</p>\n<p>3. 只有定义没有实现 接口中所有方法都没有 body</p>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Doable</span>\n<span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">doThat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> doThis2 <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> doTheOther <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">default</span> <span class=\"token class-name\">String</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> “miaomiao”<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>4. 只能继承一个类，却可以继承多个接口</p>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ManyThings</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ParentClass</span> <span class=\"token keyword\">implements</span> interface1<span class=\"token punctuation\">,</span> interface2\n<span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">// all methods of both interfaces</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>5.Comparable interface 只有一个 compareTo 方法</p>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> name1<span class=\"token punctuation\">.</span><span class=\"token function\">comareTo</span><span class=\"token punctuation\">(</span>name2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//name1 小</span>\n   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name1 <span class=\"token operator\">+</span> <span class=\"token string\">\"comes first\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Same name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">else</span> <span class=\"token comment\">//name2 小</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name2 <span class=\"token operator\">+</span> <span class=\"token string\">\"comes first\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>6. 接口继承另一个接口，用 extends 关键字标明，可以继承多个接口</p>\n<p>7. 如果类 B 实现了接口 A（即 B implements A），如果 B 不是抽象类，则必须实现 A 中定义的所有方法。（B 是抽象类，则不必全部实现）</p>\n<p>8.interface 中不可以定义属性</p>\n<p>9. 接口不能实例化对象，但可以声明对象引用</p>\n<p>10.Serializable 接口是一个空接口，没有定义任何方法</p>\n<h3 id=\"七-多态\"><a class=\"anchor\" href=\"#七-多态\">#</a> 七、多态</h3>\n<h5 id=\"一多态\"><a class=\"anchor\" href=\"#一多态\">#</a> （一）多态</h5>\n<p>1. <code>Father obj=new Son();</code>  先调用父类构造方法再调用子类构造方法</p>\n<h5 id=\"二排序\"><a class=\"anchor\" href=\"#二排序\">#</a> （二）排序</h5>\n<h6 id=\"1选择排序\"><a class=\"anchor\" href=\"#1选择排序\">#</a> 1. 选择排序：</h6>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> sorting<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 从大到小</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">selectionSort1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> max<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 这里也可以不减一</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>index<span class=\"token operator\">&lt;</span>list<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            max<span class=\"token operator\">=</span>index<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> scan<span class=\"token operator\">=</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>scan<span class=\"token operator\">&lt;</span>list<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>scan<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>scan<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>list<span class=\"token punctuation\">[</span>max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    max<span class=\"token operator\">=</span>scan<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            temp<span class=\"token operator\">=</span>list<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            list<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>list<span class=\"token punctuation\">[</span>max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            list<span class=\"token punctuation\">[</span>max<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token comment\">// 从小到大</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">selsectionSort2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> min<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span>\n       <span class=\"token comment\">// 这里也可以不减一</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>index<span class=\"token operator\">&lt;</span>list<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            min<span class=\"token operator\">=</span>index<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> scan<span class=\"token operator\">=</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>scan<span class=\"token operator\">&lt;</span>list<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>scan<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>scan<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    min<span class=\"token operator\">=</span>scan<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            temp<span class=\"token operator\">=</span>list<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            list<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>list<span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            list<span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"2插入排序\"><a class=\"anchor\" href=\"#2插入排序\">#</a> 2. 插入排序</h6>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> sorting<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 从大到小</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertionSort1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>index<span class=\"token operator\">&lt;</span>list<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> key<span class=\"token operator\">=</span>list<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> position<span class=\"token operator\">=</span>index<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>position<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>key<span class=\"token operator\">></span>list<span class=\"token punctuation\">[</span>position<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                list<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>list<span class=\"token punctuation\">[</span>position<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                position<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            list<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>key<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 从小到大</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertionSort2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>index<span class=\"token operator\">&lt;</span>list<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> key<span class=\"token operator\">=</span>list<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> position<span class=\"token operator\">=</span>index<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>position<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>key<span class=\"token operator\">&lt;</span>list<span class=\"token punctuation\">[</span>position<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                list<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>list<span class=\"token punctuation\">[</span>position<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                position<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            list<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>key<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h3 id=\"八-递归\"><a class=\"anchor\" href=\"#八-递归\">#</a> 八、递归</h3>\n<h3 id=\"九-链表\"><a class=\"anchor\" href=\"#九-链表\">#</a> 九、链表</h3>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNode</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span><span class=\"token comment\">// 为考试简便，定义属性为 public</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> link<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> newData<span class=\"token punctuation\">,</span><span class=\"token class-name\">ListNode</span> newLink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        data<span class=\"token operator\">=</span>newData<span class=\"token punctuation\">;</span>\n        link<span class=\"token operator\">=</span>newLink<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">List</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></p>\n<h5 id=\"一基本用语\"><a class=\"anchor\" href=\"#一基本用语\">#</a> （一）基本用语</h5>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">ListNode</span> p<span class=\"token operator\">=</span>head<span class=\"token punctuation\">;</span><span class=\"token comment\">// 指向头节点，准备开始使用 p 操作链表，head 一般不能动</span>\np<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span><span class=\"token comment\">//p 指向下一个节点</span>\np<span class=\"token punctuation\">.</span>next<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//p 节点后面插入一个新节点</span>\n相当于：\n    n<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tn<span class=\"token punctuation\">.</span>next<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\tp<span class=\"token punctuation\">.</span>next<span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span>\np<span class=\"token punctuation\">.</span>next<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span><span class=\"token comment\">// 删除 p 节点的后一个节点</span>\np<span class=\"token punctuation\">.</span>next<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//p 是最后一个节点</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h5 id=\"二具体方法实现\"><a class=\"anchor\" href=\"#二具体方法实现\">#</a> （二）具体方法实现</h5>\n<h6 id=\"1添加头节点\"><a class=\"anchor\" href=\"#1添加头节点\">#</a> 1. 添加头节点</h6>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//1. 添加头节点</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addHeadNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        head<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"2插入一个节点到链表尾部\"><a class=\"anchor\" href=\"#2插入一个节点到链表尾部\">#</a> 2. 插入一个节点到链表尾部</h6>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//2. 插入一个节点到链表尾部 </span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 判断链表是否为空</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            head<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">ListNode</span> p<span class=\"token operator\">=</span>head<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>link<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 寻找尾节点</span>\n                p<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">// 此时 p 为尾节点</span>\n            p<span class=\"token punctuation\">.</span>link<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"3指定位置插入\"><a class=\"anchor\" href=\"#3指定位置插入\">#</a> 3. 指定位置插入</h6>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//3. 指定位置插入，插入后为 n 号结点，找 n-1 号结点 (链表位置从 0 开始 0 为头节点）</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> length<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> p<span class=\"token operator\">=</span>head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            p<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 判断插入位置是否合法</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>n<span class=\"token operator\">></span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 判断是否在头节点插入</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            head<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 判断是否为链表尾部插入</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            p<span class=\"token operator\">=</span>head<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>link<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                p<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            p<span class=\"token punctuation\">.</span>link<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                p<span class=\"token operator\">=</span>head<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//p 从 0 走 n-1 步，到 n-1 号位置</span>\n                    p<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                p<span class=\"token punctuation\">.</span>link<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"4删除指定位置n的节点\"><a class=\"anchor\" href=\"#4删除指定位置n的节点\">#</a> 4. 删除指定位置 n 的节点</h6>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//4. 删除指定位置 n 的节点 (链表位置从 0 开始 0 为头节点）</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteNodeByN</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> length<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> p<span class=\"token operator\">=</span>head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            p<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n            length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>n<span class=\"token operator\">>=</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 判断是否为删除头节点</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            head<span class=\"token operator\">=</span>head<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            p<span class=\"token operator\">=</span>head<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                p<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            p<span class=\"token punctuation\">.</span>link<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"5删除data为data的所有节点\"><a class=\"anchor\" href=\"#5删除data为data的所有节点\">#</a> 5. 删除 data 为 data 的所有节点</h6>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//5. 删除 data 为 data 的所有节点</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteAllNodeByData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n       <span class=\"token comment\">// 判断链表是否为空</span>\n       <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token comment\">// 判断是否为头节点删除</span>\n       <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>data<span class=\"token operator\">==</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           head<span class=\"token operator\">=</span>head<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token class-name\">ListNode</span> p<span class=\"token operator\">=</span>head<span class=\"token punctuation\">;</span>\n       <span class=\"token comment\">// 未到达链表尾部就继续找</span>\n       <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>link<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">.</span>data<span class=\"token operator\">==</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n               p<span class=\"token punctuation\">.</span>link<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span>\n           <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>link<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n               p<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"6删除data为data的第一个节点\"><a class=\"anchor\" href=\"#6删除data为data的第一个节点\">#</a> 6. 删除 data 为 data 的第一个节点</h6>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//6. 删除 data 为 data 的第一个节点</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteNodeByData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 判断链表是否为空</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 判断是否为头节点删除</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>data<span class=\"token operator\">==</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            head<span class=\"token operator\">=</span>head<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">ListNode</span> p<span class=\"token operator\">=</span>head<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 未到达链表尾部且下一个值为目标值</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>link<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token operator\">&amp;&amp;</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">.</span>data<span class=\"token operator\">!=</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            p<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>link<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 说明链表到达尾部仍未找到目标节点</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            p<span class=\"token punctuation\">.</span>link<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"7对链表节点排序\"><a class=\"anchor\" href=\"#7对链表节点排序\">#</a> 7. 对链表节点排序</h6>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//7. 对链表节点排序（从小到大）并返回排序后的头节点（采用选择排序）</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">linkSort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ListNode</span> p<span class=\"token operator\">=</span>head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>link<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">ListNode</span> next<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>next<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">.</span>data<span class=\"token operator\">&lt;</span>p<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    temp<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n                    p<span class=\"token punctuation\">.</span>data<span class=\"token operator\">=</span>next<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n                    next<span class=\"token punctuation\">.</span>data<span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                next<span class=\"token operator\">=</span>next<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            p<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"8获取链表长度\"><a class=\"anchor\" href=\"#8获取链表长度\">#</a> 8. 获取链表长度</h6>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//8. 获取链表长度</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> length<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> p<span class=\"token operator\">=</span>head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            p<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> length<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"9打印节点\"><a class=\"anchor\" href=\"#9打印节点\">#</a> 9. 打印节点</h6>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//9. 打印节点</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">ListNode</span> p<span class=\"token operator\">=</span>head<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>data<span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                p<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"10查找正数第k个元素\"><a class=\"anchor\" href=\"#10查找正数第k个元素\">#</a> 10. 查找正数第 k 个元素</h6>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//10. 查找正数第 k 个元素 (从 1 开始，头节点算是第一个）</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">findNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ListNode</span> p<span class=\"token operator\">=</span>head<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 判断插入位置是否合法</span>\n        <span class=\"token keyword\">int</span> length<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            p<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>k<span class=\"token operator\">></span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        p<span class=\"token operator\">=</span>head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            p<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"11查找倒数第k个元素\"><a class=\"anchor\" href=\"#11查找倒数第k个元素\">#</a> 11. 查找倒数第 k 个元素</h6>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//11. 查找倒数第 k 个元素 ---- 法一：转化为正数第 length-k+1 个  法二：如下</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">findReverNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n       <span class=\"token class-name\">ListNode</span> p<span class=\"token operator\">=</span>head<span class=\"token punctuation\">;</span>\n       <span class=\"token comment\">// 判断插入位置是否合法</span>\n       <span class=\"token keyword\">int</span> length<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n           p<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>k<span class=\"token operator\">></span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token class-name\">ListNode</span> first<span class=\"token operator\">=</span>head<span class=\"token punctuation\">;</span>\n       <span class=\"token class-name\">ListNode</span> second<span class=\"token operator\">=</span>head<span class=\"token punctuation\">;</span>\n       <span class=\"token comment\">//first 到达正数第 k 处</span>\n       <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>k<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           first<span class=\"token operator\">=</span>first<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token comment\">//first 从正数第 k 处到链表尾节点相当于 second 从头节点开始到倒数第 k 处</span>\n       <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>first<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           second<span class=\"token operator\">=</span>second<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n           first<span class=\"token operator\">=</span>first<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token keyword\">return</span>  second<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"12反转链表\"><a class=\"anchor\" href=\"#12反转链表\">#</a> 12. 反转链表</h6>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//12. 反转链表</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">reserveLink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ListNode</span> prev<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 指向前一个节点</span>\n        <span class=\"token class-name\">ListNode</span> curr<span class=\"token operator\">=</span>head<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> next<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>curr<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 从头节点到尾节点</span>\n            next<span class=\"token operator\">=</span>curr<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span><span class=\"token comment\">// 先保存下一个节点</span>\n            curr<span class=\"token punctuation\">.</span>link<span class=\"token operator\">=</span>prev<span class=\"token punctuation\">;</span><span class=\"token comment\">// 使当前节点指向前一个结点</span>\n            prev<span class=\"token operator\">=</span>curr<span class=\"token punctuation\">;</span><span class=\"token comment\">// 前一个结点右移</span>\n            curr<span class=\"token operator\">=</span>next<span class=\"token punctuation\">;</span><span class=\"token comment\">// 当前节点移向下一个节点</span>\n        <span class=\"token punctuation\">&#125;</span>\n        head<span class=\"token operator\">=</span>prev<span class=\"token punctuation\">;</span><span class=\"token comment\">// 更新头节点</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"13寻找单链表的中间节点\"><a class=\"anchor\" href=\"#13寻找单链表的中间节点\">#</a> 13. 寻找单链表的中间节点</h6>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//13. 寻找单链表的中间节点</span>\n    <span class=\"token comment\">/*\n    方法一：先求出链表的长度，再遍历 1/2 链表长度，寻找出链表的中间结点\n    方法二：\n        用两个指针遍历链表，一个快指针、一个慢指针，\n        快指针每次向前移动 2 个结点，慢指针一次向前移动一个结点，\n        当快指针移动到链表的末尾，慢指针所在的位置即为中间结点所在的位置\n     */</span>\n    <span class=\"token comment\">// 假设链表长度为奇数</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">findMiddleNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ListNode</span> slow<span class=\"token operator\">=</span>head<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> fast<span class=\"token operator\">=</span>head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>fast<span class=\"token punctuation\">.</span>link<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            fast<span class=\"token operator\">=</span>fast<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n            slow<span class=\"token operator\">=</span>slow<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> slow<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"14返回尾节点\"><a class=\"anchor\" href=\"#14返回尾节点\">#</a> 14. 返回尾节点</h6>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//14. 返回尾节点</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">findLatNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ListNode</span> p<span class=\"token operator\">=</span>head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>link<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            p<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"15在不知道头结点的情况下删除指定节点\"><a class=\"anchor\" href=\"#15在不知道头结点的情况下删除指定节点\">#</a> 15. 在不知道头结点的情况下删除指定节点</h6>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//15. 在不知道头结点的情况下删除指定节点</span>\n    <span class=\"token comment\">/*\n    删除结点的重点在于找出其前结点，使其前结点的指针指向其后结点，即跳过待删除结点 n.link=n.link.link;\n    1、如果待删除的结点是尾结点，由于单链表不知道其前结点，没有办法删除\n    2、如果删除的结点不是尾结点，则将其该结点的值 (n.data) 与下一结点交换 (n.link.data)，然后该结点的指针指向下一结点的后续结点 (即删除 n.link)\n    （将目标节点转化为目标节点的前节点）\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteSpecialNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//n 为尾节点</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>link<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            n<span class=\"token punctuation\">.</span>data<span class=\"token operator\">=</span>n<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n            n<span class=\"token punctuation\">.</span>link<span class=\"token operator\">=</span>n<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"16两个有序链表排序\"><a class=\"anchor\" href=\"#16两个有序链表排序\">#</a> 16. 两个有序链表排序</h6>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//16. 两个有序链表排序（从小到大）</span>\n    <span class=\"token comment\">//n1 n2 为两个链表的头结点</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> n1<span class=\"token punctuation\">,</span><span class=\"token class-name\">ListNode</span> n2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n1<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> n2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n2<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> n1<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 先确定头结点</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">.</span>data<span class=\"token operator\">></span>n2<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                head<span class=\"token operator\">=</span>n2<span class=\"token punctuation\">;</span>\n                n2<span class=\"token operator\">=</span>n2<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                head<span class=\"token operator\">=</span>n1<span class=\"token punctuation\">;</span>\n                n1<span class=\"token operator\">=</span>n1<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token class-name\">ListNode</span> p<span class=\"token operator\">=</span>head<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//n1 和 n2 都没有到达尾节点</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n1<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token operator\">&amp;&amp;</span>n2<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">.</span>data<span class=\"token operator\">></span>n2<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    p<span class=\"token punctuation\">.</span>link<span class=\"token operator\">=</span>n2<span class=\"token punctuation\">;</span>\n                    n2<span class=\"token operator\">=</span>n2<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                    p<span class=\"token punctuation\">.</span>link<span class=\"token operator\">=</span>n1<span class=\"token punctuation\">;</span>\n                    n1<span class=\"token operator\">=</span>n1<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                p<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n1<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                p<span class=\"token punctuation\">.</span>link<span class=\"token operator\">=</span>n2<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                p<span class=\"token punctuation\">.</span>link<span class=\"token operator\">=</span>n1<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"17去重\"><a class=\"anchor\" href=\"#17去重\">#</a> 17. 去重</h6>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//17. 去重</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">removeRep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ListNode</span> one<span class=\"token operator\">=</span>head<span class=\"token punctuation\">;</span><span class=\"token comment\">//one 作为标杆，寻找并删除和 one 的 data 相同的节点</span>\n        <span class=\"token class-name\">ListNode</span> prev<span class=\"token punctuation\">;</span><span class=\"token comment\">// 指向 two 的前一个节点</span>\n        <span class=\"token class-name\">ListNode</span> two<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//one 从头节点到尾节点</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>one<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            prev<span class=\"token operator\">=</span>one<span class=\"token punctuation\">;</span>\n            two<span class=\"token operator\">=</span>one<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//two 从此 one 指向节点的下一个节点开始遍历寻找是否有重复节点，有则删除</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>two<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">.</span>data<span class=\"token operator\">==</span>two<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// 或者：</span>\n                    <span class=\"token comment\">//prev.link=two.link;</span>\n                    <span class=\"token comment\">//two=two.link;</span>\n                    two<span class=\"token operator\">=</span>two<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n                    prev<span class=\"token punctuation\">.</span>link<span class=\"token operator\">=</span>two<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                    two<span class=\"token operator\">=</span>two<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n                    prev<span class=\"token operator\">=</span>prev<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            one<span class=\"token operator\">=</span>one<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"18取模取余\"><a class=\"anchor\" href=\"#18取模取余\">#</a> 18. 取模（取余）</h6>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//18. 大数取模（取余） 以对 2022 取模为例</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sumMod2022</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n       <span class=\"token class-name\">ListNode</span> p<span class=\"token operator\">=</span>head<span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">int</span> answer<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>link<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n               answer<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>answer<span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token operator\">+</span>p<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">2022</span><span class=\"token punctuation\">;</span>\n               p<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h1 id=\"ii阅读程序\"><a class=\"anchor\" href=\"#ii阅读程序\">#</a> Ⅱ 阅读程序</h1>\n<h3 id=\"1基础\"><a class=\"anchor\" href=\"#1基础\">#</a> 1. 基础</h3>\n<p>1. 对下列程序，输出结果是：</p>\n<p><pre class=\"line-numbers language-none\"><code class=\"language-none\">public class Test&#123;\n        private int x&#x3D;1;\n        private static int y&#x3D;2;\n        public static void main(String[] args)&#123;\n            Test t1&#x3D;new Test();\n            Test t2&#x3D;new Test();\n            t2.x +&#x3D;2;\n            t2.y +&#x3D;2;\n            System.out.print(&quot;T1: x&#x3D;&quot;+t1.x+&quot;, y&#x3D;&quot;+t1.y+ &quot;; &quot; );\n            System.out.println(&quot;T2: x&#x3D;&quot;+t2.x+&quot;, y&#x3D;&quot;+t2.y);\n        &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<blockquote>\n<p>T1: x=1, y=4; T2: x=3, y=4</p>\n</blockquote>\n<p>2. 设 x=1,y=2,z=3, 则表达式 <code>y*=x + z</code>  的值是  8</p>\n<p>3. 下列代码的执行结果是（  ）</p>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LogicTest</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">--</span><span class=\"token operator\">&lt;</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>b<span class=\"token operator\">--</span> <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">++</span><span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 相当于 ((c--&lt;30)||((b--&lt;-2)&amp;&amp;(a++&lt;3)));</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a=\"</span> <span class=\"token operator\">+</span> a <span class=\"token operator\">+</span> <span class=\"token string\">\";b=\"</span> <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> <span class=\"token string\">\";c=\"</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>“done”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<blockquote>\n<p>a=2;b=-2,c=19</p>\n<ul>\n<li>逻辑 / 位运算结合性的优先级：非、与、或、</li>\n</ul>\n</blockquote>\n<ol start=\"4\">\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\ta<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">.</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token class-name\">Test</span> t<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a=\"</span> <span class=\"token operator\">+</span> a <span class=\"token operator\">+</span> <span class=\"token string\">\" t.a=\"</span> <span class=\"token operator\">+</span> t<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">43</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">44</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token number\">1</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"2控制流程数组\"><a class=\"anchor\" href=\"#2控制流程数组\">#</a> 2. 控制流程 + 数组</h3>\n<h6 id=\"例1\"><a class=\"anchor\" href=\"#例1\">#</a> 例 1.</h6>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Two</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">>=</span>j<span class=\"token punctuation\">)</span>\n                    a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token operator\">+</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span>\n                    a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<blockquote>\n<p>1\t5\t9\t13\t<br>\n0\t6\t10\t14\t<br>\n0\t0\t11\t15\t<br>\n0\t0\t0\t16</p>\n</blockquote>\n<h6 id=\"例2\"><a class=\"anchor\" href=\"#例2\">#</a> 例 2.</h6>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TwoFour</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> k <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span>\n                    k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<blockquote>\n<p>10 11 12 13 14<br>\n15 16 17 18 10<br>\n19 20 21 10 10<br>\n22 23 10 10 10<br>\n24 10 10 10 10</p>\n</blockquote>\n<h3 id=\"3异常\"><a class=\"anchor\" href=\"#3异常\">#</a> 3. 异常</h3>\n<h5 id=\"1做题方法\"><a class=\"anchor\" href=\"#1做题方法\">#</a> （1）做题方法</h5>\n<p>①抛出异常，在该方法中寻找 catch</p>\n<ul>\n<li>找到：执行该 catch 中语句，执行方法中剩余语句（finally 先与 return 执行）</li>\n<li>未找到：执行 finally 语句，再去调用该方法的方法中寻找 catch，以此类推</li>\n</ul>\n<blockquote>\n<p>在方法中抛出异常，只有被 catch 了才能执行剩下的语句，否则无法执行</p>\n<p>Exception 是其他异常类的父类，可以捕获所有异常</p>\n</blockquote>\n<h5 id=\"2例题\"><a class=\"anchor\" href=\"#2例题\">#</a> （2）例题</h5>\n<h6 id=\"例1-2\"><a class=\"anchor\" href=\"#例1-2\">#</a> 例 1.</h6>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">zero</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Three</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token operator\">/</span>i<span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ArithmeticException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Divide by Zero!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Finally 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//Exception 是其他异常类的父类，可以捕获所有异常</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"End.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Finally 2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<blockquote>\n<p>Finally 1<br>\nEnd.<br>\nFinally 2<br>\nDivide by Zero!<br>\nFinally 1<br>\nFinally 2<br>\nEnd.<br>\nFinally 2</p>\n</blockquote>\n<h6 id=\"例2-2\"><a class=\"anchor\" href=\"#例2-2\">#</a> 例 2.</h6>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TwoThree</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExceptionTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExceptionTest</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">m2</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"handle Exception\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" m1 runs \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">m2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ArithmeticException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"handle ArithmeticException\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finally\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"m2 ends\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<blockquote>\n<p>handle ArithmeticException<br>\nfinally<br>\nm2 ends</p>\n<p>1<br>\nfinally<br>\nm2 ends</p>\n<p>finally<br>\nhandle Exception<br>\nm1 runs</p>\n</blockquote>\n<h3 id=\"4重载与多态\"><a class=\"anchor\" href=\"#4重载与多态\">#</a> 4. 重载与多态</h3>\n<h5 id=\"1创建对象\"><a class=\"anchor\" href=\"#1创建对象\">#</a> （1）创建对象</h5>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Father</span> obj1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 先调用父类构造方法再调用子类构造方法</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Son</span> obj2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 先调用父类构造方法再调用子类构造方法</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Father</span> obj3<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 正常调用父类构造方法</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<h5 id=\"2调用方法\"><a class=\"anchor\" href=\"#2调用方法\">#</a> （2）调用方法</h5>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">obj1<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p>①先去父类中找该方法（一定可以找到，否则编译时会报错，参数类型可以类型转换）</p>\n<p>②去子类中看该方法是否被重写（子类中方法名、参数列表、返回值类型与父类中的必须一致才发生重写）</p>\n<ul>\n<li>若被重写：调用子类方法</li>\n<li>未被重写：调用父类方法</li>\n</ul>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">obj2<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p>①去子类找该方法</p>\n<ul>\n<li>子类有该方法：使用</li>\n<li>子类无该方法：去父类找该方法\n<ul>\n<li>父类中有该方法：使用</li>\n<li>父类中无该方法：使用子类中相似的（类型转换，选形参类型大于当前类型的）</li>\n</ul>\n</li>\n</ul>\n<p><pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;父类中调用方法<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p>①父类中寻找该方法（类型转换，选形参类型大于当前类型的）</p>\n<p>②去子类中看是否被重写</p>\n<ul>\n<li>重写：用重写后方法</li>\n<li>未重写：用重写前方法</li>\n</ul>\n<p><pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;子类中调用方法<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p>①在本类中找</p>\n<ul>\n<li>有（参数类型相同）：使用该子类方法</li>\n<li>无：去父类中找\n<ul>\n<li>有（参数类型相同）：使用父类该方法</li>\n<li>无：去子类中寻找类似的方法（参数类型不同，可类型转换）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5递归\"><a class=\"anchor\" href=\"#5递归\">#</a> 5. 递归</h3>\n<h6 id=\"例1-3\"><a class=\"anchor\" href=\"#例1-3\">#</a> 例 1.</h6>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Four</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">perm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> digit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>digit<span class=\"token operator\">></span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>digit<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">perm</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">,</span>digit<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">perm</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<blockquote>\n<p>2340<br>\n2430<br>\n3240<br>\n4230<br>\n3420<br>\n4320</p>\n</blockquote>\n<h6 id=\"例2用递归求第i个斐波纳契数列数\"><a class=\"anchor\" href=\"#例2用递归求第i个斐波纳契数列数\">#</a> 例 2. 用递归求第 i 个斐波纳契数列数</h6>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> fiboTest <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> num<span class=\"token operator\">=</span><span class=\"token function\">fibo</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fibo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> one<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>two<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>i<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> num<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        num<span class=\"token operator\">=</span><span class=\"token function\">fibo</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">fibo</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"例3\"><a class=\"anchor\" href=\"#例3\">#</a> 例 3.</h6>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T24A</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> grid <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        traverse <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">+</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">+</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">+</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> traverse <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> column<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">boolean</span> done <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>valid <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> column<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            grid<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>row <span class=\"token operator\">==</span> grid<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> column <span class=\"token operator\">==</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                done <span class=\"token operator\">=</span> traverse <span class=\"token punctuation\">(</span>row<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>done<span class=\"token punctuation\">)</span>\n                    done <span class=\"token operator\">=</span> traverse <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> column<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>done<span class=\"token punctuation\">)</span>\n                    done <span class=\"token operator\">=</span> traverse <span class=\"token punctuation\">(</span>row<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>done<span class=\"token punctuation\">)</span>\n                    done <span class=\"token operator\">=</span> traverse <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> column<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span>\n                grid<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> done<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> valid <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> column<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">boolean</span> result <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>row <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> row <span class=\"token operator\">&lt;</span> grid<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span>\n                column <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> column <span class=\"token operator\">&lt;</span> grid<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                result <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<blockquote>\n<p>3 0 2 3</p>\n</blockquote>\n<h6 id=\"例4\"><a class=\"anchor\" href=\"#例4\">#</a> 例 4.</h6>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T23B</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 汉诺塔</span>\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"S disk\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"M disk\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"L disk\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> diskN<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> src<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> dst<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>diskN <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"****\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>diskN<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" from \"</span> <span class=\"token operator\">+</span> src <span class=\"token operator\">+</span> <span class=\"token string\">\" to \"</span> <span class=\"token operator\">+</span> dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> d<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> diskN<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">m</span><span class=\"token punctuation\">(</span>diskN<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> diskN <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">m</span><span class=\"token punctuation\">(</span>diskN<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> diskN <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<blockquote>\n<p>S disk from a to c<br>\nM disk from a to b<br>\nS disk from c to b</p>\n<p>****</p>\n<p>L disk from a to c<br>\nS disk from b to a<br>\nM disk from b to c<br>\nS disk from a to c</p>\n</blockquote>\n<h1 id=\"iii写程序\"><a class=\"anchor\" href=\"#iii写程序\">#</a> Ⅲ 写程序</h1>\n<p>1. 字符串转换为数字</p>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> l<span class=\"token operator\">=</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> d<span class=\"token operator\">=</span><span class=\"token class-name\">Doube</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseDouble</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5.5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> f<span class=\"token operator\">=</span><span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5.5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>2. 字符串</p>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 返回字符串中从索引 offset 开始，到 endIndex-1 处的子串</span>\n<span class=\"token class-name\">String</span> <span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> endIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "https://rainnn-w.github.io/posts/48639.html",
            "url": "https://rainnn-w.github.io/posts/48639.html",
            "title": "使用Hexo+Github搭建个人博客",
            "date_published": "2022-12-22T08:11:01.000Z",
            "content_html": "<h2 id=\"使用hexogithub搭建个人博客\"><a class=\"anchor\" href=\"#使用hexogithub搭建个人博客\">#</a> 使用 Hexo+Github 搭建个人博客</h2>\n<ul>\n<li>\n<p>什么是 Hexo？</p>\n<p>Hexo 是一个快速、简洁且高效的博客框架，基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p>\n</li>\n<li>\n<p>Hexo+Github 原理：hexo 生成博客页面，部署到 github 的仓库，访问博客相当于访问仓库下的页面</p>\n</li>\n</ul>\n<h3 id=\"一-安装相关环境\"><a class=\"anchor\" href=\"#一-安装相关环境\">#</a> 一、安装相关环境</h3>\n<h4 id=\"1安装nodejs\"><a class=\"anchor\" href=\"#1安装nodejs\">#</a> 1. 安装 Node.js</h4>\n<p>在官网<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==\"> Node.js (nodejs.org)</span> 下载</p>\n<p>进入命令行终端输入 <code>node -v </code>     <code>npm -v </code>  查看版本</p>\n<p>(安装过程中默认配置环境变量)</p>\n<h4 id=\"2安装git\"><a class=\"anchor\" href=\"#2安装git\">#</a> 2. 安装 Git</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzJTNBLy9naXQtc2NtLmNvbS9kb3dubG9hZHM=\">在官网 https://git-scm.com/downloads</span> 下载</p>\n<p>进入命令行终端输入  <code>git --version </code>  查看版本</p>\n<h4 id=\"3安装hexo框架\"><a class=\"anchor\" href=\"#3安装hexo框架\">#</a> 3. 安装 Hexo 框架</h4>\n<p>使用 npm 一键安装 Hexo 博客程序：</p>\n<p>输入 <code>hexo -v</code>  查看 Hexo 版本</p>\n<h3 id=\"二-使用hexo搭建博客本地\"><a class=\"anchor\" href=\"#二-使用hexo搭建博客本地\">#</a> 二、使用 Hexo 搭建博客（本地）</h3>\n<h4 id=\"1新建一个文件夹-命名为blog\"><a class=\"anchor\" href=\"#1新建一个文件夹-命名为blog\">#</a> 1. 新建一个文件夹 命名为 blog</h4>\n<h4 id=\"2初始化博客\"><a class=\"anchor\" href=\"#2初始化博客\">#</a> 2. 初始化博客</h4>\n<p>在 blog 目录下打开命令行终端</p>\n<p><code>hexo init</code>  初始化一个博客</p>\n<p>等待初始化完成，得到下面的界面：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures/blog/1.png\" alt></p>\n<p>打开 blog2 文件夹可以看到生成了很多文件</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures/blog/2.png\" alt></p>\n<p>hexo 会默认使用 landscape 这个主题</p>\n<h4 id=\"3启动博客\"><a class=\"anchor\" href=\"#3启动博客\">#</a> 3. 启动博客</h4>\n<p>输入 <code>hexo s</code></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures/blog/3.png\" alt></p>\n<p>在浏览器输入 http://localhost:4000/ 即可本地浏览所搭建的博客</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures/blog/4.png\" alt></p>\n<h4 id=\"4发布文章\"><a class=\"anchor\" href=\"#4发布文章\">#</a> 4. 发布文章</h4>\n<p>（1）输入  <code>hexo n &quot;My first blog&quot;</code> 即可创建为&quot;My first blog&quot; 的文章</p>\n<p>在 blog/source/_posts 路径可以看到该 markdown 文档，打开并进行编辑即可</p>\n<p>（2）输入   <code>hexo clean</code>  (清理)   <code>hexo g</code> （generate）  <code>hexo s</code> （server）即可在本地浏览博客并查看刚刚发布的文章了</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures/blog/6.png\" alt></p>\n<blockquote>\n<p>到这里，本地搭建博客就完成了，但只能在本地查看，公开可以通过将其部署到 Github 仓库中做到，也可以使用 Gitee...</p>\n</blockquote>\n<h3 id=\"三-部署到github上\"><a class=\"anchor\" href=\"#三-部署到github上\">#</a> 三、部署到 Github 上</h3>\n<h4 id=\"1new-repository\"><a class=\"anchor\" href=\"#1new-repository\">#</a> 1.New repository</h4>\n<p>此处 repository name 需要使用   <code>用户名.github.io</code></p>\n<h4 id=\"2安装hexo部署的插件\"><a class=\"anchor\" href=\"#2安装hexo部署的插件\">#</a> 2. 安装 hexo 部署的插件</h4>\n<p><pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install hexo-deployer-git --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<h4 id=\"3更改_configyml文档\"><a class=\"anchor\" href=\"#3更改_configyml文档\">#</a> 3. 更改_config.yml 文档</h4>\n<p>在 blog 目录下找到_config.yml 文档，修改末尾的 #Deployment 部分</p>\n<p><pre class=\"line-numbers language-none\"><code class=\"language-none\">deploy:\n  type: git\n  repo: https:&#x2F;&#x2F;github.com&#x2F;用户名&#x2F;用户名.github.io.git\n  branch: main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>（这里的 branch 自己去仓库看一下是 main 还是 master，如果不对应会导致部署失败，踩坑警告！）</p>\n<h4 id=\"4生成ssh密钥\"><a class=\"anchor\" href=\"#4生成ssh密钥\">#</a> 4. 生成 SSH 密钥</h4>\n<p>（1）生成密钥</p>\n<p><code> ssh-keygen -t rsa -C &quot;邮箱&quot;</code></p>\n<p>（2）在 C:\\Users\\ 用户名 \\.ssh 目录下找到 id_rsa.pub 文件，复制文件内所有内容</p>\n<p>（3）在 Github 中打开 settings--SSH and GPG keys --new SSH key</p>\n<blockquote>\n<p>如果此处显示 Key type 选择默认的 Authentication Key</p>\n</blockquote>\n<p>--Title 任取 -- 在 Key 中粘贴之前复制的内容 --Add SHH key</p>\n<p>输入 <code>ssh -T git@github.com</code>  出现以下信息即可</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures/blog/7.png\" alt></p>\n<h4 id=\"5部署\"><a class=\"anchor\" href=\"#5部署\">#</a> 5. 部署</h4>\n<p>输入   <code>hexo clean</code>    <code>hexo g</code>     <code>hexo d</code>   (deploy) 即可生成静态文章并部署到个人博客上</p>\n<blockquote>\n<p>首次 hexo d 时会弹出输入 github 的 username 和 password</p>\n</blockquote>\n<h4 id=\"6访问个人博客\"><a class=\"anchor\" href=\"#6访问个人博客\">#</a> 6. 访问个人博客</h4>\n<p>网址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly94bi0tZXFyOTI0YXZ4by5naXRodWIuaW8v\">https:// 用户名.github.io/</span></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures/blog/8.png\" alt></p>\n<p>好耶！我们成功了！</p>\n<h3 id=\"踩坑预警\"><a class=\"anchor\" href=\"#踩坑预警\">#</a> 踩坑预警</h3>\n<ul>\n<li>\n<p>如何能够使文章中的图片顺利出现在个人博客上呢？</p>\n<p><code>npm install hexo-asset-image -- save</code></p>\n<p>首先请在_config.yml 文档中 #Writing 部分将 <code>post_asset_folder: true </code> 改为 true，这可以在你创建新文章时同时生成文章名.md 文档和文章名同名文件夹</p>\n<p>将文章中的图片放在该文件夹中，在 markdown 文档中使用图片时使用 ./ 文章名 / 图片名称即可</p>\n</li>\n</ul>\n<p>最近发现这个总是会 error loading，还是搞个图床吧</p>\n<blockquote>\n<p>更多功能待开发，更多坑待踩</p>\n</blockquote>\n<h3 id=\"博客中直接插入pdf\"><a class=\"anchor\" href=\"#博客中直接插入pdf\">#</a> 博客中直接插入 pdf</h3>\n<p>1. 安装 hexo-pdf</p>\n<p><pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install --save hexo-pdf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p>在 source 文件夹下创建一个叫 pdf 的文件夹，把 xxx.pdf 文件放在这里，然后在_post 文件夹中的 xxx.md 直接使用</p>\n<p><pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;% pdf &#x2F;pdf&#x2F;xxx.pdf %&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<h3 id=\"优化博客文章链接\"><a class=\"anchor\" href=\"#优化博客文章链接\">#</a> 优化博客文章链接</h3>\n<p>在 Hexo 的默认设定中，文章链接就会是一大串的字符</p>\n<p>解决方法，使用 <code>hexo-abbrlink</code>  插件</p>\n<ol>\n<li>安装 <code>hexo-abbrlink</code> ：</li>\n</ol>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-abbrlink <span class=\"token parameter variable\">--save</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<ol start=\"2\">\n<li>在 hexo 的配置文件 <code>_config.yml</code> ，修改 <code>url</code> 、 <code>permalink</code>  为（不是主题的配置文件）：</li>\n</ol>\n<p><pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">url: https://rainnn-w.github.io\npermalink: posts/:abbrlink.html<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n<ol start=\"3\">\n<li>在 hexo 的配置文件 <code>_config.yml</code>  中添加以下代码（不是主题的配置文件）：</li>\n</ol>\n<p><pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"><span class=\"token title important\"><span class=\"token punctuation\">#</span>abbrlink配置</span>\nabbrlink:\n  alg: crc32  # 算法：crc16(default) and crc32\n  rep: dec    # 进制：dec(default) and hex   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>其中 alg 和 rep 为算法和进制，具体区别见下表：</p>\n<table>\n<thead>\n<tr>\n<th>算法</th>\n<th>进制</th>\n<th>生成链接</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>crc16</td>\n<td>hex</td>\n<td><a href=\"https://rainnn-w.github.io/posts/66c8.html\">https://rainnn-w.github.io/posts/66c8.html</a></td>\n</tr>\n<tr>\n<td>crc16</td>\n<td>dec</td>\n<td><a href=\"https://rainnn-w.github.io/posts/65535.html\">https://rainnn-w.github.io/posts/65535.html</a></td>\n</tr>\n<tr>\n<td>crc32</td>\n<td>hex</td>\n<td><a href=\"https://rainnn-w.github.io/posts/8ddf18fb.html\">https://rainnn-w.github.io/posts/8ddf18fb.html</a></td>\n</tr>\n<tr>\n<td>crc32</td>\n<td>dec</td>\n<td><a href=\"https://rainnn-w.github.io/posts/1690090958.html\">https://rainnn-w.github.io/posts/1690090958.html</a></td>\n</tr>\n</tbody>\n</table>\n<ol start=\"4\">\n<li>修改文件后，执行以下代码部署到 <code>gitee</code>  即可！</li>\n</ol>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean \nhexo g\nhexo d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmN1Z2VyLmNuL3AvNjM0NjQyZmQvI0dpdEh1Yi1BY3Rpb24tJUU3JThFJUFGJUU1JUEyJTgzJUU1JThGJTk4JUU5JTg3JThGJUU5JTg1JThEJUU3JUJEJUFF\">Notion2Markdown 联动发布 Hexo 博客 - 自动化部署方案 | 遐说 (cuger.cn)</span></p>\n",
            "tags": []
        },
        {
            "id": "https://rainnn-w.github.io/posts/15691.html",
            "url": "https://rainnn-w.github.io/posts/15691.html",
            "title": "Linux",
            "date_published": "2022-12-18T05:42:41.000Z",
            "content_html": "<h3 id=\"一-linux基础\"><a class=\"anchor\" href=\"#一-linux基础\">#</a> 一、Linux 基础</h3>\n<h5 id=\"1简介\"><a class=\"anchor\" href=\"#1简介\">#</a> 1. 简介</h5>\n<ul>\n<li>\n<p>Linux 是多用户、多任务、抢占式操作系统，原著者 Linus，是开源操作系统</p>\n</li>\n<li>\n<p>基本组成：Kernel 内核、Shell 命令行、System Applications</p>\n<blockquote>\n<p>用户输入命令 -----shell 翻译 -----kernel</p>\n</blockquote>\n<ul>\n<li>Linux Kernel  Linux 操作系统的核心程序\n<ul>\n<li>管理程序的运行，为程序分配资源，并且处理程序之间的通信。</li>\n<li>管理对文件系统的读写，把对文件系统的操作映射成对磁盘或其它块设备的操作。</li>\n<li>管理存储器，为程序分配内存，并且管理虚拟内存。</li>\n<li>管理输入、输出，将设备映射成设备文件。</li>\n<li>管理网络。</li>\n</ul>\n</li>\n<li>Linux Shell\n<ul>\n<li>是一个命令解释器，是内核和用户之间的接口。</li>\n<li>是一个编程语言。(Shell script)</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>系统的启动过程:</p>\n<p>init -&gt; login -&gt; passwd -&gt; shell</p>\n</blockquote>\n<ul>\n<li>Linux 应用程序\n<ul>\n<li>标准的 Linux 系统都具有一整套称为应用程序的程序集，包括文本编辑器、Xwindow、办公套件、Internet 工具和数据库等。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>shell 提供内核的保护层</p>\n<ul>\n<li>对用户屏蔽内核的复杂性</li>\n<li>保护内核以免用户操作造成伤害</li>\n</ul>\n</li>\n<li>\n<p>系统各层次关系：</p>\n<ul>\n<li>硬件是实体工作者</li>\n<li>内核能够控制硬件工作</li>\n<li>shell 是用户与内核沟通的桥梁，是中间站</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281107205.png\" alt=\"2\"># !</p>\n</li>\n</ul>\n<h5 id=\"2基本命令\"><a class=\"anchor\" href=\"#2基本命令\">#</a> 2. 基本命令</h5>\n<p><strong>Linux 命令是大小写敏感的，不同于 Windows</strong></p>\n<ul>\n<li>\n<p>登录 退出</p>\n</li>\n<li>\n<p>exit 退出命令窗口</p>\n</li>\n<li>\n<p>&lt;Ctrl-d&gt; 中断当前的通信或从文件中退出。</p>\n</li>\n<li>\n<p>&lt;Ctrl-c&gt; 中断当前的命令并返回 Shell</p>\n</li>\n<li>\n<p>date 查看当前日期和时间</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Web Feb <span class=\"token number\">15</span> <span class=\"token number\">18</span>:45:46 PST <span class=\"token number\">2023</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p>CST：China Standard Time 中国标准时间</p>\n<p>PST ：Pitcairn Standard Time 太平洋标准时间</p>\n</li>\n<li>\n<p>date -s 设置日期 / 时间</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">date</span> <span class=\"token parameter variable\">-s</span> <span class=\"token number\">20041129</span>\n<span class=\"token function\">date</span> <span class=\"token parameter variable\">-s</span> <span class=\"token number\">12</span>:23:23\n<span class=\"token function\">date</span> <span class=\"token parameter variable\">-s</span> <span class=\"token string\">\"2004-11-29 12:23:23\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>cal 查看日历（默认当前年份 月份的月历）</p>\n<ul>\n<li>cal 年份 查看当年 12 个月日历</li>\n<li>cal 月份 年份 查看该年该月日历</li>\n</ul>\n</li>\n<li>\n<p>cal 仅显示当前月份日历</p>\n</li>\n</ul>\n<blockquote>\n<p>若只有一个数字，则被认为是年，并显示相应年的 12 个月的日历。</p>\n</blockquote>\n<ul>\n<li>\n<p>clear 清屏</p>\n</li>\n<li>\n<p>echo 在标准输出上显示字符串   <code>\\</code>  换行符</p>\n</li>\n<li>\n<p>who 查看当前用户及登陆时间</p>\n</li>\n<li>\n<p>whoami 查看当前用户</p>\n</li>\n<li>\n<p>ping 检测主机。使用 ICMP 传输协议，发出要求回应的信息</p>\n</li>\n<li>\n<p>mail</p>\n<ul>\n<li><code>mail &lt;username&gt; </code>  发送 E-mail</li>\n<li><code>mail  </code>  接收 E-mail</li>\n</ul>\n<blockquote>\n<p>一旦邮件被打开，其将被放 $HOME/mbox 目录中，若想再看这些信息则用：</p>\n<p><code>mail -f</code></p>\n</blockquote>\n</li>\n<li>\n<p>wall   将在系统中的所有在线用户的终端上显示信息，主要用于广播系统管理信息。</p>\n</li>\n<li>\n<p>write 发送信息  <code>write &lt;username&gt;</code>    用 &lt;ctrl-d&gt; 结束对话</p>\n</li>\n<li>\n<p>mesg 信息接收与否的开关命令</p>\n<p><code>mesg n</code>  拒绝消息   <code>mesg y</code>  允许接收消息</p>\n</li>\n<li>\n<p>man + 命令 查看具体命令的说明 （press q to quit）</p>\n</li>\n</ul>\n<blockquote>\n<p>超级用户 root，Shell 默认提示符：#</p>\n</blockquote>\n<blockquote>\n<p>普通用户，Shell 默认提示符：$</p>\n</blockquote>\n<p><pre class=\"line-numbers language-none\"><code class=\"language-none\">#useradd rainnn  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p>添加用户 rainnn</p>\n<p><pre class=\"line-numbers language-none\"><code class=\"language-none\">#deluser rainnn <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p>删除用户 rainnn</p>\n<h5 id=\"3知识点\"><a class=\"anchor\" href=\"#3知识点\">#</a> 3. 知识点</h5>\n<p>(1)  <code>&gt;</code>  表示覆盖原文件内容（文件的日期也会自动更新）</p>\n<p><code>&gt;&gt;   </code>  表示追加内容（会另起一行，文件的日期也会自动更新）</p>\n<p>(2) tty 终端机代号</p>\n<p>(3) 常见目录说明</p>\n<ul>\n<li>\n<p>/bin 存放二进制可执行文件 (ls,cat,mkdir 等)，常用命令一般都在这里。</p>\n</li>\n<li>\n<p>/etc 存放系统管理和配置文件</p>\n<p>/etc/shadow 存放用户口令的加密信息</p>\n</li>\n<li>\n<p>/home 存放所有用户文件的根目录，是用户主目录的基点。</p>\n<p>比如用户 user 的主目录就是 /home/user，可以用～user 表示。</p>\n</li>\n<li>\n<p>/usr 用于存放系统应用程序，比较重要的目录 /usr/local 本地系统管理员 软件安装目录（安装系统级的应用）。这是最庞大的目录，要用到的应用 程序和文件几乎都在这个目录。</p>\n<p>/usr/x11r6 存放 x window 的目录</p>\n<p>/usr/bin 众多的应用程序</p>\n<p>/usr/sbin 超级用户的一些管理程序</p>\n<p>/usr/doc linux 文档</p>\n<p>/usr/include linux 下开发和编译应用程序所需要的头文件</p>\n<p>/usr/lib 常用的动态链接库和软件包的配置文件</p>\n<p>/usr/man 帮助文档</p>\n<p>/usr/src 源代码，linux 内核的源代码就放在 /usr/src/linux</p>\n<p>/usr/local/bin 本地增加的命令</p>\n<p>/usr/local/lib 本地增加的库</p>\n</li>\n<li>\n<p>/dev 存放设备文件</p>\n</li>\n<li>\n<p>/mnt 系统管理员安装临时文件的安装点。</p>\n<p>系统提供这个目录是让用户临时挂载其他的文件系统。</p>\n</li>\n<li>\n<p>/tmp 存放各种临时文件，是公用的临时文件存储点。</p>\n</li>\n<li>\n<p>/var 存放运行时需要改变数据的文件，也是某些大文件的溢出区， 比方说各种服务的日志文件（系统启动日志等。）等。</p>\n</li>\n<li>\n<p>/opt 额外安装的可选应用程序包所放置的位置。</p>\n<p>一般情况下，我们可以把 tomcat 等都安装到这里。</p>\n</li>\n<li>\n<p>/boot 存放用于系统引导时使用的各种文件</p>\n</li>\n<li>\n<p>/proc 虚拟文件系统目录，是系统内存的映射。</p>\n<p>可直接访问这个目录来获取系统信息。</p>\n</li>\n<li>\n<p>/root 超级用户的目录</p>\n</li>\n</ul>\n<h3 id=\"二-文件系统\"><a class=\"anchor\" href=\"#二-文件系统\">#</a> 二、文件系统</h3>\n<blockquote>\n<p>文件系统：文件系统实现数据存储的物理（介质）独立性</p>\n<p>文件：是 Linux 用来存储信息的基本结构，它是被命名（称为文件名）的、存储在某种媒介（如磁盘、光盘和磁带等）上的一组信息的集合。</p>\n</blockquote>\n<h5 id=\"1文件名\"><a class=\"anchor\" href=\"#1文件名\">#</a> 1. 文件名</h5>\n<p>（1）文件名通常由字母、数字、“.”（点号）、“_”（下划线）或 “-”（减号）组成，文件名中不能含有 “/” 符号。</p>\n<p>（2）隐藏文件一般是以 “<strong>.</strong>” 符号开头</p>\n<p>（3）在文件名中的空格或制表符，在引用文件时必须用引号将其括起来；</p>\n<p>（4）大小写敏感</p>\n<p>（5）避免使用具有特别意义的字符： ?,*,@, #,$,&amp;,(,),,|,;,‘,“,`,&lt;,&gt;,[,] 等</p>\n<p>（6）避免使用 ‘+’和‘-‘符号作为文件名的第一个字符</p>\n<h5 id=\"2文件类型\"><a class=\"anchor\" href=\"#2文件类型\">#</a> 2. 文件类型</h5>\n<h6 id=\"1普通文件regular-file\"><a class=\"anchor\" href=\"#1普通文件regular-file\">#</a> （1）普通文件（regular file）</h6>\n<ul>\n<li>\n<p>二进制文件</p>\n</li>\n<li>\n<p>文本文件</p>\n</li>\n</ul>\n<h6 id=\"2目录文件directory-包含文件的容器用于存放目录中文件列表信息\"><a class=\"anchor\" href=\"#2目录文件directory-包含文件的容器用于存放目录中文件列表信息\">#</a> （2）目录文件（directory） 包含文件的容器，用于存放目录中文件列表信息</h6>\n<p>存储一组相关文件的位置、大小等与文件有关的信息，但它不包含具体的文件内容，因而和常规文件相比占用的磁盘空间很小。</p>\n<p>每一项 (entry) 主要表示的是一个文件名 (或子目录名) 以及文件的索引节点号 (i-node number ) 。</p>\n<p>索引节点号：指向该文件内容所在的数据块的位置，记录了该文件的属性</p>\n<p>通过 i-node 表与文件之间建立对应关系，目录文件是存放文件名唯一的地方，但文件名不放在 i-node 表中。</p>\n<h6 id=\"3设备文件device-file-在linux中设备被当作文件来处理\"><a class=\"anchor\" href=\"#3设备文件device-file-在linux中设备被当作文件来处理\">#</a> （3）设备文件（device file） 在 linux 中，设备被当作文件来处理</h6>\n<blockquote>\n<p>Everything is a file！</p>\n</blockquote>\n<h5 id=\"3目录组织\"><a class=\"anchor\" href=\"#3目录组织\">#</a> 3. 目录组织</h5>\n<ul>\n<li>访问一个文件或子目录时，首先访问他所在的目录，找到该文件的 i-node 值，然后再查找 i-node 表找出相应的 i-node 项，从而找到了相应的数据。</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281107402.png\" alt></p>\n<h5 id=\"u4操作命令u\"><a class=\"anchor\" href=\"#u4操作命令u\">#</a> &lt;u&gt;4.※操作命令 &lt;/u&gt;</h5>\n<ul>\n<li>\n<p>touch 创建文件</p>\n</li>\n<li>\n<p>cp 复制   <code>cp [-options] 源文件或目录  目的文件或目录</code></p>\n<ul>\n<li>-i：在覆盖文件之前提示用户，由用户确认.</li>\n<li>-R 或 - r：递归复制目录，即复制相应的目录及其所有子目录</li>\n</ul>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$cp</span> file1 file2\n<span class=\"token comment\">#在当前目录下拷贝文件 file1 的副本 file2，但若 file2 已存在，将覆盖 file2 的原有内容</span>\n<span class=\"token variable\">$cp</span> file1 directory1\n<span class=\"token comment\">#将文件 file1 拷贝到当前目录下的 directory1 目录下 (相对路径)</span>\n<span class=\"token variable\">$cp</span> preface doc props \n<span class=\"token comment\">#将文件 preface 和 doc 拷贝到 props 目录中</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#要将文件 myfile1 拷贝到 myfile1.bak </span>\n$ <span class=\"token function\">cp</span> myfile1 myfile1.bak\n<span class=\"token comment\">#要将文件 get.prd 从 /usr/local/sybin 目录拷贝到到 /usr/local/bin 目录</span>\n<span class=\"token variable\">$cp</span> /usr/local/sybin/get.prd   /usr/local/bin\n<span class=\"token comment\">#要将 /logs 目录下的所有文件及子目录拷贝到 /hold/logs 目录中</span>\n$ <span class=\"token function\">cp</span>  <span class=\"token parameter variable\">-r</span> /logs  /hold/logs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>\n<p>mv 移动或改名</p>\n<p><code>mv 原文件名 新文件名</code>  （改名）    <code>mv 文件名 路径名</code>  （移动）  <code>mv 文件名 路径/新文件名</code>  （移动并改名）</p>\n<ul>\n<li>-f 强制执行。直接覆盖已存在的目的文件，不显示覆盖前的询问讯息。</li>\n<li>-i 交互执行。当已存在同名的目标文件名时，在覆盖之前给出提示，由用户确认后才予以覆盖。</li>\n</ul>\n</li>\n<li>\n<p>rm 删除文件</p>\n<p><code>rm file1 file2 </code> （删除多个文件用空格隔开文件名）  <code>rm directory</code>  （删除目录）</p>\n<ul>\n<li>-f 强制执行</li>\n<li>-i 交互执行，在执行删除前提示确认</li>\n<li>-R 或 - r 递归的删除目录</li>\n</ul>\n</li>\n<li>\n<p>mkdir 创建目录（对其父目录必须有写权限）</p>\n<ul>\n<li>\n<p>-p 递归创建，即使路径上的文件夹本来不存在</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$mkdir</span> <span class=\"token parameter variable\">-p</span> test1/test2/test3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n</li>\n<li>\n<p>-m 指定权限</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$mkdir</span> <span class=\"token parameter variable\">-m</span> <span class=\"token number\">711</span> testqq\n<span class=\"token comment\">#drwx--x--x 2 test test 4096 Feb 6 20:48 testqq/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n</li>\n<li>\n<p>rmdir 删除目录 （对该目录的父目录必须有写权限，且该目录为空目录）</p>\n</li>\n<li>\n<p>whereis 显示文件目录</p>\n<blockquote>\n<p>whereis 找不到某个文件的部分原因可能是这个文件没有存在于任何 whereis 命令搜索的子目录中。whereis 命令检索的子目录是固定编写 在它的程序中的。</p>\n</blockquote>\n</li>\n<li>\n<p>locate 与 find -name 相同</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#查找 passwd 文件</span>\n<span class=\"token variable\">$locate</span> <span class=\"token function\">passwd</span>\n<span class=\"token comment\">#搜索 etc 目录下所有以 sh 开头的文件</span>\n<span class=\"token variable\">$locate</span> /etc/sh\n<span class=\"token comment\">#忽略大小写搜索当前用户目录下所有以 r 开头的文件 ：</span>\n<span class=\"token variable\">$locate</span> <span class=\"token parameter variable\">-i</span> ~/r<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>mount 挂接文件系统</p>\n<blockquote>\n<p>Linux 通过挂接（mount）一个文件系统将该新文件系统加入它的文件系统树中。所有的文件系统，不管是什么类型，都挂接在文件系统树的一个目录上并且该文件系统之上的文件将掩盖掉这个挂接目录中原来存在的内容。这个目录称为挂接目录或挂接点。当文件系统被卸掉之后，挂接目录中原来的文件才再次可见。</p>\n</blockquote>\n</li>\n<li>\n<p>ls</p>\n<ul>\n<li>\n<p>ls -a 显示全部文件（包括文件名以 “.” 开头的隐藏文件）</p>\n</li>\n<li>\n<p>ls 显示文件</p>\n</li>\n<li>\n<p>ls -l 显示长目录（文件的详细信息：文件的类型、操作权限、链接数、属主名、属组名、字节数、最近修改时间、文件名）</p>\n<blockquote>\n<p>每行的第一个字符表明文件的类型：</p>\n<ul>\n<li>\n<p>d 目录</p>\n</li>\n<li>\n<p>f 普通文件</p>\n</li>\n<li>\n<p>l 符号链接文件</p>\n</li>\n<li>\n<p>b 块设备文件</p>\n</li>\n<li>\n<p>c 字符设备文件</p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li>\n<p>ls -d 显示目录名而不显示其中的文件。</p>\n</li>\n<li>\n<p>ls -R 递归列出子目录（显示文件 + 目录下文件）</p>\n</li>\n<li>\n<p>ls -r 以逆序显示文件名列表</p>\n</li>\n<li>\n<p>ls -x 显示时以字母顺序</p>\n<p>(注：正常的显示顺序为按 ASCII 排序方式。)</p>\n</li>\n<li>\n<p>ls -color 用不同颜色区分文件类型</p>\n</li>\n</ul>\n<blockquote>\n<p>颜色含义为:</p>\n<p>绿色 ---&gt; 可执行文件</p>\n<p>蓝色 ---&gt; 目录</p>\n<p>红色 ---&gt; 压缩文件</p>\n<p>浅蓝色 -&gt; 连结文件</p>\n<p>灰色 ---&gt; 一般文件 (没有定义的文件)</p>\n<p>（颜色自定义可修改 <code>/etc/DIR_COLORS</code> ）</p>\n</blockquote>\n</li>\n<li>\n<p>cd 切换路径</p>\n</li>\n<li>\n<p>cat 将文件的文本内容一次全部显示在屏幕上</p>\n<ul>\n<li><code>cat -n filename</code>  打印行号</li>\n<li><code>cat -b filename</code>  打印行号，空行不编号</li>\n<li><code>cat filename </code> 打印文本内容（不包括行号）</li>\n<li>文件的合并、建立、覆盖和添加内容等\n<ul>\n<li><code>cat file1 file2 &gt;file</code>  将 file1 和 file2 合并到 file</li>\n<li><code>cat file1 &gt;&gt;file2</code>  将 file1 追加到 file2 的末尾</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>more  分屏显示文件内容。</p>\n<p>你可以随心所欲地在文本上上下移动。</p>\n<p>当 more 命令调用一个文件时，显示第一屏的文本。常用按键：</p>\n<ul>\n<li>\n<p>f 键或 &lt;Space&gt;: 进入下一页。</p>\n</li>\n<li>\n<p>b 键：前一页</p>\n</li>\n<li>\n<p>&lt;Enter&gt;: 向下移动一行</p>\n</li>\n<li>\n<p>q 键或 &lt;Ctrl+C&gt;: 退出。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>less</p>\n<p>less 工具也是对文件或其它输出进行分页显示的工具，应该说是 linux 正 统查看文件内容的工具，功能极其强大。less 的用法比起 more 更加的有弹 性。 在 more 的时候，我们并没有办法向前面翻， 只能往后面看，但若使 用了 less 时，就可以使用 [pageup] [pagedown] 等按 键的功能来往前 往后翻看文件，更容易用来查看一个文件的内容！除此之外，在 less 里头 可以拥有更多的搜索功能，不止可以向下搜，也可以向上搜。</p>\n</li>\n<li>\n<p>wc  统计文件中的字符数、单词数和行数   按以下顺序输出：</p>\n<p>行数  单词数  字符数  文件名</p>\n<p><code>wc [ -options] [ filename ]</code></p>\n<p>-c：显示字符数。</p>\n<p>-l：显示行数。</p>\n<p>-w：显示单词数。（单词是指由空格或 tabs 分开的最大字串。）</p>\n<p>（wc 等价于 wc -lwc）</p>\n</li>\n<li>\n<p>alias  别名  <code>alias 简称='代码'</code></p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$alias</span> <span class=\"token assign-left variable\">ls</span><span class=\"token operator\">=</span><span class=\"token string\">'ls --color=auto'</span> <span class=\"token comment\">#输入 ls 的时候就等同输入 ls --color=auto</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$unalias</span> <span class=\"token function\">cp</span> <span class=\"token comment\">#取消别名</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n</li>\n<li>\n<p>id  显示用户 id 以及群组 id</p>\n</li>\n<li>\n<p>df  (disk free) 显示目前在 Linux 系统 上的文件系统磁盘使用情况统计。</p>\n</li>\n</ul>\n<h5 id=\"5基本概念\"><a class=\"anchor\" href=\"#5基本概念\">#</a> 5. 基本概念</h5>\n<h6 id=\"1目录\"><a class=\"anchor\" href=\"#1目录\">#</a> （1）目录</h6>\n<ul>\n<li>\n<p>pwd 当前目录即当前工作目录  (print working directory)</p>\n</li>\n<li>\n<p>用户主目录：/home/rainnn   （~）   root 用户：/root</p>\n<blockquote>\n<p>cd 回到主目录</p>\n</blockquote>\n</li>\n<li>\n<p>绝对路径：指出从根目录到此文件的路径，一般来说由 / 符号开始。</p>\n</li>\n<li>\n<p>相对路径：指明从当前目录到此文件的路径</p>\n<blockquote>\n<p><code>.</code>  表示当前目录  <code>..</code>  表示当前目录的父目录</p>\n</blockquote>\n</li>\n<li>\n<p>$HOME 主目录</p>\n<p><code>echo $HOME</code>  查看自己的主目录</p>\n</li>\n</ul>\n<h6 id=\"2链接\"><a class=\"anchor\" href=\"#2链接\">#</a> （2）链接</h6>\n<p>** 链接文件:** 目录中每一对文件名称和索引节点号称为一个链接 (考)</p>\n<ul>\n<li>\n<p>符号链接（软链接） <strong>可跨文件系统 可以链接目录</strong></p>\n<ul>\n<li>以路径的形式存在，类似于 windows 操作系统中的快捷方式</li>\n<li>可以对一个不存在的文件名进行链接</li>\n<li>如果删除符号链接文件的源文件，符号链接文件将无法找到原有资料。</li>\n</ul>\n</li>\n<li>\n<p>硬链接 <strong>不可跨文件系统</strong></p>\n<ul>\n<li>以文件副本的形式存在，但不占用实际空间（ln 用于对一个已经存在的文件再创建一个新的链接，而不复制文件的内容。)</li>\n<li>原文件名和链接文件名都指向相同的物理位址。 （i-node number）</li>\n<li>不允许普通用户给目录创建硬链接</li>\n<li>如果删除硬链接文件的源文件，硬链接文件仍然存在，而且保留了原有的内容</li>\n<li>ln 后的链接文件名与物理文件具有相同的权限</li>\n</ul>\n</li>\n<li>\n<p>ln 命令</p>\n<ul>\n<li><code>ln -s abc linkabc </code> （为 abc 文件创建<strong>软链接</strong> linkabc，若 abc 丢失，linkabc 会失效）</li>\n<li><code>ln abc linkabc</code> （为 abc 创建<strong>硬链接</strong> linkabc，abc 与 linkabc 各项属性相同）</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"6权限控制\"><a class=\"anchor\" href=\"#6权限控制\">#</a> 6. 权限控制</h5>\n<blockquote>\n<p>多用户、多任务（此操作系统决定了常常会有多人同时使用这部主机工作），系统必须进行权限控制</p>\n<p>确定用户（或者说代表用户执行的程序）对某资源有或无某种操作的权力。</p>\n</blockquote>\n<h6 id=\"1用户类别\"><a class=\"anchor\" href=\"#1用户类别\">#</a> (1) 用户类别</h6>\n<ul>\n<li>文件所有者 u</li>\n</ul>\n<blockquote>\n<p>能够设定同组用户和其他用户对该文件的访问权限。一般来说是文件的创建者。</p>\n<p>保证每个人的隐私权</p>\n</blockquote>\n<ul>\n<li>同组用户 g</li>\n</ul>\n<blockquote>\n<p>具有相同性质的所有用户，被系统管理员分在同一组。文件所有者或系统管理员可将文件的权限赋予组内的其它用户。</p>\n<p>Linux 中每个用户至少属于一个用户组，以保证对一个用户组中的所有用户进行集中管理</p>\n</blockquote>\n<ul>\n<li>其他用户 o</li>\n</ul>\n<blockquote>\n<p>文件所有者或系统管理员还可以将文件的访问权赋予系统中所有其它的用户。这样，系统中每一位用户可能都能访问你的某一文件或目录。</p>\n</blockquote>\n<ul>\n<li>所有用户 a</li>\n</ul>\n<h6 id=\"2三种权限\"><a class=\"anchor\" href=\"#2三种权限\">#</a> （2）三种权限</h6>\n<ul>\n<li>\n<p>读 r: 4</p>\n</li>\n<li>\n<p>写 w: 2</p>\n</li>\n<li>\n<p>执行 x: 1</p>\n</li>\n<li>\n<p>-: 0</p>\n</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281108008.png\" alt></p>\n<h6 id=\"3权限判断\"><a class=\"anchor\" href=\"#3权限判断\">#</a> （3）权限判断</h6>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281108287.jpg\" alt></p>\n<blockquote>\n<p>ls -lR 查看目录内一文件的权限 (ls -lR 相当于 ls -l + ls -R  长列表显示文件 + 目录下文件)</p>\n</blockquote>\n<ul>\n<li>移动：文件所在目录具有 w 权限（移动文件其实不改变文件，是改变的目录）</li>\n<li>在目录下增删文件、子目录 (touch rm mkdir rmdir)：要有目录的 w 权限</li>\n<li>用 ls 列目录：要有目录的 r 权限</li>\n<li>进入目录或将该目录作路径分量时 (cd)：要有该文件路径上所有目录的 x 权限</li>\n<li>修改：文件有 w 权限，文件路径上所有目录有 x 权限</li>\n<li>拷贝：文件有 r 权限，文件路径上所有目录有 x 权限</li>\n</ul>\n<p>&lt;!-- 若文件在 /jobs/work 下，则需 jobs 目录和 work 目录均具有执行权限 --&gt;</p>\n<h6 id=\"4权限操作命令\"><a class=\"anchor\" href=\"#4权限操作命令\">#</a> （4）权限操作命令</h6>\n<ul>\n<li>\n<p><strong>chmod</strong></p>\n<ul>\n<li>\n<p><code>chmod a+r 文件名</code> （给所有用户加 r 权限）</p>\n</li>\n<li>\n<p><code>chmod u-r 文件名</code> （给文件所有者减 r 权限）</p>\n</li>\n<li>\n<p><code>chmod -R a+r  *</code> （将目录下所有文件与子目录皆设为任何人可读）</p>\n<p>&lt;!-- -R 意为递归 --&gt;</p>\n</li>\n<li>\n<p><code>chmod 771 file</code> （与 <code>chmod ug=rwx,o=x file</code>  效果相同）</p>\n</li>\n</ul>\n</li>\n<li>\n<p>chown 设置文件所有者和文件关联组</p>\n<ul>\n<li><code>chown [-options] user[：group] filelist</code></li>\n</ul>\n</li>\n<li>\n<p>user 表示将要改变的所有者用户名或用户 id</p>\n</li>\n<li>\n<p>group 表示将要改变的所属用户组名或组 id</p>\n<ul>\n<li><code>chown test test.txt</code>   把 test.txt 的所有者改为用户 test</li>\n</ul>\n</li>\n<li>\n<p>-R：递归改变目录及其内容的所属用户或用户组</p>\n</li>\n<li>\n<p><code>chown -R root:test testfloder1</code>  把 testfolder1 目录及目录下所有文件的所有者改为 root，所属用户组名改为 test</p>\n</li>\n<li>\n<p>su + 用户名 切换用户</p>\n</li>\n<li>\n<p>sudo 以系统管理员的身份执行指令</p>\n</li>\n</ul>\n<h5 id=\"7进程管理\"><a class=\"anchor\" href=\"#7进程管理\">#</a> 7. 进程管理</h5>\n<h6 id=\"1概念\"><a class=\"anchor\" href=\"#1概念\">#</a> （1）概念</h6>\n<ul>\n<li>程序是静态的，是保存在磁盘上的可执行代码和数据的集合</li>\n<li>进程（进程是程序执行的过程，是执行的程序）是动态的，是 Linux 系统的基本调度单位</li>\n<li>操作系统通过进程来控制对 CPU 和其他系统资源的访问，并且使用进程来决定在 CPU 上运行哪个程序、运行多久。</li>\n<li>Linux 重要特点：可以同时启动多个进程</li>\n</ul>\n<h6 id=\"2init进程\"><a class=\"anchor\" href=\"#2init进程\">#</a> （2）Init 进程</h6>\n<ul>\n<li>\n<p>内核启动后的第一个进程，其 PID=1</p>\n<p>（PID：进程号 一个 PID 唯一的标识一个进程）</p>\n</li>\n<li>\n<p><strong>init 进程永远不会被终止</strong>，扮演终结父进程的角色，所有进程追溯其祖先最终都会落到 init 进程身上。如果某个进程在它衍生出来的全部子进程结束之前被终止，此时那些失去了父进程的子进程就都会以 init 作为它们的父进程。</p>\n</li>\n</ul>\n<h6 id=\"3操作命令\"><a class=\"anchor\" href=\"#3操作命令\">#</a> （3）操作命令</h6>\n<ul>\n<li>\n<p>ps 显示当前进程的状态</p>\n<p>可以用它来确定有哪些进程正在运行以及运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等。<br>\n它显示的进程列表是一个静态列表，这个列表是在我们启动这个命令时正在运行的进程的快照。</p>\n<table>\n<thead>\n<tr>\n<th><strong>USER</strong></th>\n<th><strong>PID</strong></th>\n<th><strong>%CPU</strong></th>\n<th><strong>%MEM</strong></th>\n<th><strong>VSZ</strong></th>\n<th><strong>RSS</strong></th>\n<th><strong>TTY</strong></th>\n<th><strong>STAT</strong></th>\n<th><strong>START</strong></th>\n<th><strong>TIME</strong></th>\n<th><strong>COMMAND</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>进程所有者</td>\n<td>进程号</td>\n<td>对 cpu 的占用率</td>\n<td>对内存的占用率</td>\n<td>占用的虚拟内存大小</td>\n<td>占用的内存大小</td>\n<td>进程相关的终端设备</td>\n<td>进程状态 R：运行 S：中断 T：停止 D：不可中断 Z：僵死</td>\n<td>进程开始时间</td>\n<td>进程使用的总 cpu 时间</td>\n<td>被执行的命令行</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>top 动态地持续监听进程地运行状态</p>\n<ul>\n<li>d 设置刷新进程的时间间隔，你会被提示输入一个数（秒）</li>\n<li>q 退出 top 命令。</li>\n<li>k 杀死某进程。你会被提示输入进程 ID 以及要发 送给它的信号。</li>\n<li>h 显示帮助屏幕</li>\n<li>n 显示的进程数量。你会被提示输入数量。</li>\n<li>u 选择用户。</li>\n<li>M 按内存用量排序。</li>\n<li>P 按 CPU 用量排序。</li>\n</ul>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">top</span> <span class=\"token parameter variable\">-n</span> <span class=\"token number\">2</span>\n<span class=\"token comment\">#表示更新两次之后终止更新显示</span>\n<span class=\"token function\">top</span> <span class=\"token parameter variable\">-d</span> <span class=\"token number\">3</span>\n<span class=\"token comment\">#更新周期为 3 秒</span>\n<span class=\"token function\">top</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">139</span>\n<span class=\"token comment\">#显示进程号为 139 的进程信息，CPU、内存占用率等</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>kill 删除执行中的程序或工作  终止和挂起后台进程</p>\n</li>\n<li>\n<p>pgrep  查找进程的信息，默认只显示 PID (通常会和 kill 命令来连用，在指定条件下 kill 问题进程)</p>\n<p><code>kill PID</code>  (PID 可通过 ps 查看）或者 <code>kill %jobID</code>   （jobID 通过 jobs 查看）</p>\n<ul>\n<li>-f 匹配进程名</li>\n</ul>\n</li>\n<li>\n<p>jobs 用于显示和控制后台正在执行的和被挂起的任务序列。</p>\n</li>\n<li>\n<p><code>fg %jobID</code>  用于将后台运行的或 挂起 的任务（或作业）切换到前台运行</p>\n</li>\n<li>\n<p><code>bg %jobID</code>  使后台的任务继续运行</p>\n</li>\n<li>\n<p>nohup   (no hang up)（不挂起），用于在系统后台不挂断地运行命令，退出终端不会影响程序的运行   <code>nohup&#123;command|script&#125;</code>  {a|b}:a b 中必选一项</p>\n</li>\n<li>\n<p>前台进程：跟用户交互的</p>\n</li>\n<li>\n<p>后台进程 ：由后台启动的进程</p>\n<p>启动方法： <code>$command &amp;</code>    终止和挂起后台进程： <code>kill</code></p>\n</li>\n<li>\n<p>dmesg 显示开机信息</p>\n</li>\n</ul>\n<h3 id=\"三-vi编辑器\"><a class=\"anchor\" href=\"#三-vi编辑器\">#</a> 三、vi 编辑器</h3>\n<p>并不是一个排版程序，只是一个文本编辑程序。</p>\n<h5 id=\"1命令模式command-mode\"><a class=\"anchor\" href=\"#1命令模式command-mode\">#</a> 1. 命令模式 (Command mode)</h5>\n<h6 id=\"1进入命令模式\"><a class=\"anchor\" href=\"#1进入命令模式\">#</a> （1）进入命令模式</h6>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$vi</span> +n 文件名\n<span class=\"token comment\"># +[n]:</span>\n<span class=\"token comment\">#指明进入 vi 后直接位于文件的第 n 行</span>\n<span class=\"token comment\">#如果只有 “+” 而不指定 n, 则光标位于文本的最后一行</span>\n<span class=\"token comment\">#如果该文件不存在，会自动建立新文件。</span>\n<span class=\"token variable\">$vi</span> <span class=\"token parameter variable\">-R</span> 文件名\n<span class=\"token comment\">#以只读方式打开文件</span>\n<span class=\"token variable\">$vi</span> <span class=\"token parameter variable\">-r</span> 文件名\n<span class=\"token comment\">#恢复系统突然崩溃时正在编辑的文件。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>在任何模式下，按 &lt;Esc&gt; 键即可回到命令模式</li>\n</ul>\n<h6 id=\"2移动光标\"><a class=\"anchor\" href=\"#2移动光标\">#</a> （2）移动光标</h6>\n<ul>\n<li>最简单的方式是按键盘的上、下、左、右方向键<br>\n <code>nG</code> \t　跳到第 n 行<br>\n <code>G</code> \t\t  跳到最后一行<br>\n <code>0</code> \t\t  跳到行首<br>\n <code>$</code> \t\t  跳到行尾<br>\n <code>ctrl+b</code> \t  前移一页<br>\n <code>ctrl+f</code> \t  后移一页</li>\n</ul>\n<h6 id=\"3字符串搜索\"><a class=\"anchor\" href=\"#3字符串搜索\">#</a> （3）字符串搜索</h6>\n<p><code>/str1</code>       正向搜索字符串 str1<br>\n <code>?str2</code>       反向搜索字符串 str2<br>\n <code>n</code>           继续搜索，找出 str1 字符串下次出现的位置<br>\n <code>N</code>           反方向搜索</p>\n<h5 id=\"2输入模式insert-mode\"><a class=\"anchor\" href=\"#2输入模式insert-mode\">#</a> 2. 输入模式 (Insert mode)</h5>\n<h6 id=\"1进入输入模式\"><a class=\"anchor\" href=\"#1进入输入模式\">#</a> （1）进入输入模式</h6>\n<p>在命令模式下：</p>\n<ul>\n<li>&lt;i&gt; 在当前光标位置插入</li>\n<li>&lt;a&gt; 光标后一个位置插入</li>\n<li>&lt;o&gt; 光标下一行插入新的行</li>\n</ul>\n<h6 id=\"2输入模式下命令\"><a class=\"anchor\" href=\"#2输入模式下命令\">#</a> (2) 输入模式下命令</h6>\n<ul>\n<li>\n<p>&lt;x&gt; 删除光标所在处单个字符</p>\n</li>\n<li>\n<p>&lt;dd&gt; 删除当前光标所在行</p>\n</li>\n</ul>\n<h5 id=\"3底行模式last-line-mode\"><a class=\"anchor\" href=\"#3底行模式last-line-mode\">#</a> 3. 底行模式 (Last Line Mode)</h5>\n<h6 id=\"1进入底行模式\"><a class=\"anchor\" href=\"#1进入底行模式\">#</a> （1）进入底行模式</h6>\n<ul>\n<li>在命令模式下，按下 &lt;:&gt; 键</li>\n</ul>\n<h6 id=\"2移动光标-2\"><a class=\"anchor\" href=\"#2移动光标-2\">#</a> （2）移动光标</h6>\n<p><code>:n</code>    将光标移到第 n 行</p>\n<p><code>:+n </code>     将光标移动到当前行往下的第 n 行</p>\n<blockquote>\n<p><code>.</code>    -- 光标所在行的行号</p>\n<p><code>$</code>    -- 正文最后一行的行号</p>\n</blockquote>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">:.+5 <span class=\"token comment\">#将光标移动到当前行往下的第 5 行。</span>\n:345 <span class=\"token comment\">#将光标移到第 345 行</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n<h6 id=\"3字符串替换\"><a class=\"anchor\" href=\"#3字符串替换\">#</a> （3）字符串替换</h6>\n<p><code>[n1, n2]s/str1/str2/[g][c] </code>  在第 n1 行到 n2 行的范围内将字符串 str1 用 str2 代替</p>\n<ul>\n<li>\n<p>c 每次替换都由用户确认</p>\n</li>\n<li>\n<p>g 对行中搜索字符串的每次出现进行替换。</p>\n</li>\n<li>\n<p>不加 g 只对行中搜索字符串的首次出现进行替换</p>\n</li>\n</ul>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">:s/str1/str2/ \t\n<span class=\"token comment\">#用字符串 str2 替换该行中首次出现的字符串 str1 </span>\n:s/str1/str2/g \n<span class=\"token comment\">#用字符串 str2 替换该行中所有出现的字符串 str1 </span>\n:.,<span class=\"token variable\">$s</span>/str1/str2/g \n<span class=\"token comment\">#用字符串 str2 替换正文当前行 (.) 到末尾 ($) 所有出现的字符串 str1 </span>\n:1,<span class=\"token variable\">$s</span>/str1/str2/g\n<span class=\"token comment\">#用字符串 str2 替换正文中 (第一行到最后一行) 所有出现的字符串 str1 </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"4-保存\"><a class=\"anchor\" href=\"#4-保存\">#</a> （4） 保存</h6>\n<ul>\n<li>将编辑内容保存到原始文件</li>\n</ul>\n<p><pre class=\"line-numbers language-none\"><code class=\"language-none\">:w<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<ul>\n<li>将编辑内容写入 file 文件</li>\n</ul>\n<p><pre class=\"line-numbers language-none\"><code class=\"language-none\">:w file<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<h6 id=\"5退出\"><a class=\"anchor\" href=\"#5退出\">#</a> （5）退出</h6>\n<ul>\n<li>在未作修改的情况下退出</li>\n</ul>\n<p><pre class=\"line-numbers language-none\"><code class=\"language-none\">：q<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<ul>\n<li>放弃所有修改，强制退出</li>\n</ul>\n<p><pre class=\"line-numbers language-none\"><code class=\"language-none\">：q!<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<ul>\n<li>将编辑的内容写入原始文件并退出编辑程序</li>\n</ul>\n<p><pre class=\"line-numbers language-none\"><code class=\"language-none\">：wq<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281108140.png\" alt></p>\n<h6 id=\"6在vi内使用shell\"><a class=\"anchor\" href=\"#6在vi内使用shell\">#</a> (6) 在 vi 内使用 Shell</h6>\n<p><code>:! command</code></p>\n<h5 id=\"4vim和gvim\"><a class=\"anchor\" href=\"#4vim和gvim\">#</a> 4.Vim 和 gvim</h5>\n<ul>\n<li>Vim 代表 Vi IMproved，如同其名称所暗示的那样，Vim 作为标准 UNIX 系统 vi 编辑器的提高版而存在。 Vim 除提供和 vi 编辑器一样强大的功能外，还提供有多级恢复、命令行历史以及命令及文件名补全等功能。</li>\n<li>gvim 是 vi 的 X Window 版本，该版本支持鼠标选中，一些高级的光标移动功能，并且带有菜单和工具按钮。</li>\n</ul>\n<h3 id=\"四-shell\"><a class=\"anchor\" href=\"#四-shell\">#</a> 四、shell</h3>\n<blockquote>\n<p>shell 是一个命令行解释器，是内核与用户的接口</p>\n<p>也是一种程序设计语言（shell script）</p>\n<p>在用户登录后 shell 启动</p>\n</blockquote>\n<h4 id=\"一shell基础\"><a class=\"anchor\" href=\"#一shell基础\">#</a> （一）shell 基础</h4>\n<h5 id=\"1启动指定类型子shell\"><a class=\"anchor\" href=\"#1启动指定类型子shell\">#</a> 1. 启动指定类型子 shell</h5>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$shellname</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<h5 id=\"2退出子shell\"><a class=\"anchor\" href=\"#2退出子shell\">#</a> 2. 退出子 shell</h5>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$exit</span>\n<span class=\"token operator\">&lt;</span>Ctrl+D<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n<h5 id=\"3查看当前系统默认shell\"><a class=\"anchor\" href=\"#3查看当前系统默认shell\">#</a> 3. 查看当前系统默认 shell</h5>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$SHELL</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p>输出：/bin/bash</p>\n<h5 id=\"4变量\"><a class=\"anchor\" href=\"#4变量\">#</a> 4. 变量</h5>\n<blockquote>\n<p><strong>变量名</strong>只能是字母、数字、下划线的组合，不能以数字开头</p>\n<blockquote>\n<p>通常：</p>\n<p>大写字母为系统预设的变量</p>\n<p>小写字母用于用户自定义的变量</p>\n</blockquote>\n</blockquote>\n<h6 id=\"1赋值\"><a class=\"anchor\" href=\"#1赋值\">#</a> （1）赋值</h6>\n<ul>\n<li>变量名 = 值 或 {变量名 = 值} (无空格)</li>\n</ul>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">abc</span><span class=\"token operator\">=</span><span class=\"token number\">1234</span>  或   <span class=\"token punctuation\">&#123;</span>abc<span class=\"token operator\">=</span><span class=\"token number\">1234</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<ul>\n<li>若赋空值：</li>\n</ul>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">abc</span><span class=\"token operator\">=</span><span class=\"token string\">\"\"</span>\n<span class=\"token assign-left variable\">abc</span><span class=\"token operator\">=</span>\n<span class=\"token assign-left variable\">abc</span><span class=\"token operator\">=</span><span class=\"token string\">''</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>等号两边不能直接接单独的空格符</li>\n<li>如果变量所取的值中包含空格，必须使用引号将变量取值括起来</li>\n</ul>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">'my name'</span>\n<span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"my name\"</span>\n<span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span>my<span class=\"token punctuation\">\\</span> name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"2显示变量\"><a class=\"anchor\" href=\"#2显示变量\">#</a> （2）显示变量</h6>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$echo</span> <span class=\"token variable\">$abc</span> 或  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;abc&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<h6 id=\"3显示所有shell环境变量\"><a class=\"anchor\" href=\"#3显示所有shell环境变量\">#</a> （3）显示所有 Shell 环境变量</h6>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$set</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<h6 id=\"4清除变量\"><a class=\"anchor\" href=\"#4清除变量\">#</a> (4) 清除变量</h6>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$unset</span> abc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p>清除后变量的值为空</p>\n<h6 id=\"5从标准输入读入变量值read\"><a class=\"anchor\" href=\"#5从标准输入读入变量值read\">#</a> (5) 从标准输入读入变量值 read</h6>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$read</span> var1 var2 var3 \nHello my friends\n<span class=\"token comment\">#将 var1、var2、var3 的值分别设置为 Hello、my、friend</span>\n\n<span class=\"token variable\">$read</span> var1 var2 var3 \nHello my dear friends\n<span class=\"token variable\">$echo</span> <span class=\"token variable\">$var3</span>\ndear friends\n<span class=\"token comment\">#若读入的内容个数比变量多，则将多出的都赋给最后一个变量</span>\n\n<span class=\"token variable\">$read</span> var1 var2 var3\nHello friends \n<span class=\"token variable\">$echo</span> <span class=\"token variable\">$var3</span>\n$\n<span class=\"token comment\">#若变量比读入的内容个数多，则多出的变量将设为空值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"6全局环境变量\"><a class=\"anchor\" href=\"#6全局环境变量\">#</a> (6) 全局环境变量</h6>\n<blockquote>\n<p>传统上，所有全局环境变量均为大写</p>\n<p>可用于所有子进程</p>\n</blockquote>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">variable-name<span class=\"token operator\">=</span>value\n<span class=\"token builtin class-name\">export</span> variable-name\n<span class=\"token comment\">#与本地变量的赋值方式相同。</span>\n<span class=\"token comment\">#但赋值后必须将变量值导出，否则无法传递给子进程。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$env</span>\n<span class=\"token comment\">#显示所有环境变量</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n<p>Shell 中有一些预留的环境变量名，他们各有其用途，且不能用 作他用，称为嵌入 Shell 变量。</p>\n<ul>\n<li>\n<p>HOME 变量：</p>\n</li>\n<li>\n<p>保存用户主目录的完全路径名</p>\n<p><code>$echo $HOME</code></p>\n</li>\n<li>\n<p>LOGNAME 变量：</p>\n<ul>\n<li>保存登陆用户名</li>\n</ul>\n<p><code>$echo $LOGNAME </code></p>\n</li>\n<li>\n<p>PS1 变量：</p>\n<ul>\n<li>\n<p>保存主提示符</p>\n</li>\n<li>\n<p>基本提示符包含 Shell 提示符，缺省（系统默认状态的 意思）对超级用户为 #，其他为 $。可以使用任何符号作 提示符</p>\n<p><code>$ PS1=“HH-&gt;”</code></p>\n</li>\n</ul>\n</li>\n<li>\n<p>PATH 变量：</p>\n<ul>\n<li>保存进行命令或脚本查找的目录顺序，不同的目录路径 名之间用冒号分隔开。 <code>PATH=/bin:usr/bin:/etc:/home/team01/bin:. </code></li>\n<li>正确排列这个次序很重要，可以在执行命令时节省时间。</li>\n<li>加入新的查找路径：  <code>$PATH=$PATH:filelist $export PATH</code></li>\n</ul>\n</li>\n</ul>\n<h6 id=\"7特殊字符\"><a class=\"anchor\" href=\"#7特殊字符\">#</a> （7）特殊字符</h6>\n<ul>\n<li>\n<p>单引号</p>\n<ul>\n<li>\n<p>括起来的所有字符都作为普通字符出现</p>\n</li>\n<li>\n<p>特殊字符用单引号括起来后，也会失去原有意义，而只作为普通字符解释。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>双引号</p>\n<ul>\n<li>由双引号括起来的字符，除（$ \\ 引号）几种符号具有其特殊功能外，其余字符都作为普通字符对待</li>\n</ul>\n</li>\n<li>\n<p>反引号</p>\n<ul>\n<li>反引号括起来的内容被 Shell 解释为命令行</li>\n<li>执行时，Shell 首先执行该命令行，并用它的标准输出结果取代整个反引号（包括反引号括起来的部分）</li>\n<li>反引号可以与其它引号结合使用。</li>\n</ul>\n</li>\n</ul>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">abc</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token builtin class-name\">echo</span> The current user is <span class=\"token punctuation\">\\</span><span class=\"token variable\">`</span></span>whoami<span class=\"token punctuation\">\\</span>``  \n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$abc</span>\n<span class=\"token comment\">#The current user is test</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>\n<p>反斜线</p>\n<ul>\n<li>\n<p>如果下一个字符有特殊含义，反斜线屏蔽其特殊含义。</p>\n<p>下述字符包含有特殊意义： &amp; * + ^ $ ` &quot; | ?。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"8进程间变量的关系\"><a class=\"anchor\" href=\"#8进程间变量的关系\">#</a> （8）进程间变量的关系</h6>\n<ul>\n<li>\n<p>变量是进程运行环境的一个组成部分</p>\n</li>\n<li>\n<p>本地变量在各进程间是不能相互访问和修改的</p>\n</li>\n<li>\n<p>子进程不会自动地继承父进程中本地的变量</p>\n<p>export 命令：将变量的设置导出，使之能够传递给子进程</p>\n<p>环境变量的值只能传递给子进程，而不能传递给它所在的父进程</p>\n</li>\n</ul>\n<h6 id=\"9-profile\"><a class=\"anchor\" href=\"#9-profile\">#</a> (9) profile</h6>\n<p>/etc/profile：存放系统管理员设置的环境变量</p>\n<h5 id=\"5注释\"><a class=\"anchor\" href=\"#5注释\">#</a> 5. 注释</h5>\n<p>在 Shell 程序中以字符 # 开头的正文行表示注释行。</p>\n<h4 id=\"二shell进阶\"><a class=\"anchor\" href=\"#二shell进阶\">#</a> （二）shell 进阶</h4>\n<h5 id=\"1通配符\"><a class=\"anchor\" href=\"#1通配符\">#</a> 1. 通配符</h5>\n<blockquote>\n<p>用户可以在作为命令参数的文件名中包含这些元字符（通配符） 构成一个模式串。</p>\n<p>这样就可以按照所要求的模式来匹配文件名、路径名、字符串等。</p>\n</blockquote>\n<ul>\n<li>\n<p>* 通配符</p>\n<ul>\n<li>\n<p>匹配文件名中的任何字符串</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$ls</span> .*\n<span class=\"token comment\">#列出所有隐含文件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>在使用 cd 命令切换路径时，使用星号还可以省去输入整个路径名的麻烦</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$pwd</span>\n/home/student\n<span class=\"token variable\">$cd</span>  app*\n<span class=\"token variable\">$pwd</span>\n/home/student/app.1234567<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n</li>\n<li>\n<p>? 通配符</p>\n<ul>\n<li>\n<p>可以匹配文件名中的任何单个字符</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$ls</span> ??R*\n任意两个字符开头，第三个字符是R，后面跟任何字符的文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n</li>\n<li>\n<p>[...] 通配符</p>\n<ul>\n<li>\n<p>匹配方括号 [ ] 中指定范围内的字符</p>\n<p>可以使用横杠 - 来连接两个字母或数字，以表示范围</p>\n<p>例： <code>[a-z]</code></p>\n</li>\n<li>\n<p>[!...]</p>\n<p>匹配不在指定范围内的任何字符。</p>\n<p>例： <code>[!a-z]</code></p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#列出所有以 log 开头，后面跟任何单个字符，. 后面跟随任意一位数字、然后可以是任意字符串的文件名：</span>\n<span class=\"token variable\">$ls</span> log?.<span class=\"token punctuation\">[</span><span class=\"token number\">0</span>-9<span class=\"token punctuation\">]</span>*<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n</li>\n</ul>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#列出以 i 或 o 开头的文件名：</span>\n<span class=\"token variable\">$ls</span> <span class=\"token punctuation\">[</span>io<span class=\"token punctuation\">]</span>*\n<span class=\"token comment\">#列出以 a、b、c、d、m 中任一个字符开头的文件：</span>\n<span class=\"token variable\">$ls</span> <span class=\"token punctuation\">[</span>abcdm<span class=\"token punctuation\">]</span>* 或者 <span class=\"token variable\">$ls</span> <span class=\"token punctuation\">[</span>a-dm<span class=\"token punctuation\">]</span>* \n<span class=\"token comment\">#列出所有以 log. 开头、后面跟随任意一位数字、然后可以是任意字符串的文件名：</span>\n<span class=\"token variable\">$ls</span> log.<span class=\"token punctuation\">[</span><span class=\"token number\">0</span>-9<span class=\"token punctuation\">]</span>*\n<span class=\"token comment\">#列出所有以大写字母开头的文件名:</span>\n<span class=\"token variable\">$ls</span> <span class=\"token punctuation\">[</span>A-Z<span class=\"token punctuation\">]</span>*\n<span class=\"token comment\">#以。开头，最后一个字符可以是除 a 和 z 之外的任意字符的文件名:</span>\n<span class=\"token variable\">$ls</span> .*<span class=\"token punctuation\">[</span><span class=\"token operator\">!</span>za<span class=\"token punctuation\">]</span> \n<span class=\"token comment\">#列出所有以 LPS 开头、其后可以是任何两个字符，后面跟随一个非数字字符、然后是任意字符串的文件名:</span>\n<span class=\"token variable\">$ls</span> LPS？？<span class=\"token punctuation\">[</span>！0－9<span class=\"token punctuation\">]</span>*<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h5 id=\"2标准文件和文件描述符\"><a class=\"anchor\" href=\"#2标准文件和文件描述符\">#</a> 2. 标准文件和文件描述符</h5>\n<p>在 Shell 中执行命令的时候，每个进程都和三个打开的文件相联系，并使用文件 描述符来引用这些文件。</p>\n<h6 id=\"1文件描述符\"><a class=\"anchor\" href=\"#1文件描述符\">#</a> （1）文件描述符</h6>\n<ul>\n<li>输入文件 —　标准输入 – stdin    0  缺省是键盘，也可以是文件或其他命令的输出</li>\n<li>输出文件 —　标准输出 – stdout    1  缺省是屏幕，也可以是文件</li>\n<li>错误输出文件 — 标准错误输出 – stderr 2  缺省是屏幕，也可以是文件</li>\n</ul>\n<h6 id=\"2输入输出重定向\"><a class=\"anchor\" href=\"#2输入输出重定向\">#</a> （2）输入输出重定向</h6>\n<blockquote>\n<p>若要指定命令的标准输入、输出或错误输出，而不是使用缺省值，就需要使用文件重定向机制。</p>\n</blockquote>\n<p><code>Command operator file</code>   将输入、输出或错误重定向到某个文件中</p>\n<ul>\n<li>\n<p>输入重定向 &lt;</p>\n</li>\n<li>\n<p>输出重定向 &gt;    追加 &gt;&gt;</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$ls</span> <span class=\"token operator\">></span> directory.out\n<span class=\"token comment\">#将 ls 的内容写在（输出在）directory.out 文件中</span>\n<span class=\"token variable\">$cat</span> file1 file2 <span class=\"token operator\">></span> file3\n<span class=\"token comment\">#将 file1 file2 的内容一起写在 file3 中</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>错误重定向 2&gt;   将命令或程序执行的错误信息放到文件中</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#例：假设已经建立了文件 filea，但没有建立文件 fileb</span>\n<span class=\"token variable\">$cat</span> filea fileb\nThis is output from filea.\ncat: cannot <span class=\"token function\">open</span> fileb\n<span class=\"token comment\">#将命令或程序执行的错误信息放到文件中</span>\n<span class=\"token variable\">$cat</span> fila fileb <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span> errfile\nThis is output from filea.\n<span class=\"token variable\">$cat</span> errfile\ncat: cannot <span class=\"token function\">open</span> fileb\n\n<span class=\"token comment\">#/dev/null 是一个特殊的文件，始终为空文件  </span>\n<span class=\"token variable\">$cat</span> fila fileb <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span> /dev/null\n<span class=\"token comment\">#可以不显示任何错误信息</span>\n<span class=\"token comment\">#这个操作等同于把错误输出删除掉，而不输出。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n<h6 id=\"3重定向的结合应用\"><a class=\"anchor\" href=\"#3重定向的结合应用\">#</a> (3) 重定向的结合应用</h6>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Command <span class=\"token operator\">></span> outfile  <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span> errfile  <span class=\"token operator\">&lt;</span>  infile\n<span class=\"token comment\">#以 infile 为标准输入，将标准输出送到 outfile, 标准错误输出送到 errfile. </span>\nCommand <span class=\"token operator\">>></span> outfile  <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>>></span> errfile  <span class=\"token operator\">&lt;</span>  infile\n<span class=\"token comment\">#以 infile 为标准输入，将标准输出追加到 outfile, 标准错误输出追加到 errfile. </span>\nCommand <span class=\"token operator\">></span> outfile <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span>\n<span class=\"token comment\">#&amp;1 的含义就可以理解为用标准输出的引用，引用的就是重定向标准输出产生打开的 outfile</span>\n<span class=\"token comment\">#把标准输出和标准错误输出同时重定向到 outfile</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h5 id=\"3管道\"><a class=\"anchor\" href=\"#3管道\">#</a> 3. 管道</h5>\n<ul>\n<li>** 把一个命令在屏幕上的输出传递给另一个命令作为输入。** 用竖杠 | 表示。（把信息从一端传送到另外一端）</li>\n</ul>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">命令1 <span class=\"token operator\">|</span>命令2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p>例： <code>ls | wc -w</code>    <code>set | more</code></p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$ls</span> \naa Param set_dir spec_var spec_var2 <span class=\"token builtin class-name\">test</span>\n<span class=\"token variable\">$ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> –w\n<span class=\"token number\">6</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h5 id=\"4过滤和正则表达式\"><a class=\"anchor\" href=\"#4过滤和正则表达式\">#</a> 4. 过滤和正则表达式</h5>\n<blockquote>\n<p>当从一个文件或命令输出中抽取或过滤文本时，可以使用正则表达式</p>\n<p>以行为单位，来进行字符串的处理行为</p>\n</blockquote>\n<ul>\n<li><code>^d</code>           行首是 d 的行</li>\n<li><code>z$</code>           行尾字符为 z</li>\n<li><code>.</code>             只匹配任意单字符</li>\n<li><code>*</code>             前面的字符重复 0 到多次  代表任意多个字符</li>\n<li><code>[aA]</code>  \t a or A</li>\n<li><code>[a-f]</code> \ta 到 f</li>\n<li><code>[^0-9]</code>   非数字</li>\n<li><code>\\</code>              屏蔽其后的特殊字符的特殊含义</li>\n<li><code>\\.</code>            包含字符 <code>.</code>  的行</li>\n<li><code>\\&#123;n\\&#125; </code>      前导的正则表达式重复 n 次</li>\n<li><code>[0-9]\\&#123;3\\&#125;</code>   包含 3 个数字的行</li>\n<li><code>\\&#123;min,max\\&#125;</code>       前导的正则表达式重复 min~max 次</li>\n</ul>\n<blockquote>\n<p>注意：有些元字符虽然与 Shell 的通配符一样，但意义有所不同</p>\n</blockquote>\n<h5 id=\"5grep命令\"><a class=\"anchor\" href=\"#5grep命令\">#</a> 5.grep 命令</h5>\n<p>** 允许对文本文件的内容进行模式查找。** 如果找到匹配模式，grep 显示包含该模式的所有行。</p>\n<p>若指定了多个文件名，结果中会在每一行的前面显示文件名。</p>\n<p><code> grep [-option] pattern files</code></p>\n<ul>\n<li>-c 只输出匹配行的计数。</li>\n<li>-n 显示匹配行及行号。</li>\n<li>-v 显示不包含匹配文本的所有行。</li>\n<li>-w 只显示全字符合的列</li>\n</ul>\n<p>在 grep 命令中输入字符串参数时，最好将其用双引号括起来。</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#从以 phone 开头的文件中查找所有含 800 的行</span>\n<span class=\"token variable\">$grep</span> <span class=\"token string\">\"800\"</span> phone*<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n<p>在调用模式匹配时，应使用单引号。</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#从 phone1 文件中找开头不是 4 和 8 的行（可以是其他数字或字母、符号等）</span>\n<span class=\"token variable\">$grep</span> <span class=\"token string\">'^[^48]'</span> phone1\n<span class=\"token comment\">#从 phone1 文件中找开头为 44 的行</span>\n<span class=\"token variable\">$grep</span> ‘4<span class=\"token punctuation\">\\</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">&#125;</span>’ phone1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>可以与管道一起结合使用</li>\n</ul>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#显示当前目录下文件名以 abc 开头同时以 123 结尾的文件。</span>\n<span class=\"token variable\">$ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"^abc.*123$\"</span>\n<span class=\"token comment\">#查看所有类型为 “目录” 的文件：</span>\n<span class=\"token variable\">$ls</span> –l <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> ‘^d’\n<span class=\"token comment\">#查看所有类型为 “目录”, 且组成员及其他用户对其具有执行权限的文件：</span>\n<span class=\"token variable\">$ls</span> –l <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> ‘^d<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.x<span class=\"token punctuation\">..</span>x’\n\n<span class=\"token comment\">#显示匹配 pattern1 或 pattern2 的行</span>\n<span class=\"token variable\">$grep</span> pattern1 <span class=\"token operator\">|</span> pattern2 files \n<span class=\"token comment\">#显示既匹配 pattern1 又匹配 pattern2 的行。</span>\n<span class=\"token variable\">$grep</span> pattern1 files <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> pattern2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h5 id=\"6find命令\"><a class=\"anchor\" href=\"#6find命令\">#</a> 6.find 命令</h5>\n<p><code>find path expression [-exec -ok] [command] &#123;&#125; \\</code></p>\n<ul>\n<li>\n<p>path：所查找的目录路径，对目录的搜索是递归的。<br>\n. 表示当前目录     / 表示系统根目录。</p>\n</li>\n<li>\n<p>expression 项：希望查询的文件的匹配标准或说明</p>\n<ul>\n<li>\n<p>-name file   寻找名为 file 的文件，要找的文件名包括在引号中，可以使用通配符。</p>\n<p><code>$find . -name &quot;*.txt&quot;</code>   在当前目录及子目录中查找所有的 .txt 文件</p>\n</li>\n<li>\n<p>-user name  按照文件属主来查找文件</p>\n<p><code>$find /etc -user uucp </code>   在 /etc 目录下查找文件属主为 uucp 的文件</p>\n</li>\n<li>\n<p>-group name 按照文件所属的组来查找文件</p>\n</li>\n<li>\n<p>-type type  查找某一类型的文件 (b、c、d、f、l)</p>\n<p>d：目录文件   f：普通文件</p>\n</li>\n<li>\n<p>-size n [c]  查找文件长度为 n 块 (block) 的文件，带有 c 时表示文件长度以字节计。</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#在当前目录下查找文件长度大于 1M 字节的文件：</span>\n<span class=\"token variable\">$find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-size</span> +1000000c\n<span class=\"token comment\">#为了在当前目录下查找长度超过 10block 的文件（1 个 block 等于 512 字节）：</span>\n<span class=\"token variable\">$find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-size</span> +10<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>-mtime n  按照文件的更改时间来查找文件</p>\n<p><code>-n</code> \t        最后的更改时间在 n 天以内。<br>\n <code>n , +n</code>    更改时间距现在 n 天以上。</p>\n</li>\n<li>\n<p>-perm 权限</p>\n</li>\n</ul>\n</li>\n<li>\n<p>-exec    find 命令对匹配的文件执行该参数所给出的 Shell 命令 command。</p>\n</li>\n<li>\n<p>-ok     和 - exec 的作用相同，只是在执行每一个命令之前，都会给出提示，让用户来确定是否执行。如果用户不回应 'y' 或 'Y'，command 将不予以执行，并回应 false。</p>\n</li>\n</ul>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"*.LOG\"</span> <span class=\"token parameter variable\">-mtime</span> +5 <span class=\"token parameter variable\">-ok</span> <span class=\"token function\">rm</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token comment\">#find 命令在当前目录中查找所有文件名以.LOG 结尾、更改时间在 5 日以上的文件，并删除它们。</span>\n<span class=\"token variable\">$find</span> <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"*.c\"</span> \n<span class=\"token comment\">#将.c 结尾的文件全部找出</span>\n<span class=\"token variable\">$find</span> / <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-size</span> <span class=\"token number\">0</span> <span class=\"token parameter variable\">-exec</span> <span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token comment\">#查找系统中所有（/）长度为 0 的普通文件，并列出其完整路径</span>\n<span class=\"token variable\">$find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-perm</span> <span class=\"token number\">644</span> <span class=\"token parameter variable\">-exec</span> <span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token comment\">#查找权限为 644 的文件</span>\n<span class=\"token variable\">$find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"*.txt\"</span> \n<span class=\"token comment\">#想要在当前目录及子目录中查找所有的 .txt 文件</span>\n<span class=\"token variable\">$find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"[A-Z]*\"</span>\n<span class=\"token comment\">#在当前目录及子目录中查找文件名以任一个大写字母开头的文件</span>\n<span class=\"token variable\">$find</span> /etc <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"host*\"</span>\n<span class=\"token comment\">#想要在 /etc 目录中查找文件名以 host 开头的文件</span>\n<span class=\"token variable\">$find</span> / <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"*\"</span>\n<span class=\"token comment\">#想要查找根目录下的文件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h5 id=\"7sort-命令\"><a class=\"anchor\" href=\"#7sort-命令\">#</a> 7.sort 命令</h5>\n<p>将以默认的方式将文本文件的第一列以 ASCII 码的次序排列，并将结果输出到标准输出。</p>\n<h5 id=\"8-命令组-命令换行\"><a class=\"anchor\" href=\"#8-命令组-命令换行\">#</a> 8. 命令组 命令换行</h5>\n<ul>\n<li>\n<p>多个命令在一行输入时，用 “;” 作为命令间分隔符。</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$ls</span> –R <span class=\"token operator\">></span> outfile <span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">exit</span>\n<span class=\"token variable\">$ls</span> –R <span class=\"token operator\">></span> outfile\n<span class=\"token variable\">$exit</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>可通过加 \\ 的方式来进行换行拆分。</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$cat</span> /home/mydir/mysubdir/mydata <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> /home/yourdir/yourdata<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n<h5 id=\"9和\"><a class=\"anchor\" href=\"#9和\">#</a> 9.&amp;&amp; 和 ||</h5>\n<ul>\n<li>\n<p>命令 1 &amp;&amp; 命令 2</p>\n<p>只有命令 1 为真 (即成功被执行，返回 0），命令 2 才能够被执行</p>\n<p><code>$ ls s*  &amp;&amp;  rm s*</code></p>\n</li>\n<li>\n<p>命令 1 || 命令 2<br>\n 如果命令 1 执行失败，那么就执行命令 2。</p>\n<p><code>$cd /dir1 || echo cannot change to /dir1</code></p>\n</li>\n<li>\n<p><code>$test expression &amp;&amp; 命令1 || 命令2</code>   若 expression 为真，则执行命令 1，否则执行命令 2</p>\n</li>\n</ul>\n<h5 id=\"10算术\"><a class=\"anchor\" href=\"#10算术\">#</a> 10. 算术</h5>\n<h6 id=\"1shell的算数扩展\"><a class=\"anchor\" href=\"#1shell的算数扩展\">#</a> （1）shell 的算数扩展</h6>\n<p><code>$((expression))</code></p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$i</span><span class=\"token operator\">=</span><span class=\"token number\">2</span>\n<span class=\"token variable\">$echo</span> <span class=\"token number\">2</span>*<span class=\"token variable\">$i</span>+1\n<span class=\"token variable\">$echo</span>  <span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token variable\">))</span></span>\n<span class=\"token comment\">#算术扩展中包含的只有变量、运算符和常数  i 前没有 $ 符号</span>\n<span class=\"token comment\">#表达式内的变量若未定义，则当作其值为 0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$i</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> \n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>i<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token variable\">))</span></span>  <span class=\"token comment\">#1</span>\n<span class=\"token comment\">#算术扩展可以用来判断真假 (1 为真，0 为假)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"2expr命令\"><a class=\"anchor\" href=\"#2expr命令\">#</a> （2）expr 命令</h6>\n<blockquote>\n<p>用于进行整数运算</p>\n</blockquote>\n<ul>\n<li>\n<p>表达式由操作数和运算符组成。操作数一般是整数，也可以是字符串</p>\n</li>\n<li>\n<p><strong>表达式的各部分 (操作数和运算符之间) 必须以空格分隔</strong>！！！</p>\n</li>\n<li>\n<p>表达式中某些对 shell 有特殊意义的字符必须转义</p>\n</li>\n</ul>\n<p><code>+</code>  加法</p>\n<p><code>-</code>  减法</p>\n<p><code>\\*</code>  乘法</p>\n<p><code>/</code>  整除</p>\n<p><code>%</code>  求模 (余数)</p>\n<p><code>=</code>  相等</p>\n<ul>\n<li>\n<p>可以使用反引号改变计算次序</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$expr</span> <span class=\"token number\">5</span> + <span class=\"token number\">7</span> / <span class=\"token number\">3</span>  <span class=\"token comment\">#7</span>\n<span class=\"token variable\">$expr</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> <span class=\"token number\">5</span> + <span class=\"token number\">7</span><span class=\"token variable\">`</span></span> / <span class=\"token number\">3</span>  <span class=\"token comment\">#4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n<blockquote>\n<p>注意，expr 中括号是不可用的。请用 ``(反括号)</p>\n<p><s> <code>expr 3 * (2 + 1) </code> </s></p>\n<p>bash: syntax error near unexpected token `('</p>\n</blockquote>\n</li>\n<li>\n<p>expr 命令还可用于字符串测试。</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$s1</span><span class=\"token operator\">=</span>“hello”\n<span class=\"token variable\">$expr</span>  <span class=\"token variable\">$s1</span> <span class=\"token operator\">=</span> “hello”\n<span class=\"token comment\">#1 真</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n<h5 id=\"11test命令\"><a class=\"anchor\" href=\"#11test命令\">#</a> 11.test 命令</h5>\n<blockquote>\n<p>用于测试一种或几种条件</p>\n</blockquote>\n<h6 id=\"1格式\"><a class=\"anchor\" href=\"#1格式\">#</a> （1）格式</h6>\n<ul>\n<li>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">test</span> expression</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--code￼54--<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n</ul>\n<p>使用方括号时，要注意<strong>在条件两边加上空格</strong>。涉及到变量值（$variable）的比较时最好把变量取值用双引号括起来，以免 Shell 误解变量值。</p>\n<h6 id=\"2输出\"><a class=\"anchor\" href=\"#2输出\">#</a> （2）输出</h6>\n<blockquote>\n<p>测试结果反映在退出状态中，而不是直接显示输出</p>\n<p><code>$echo $?</code></p>\n</blockquote>\n<ul>\n<li>条件为真：退出状态为 0</li>\n<li>条件为假：退出状态非 0</li>\n</ul>\n<h6 id=\"3操作符\"><a class=\"anchor\" href=\"#3操作符\">#</a> （3）操作符</h6>\n<p>①字符串操作符</p>\n<ul>\n<li>str1 = str2  字符串相等</li>\n<li>str1 != str2  字符串不相等</li>\n<li>str  字符串非空</li>\n</ul>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$str1</span><span class=\"token operator\">=</span>abcd \n<span class=\"token variable\">$str2</span><span class=\"token operator\">=</span><span class=\"token string\">\"abcd \"</span>\n<span class=\"token variable\">$test</span> <span class=\"token string\">\"<span class=\"token variable\">$str1</span>\"</span>\n$<span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$str1</span>\"</span> <span class=\"token punctuation\">]</span>\n<span class=\"token variable\">$echo</span> <span class=\"token variable\">$?</span> <span class=\"token comment\">#测试 $str1 是否非空（非空则 0）</span>\n<span class=\"token number\">0</span>\n<span class=\"token variable\">$test</span> <span class=\"token string\">\"<span class=\"token variable\">$str1</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token variable\">$str2</span>\"</span> \n$<span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$str1</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token variable\">$str2</span>\"</span> <span class=\"token punctuation\">]</span>\n<span class=\"token variable\">$echo</span> <span class=\"token variable\">$?</span> <span class=\"token comment\">#判断是否相等</span>\n<span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>②整数操作符</p>\n<ul>\n<li>int1 -eq int2    数值相等</li>\n<li>int1 -ne int2    数值不等</li>\n<li>int1 -lt int2      int1&lt;int2</li>\n<li>int1 -gt int2     int1&gt;int2</li>\n<li>int1 -le int2     int1&lt;=int2</li>\n<li>int1 -ge int2    int1&gt;=int2</li>\n</ul>\n<p>&lt;!-- 当 string 和 int 比较时，看操作符。--&gt; 例：</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$str1</span><span class=\"token operator\">=</span><span class=\"token number\">1234</span>  \n<span class=\"token variable\">$str2</span><span class=\"token operator\">=</span>01234  \n$<span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$str1</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token variable\">$str2</span>\"</span> <span class=\"token punctuation\">]</span> \n<span class=\"token variable\">$echo</span> <span class=\"token variable\">$?</span> <span class=\"token comment\">#1（字符串比较） 不相等 </span>\n$<span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$str1</span>\"</span> –eq <span class=\"token string\">\"<span class=\"token variable\">$str2</span>\"</span> <span class=\"token punctuation\">]</span>  \n<span class=\"token variable\">$echo</span> <span class=\"token variable\">$?</span> <span class=\"token comment\">#0（数值比较） 相等</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>③文件操作符：测试文件状态</p>\n<ul>\n<li>-e file  文件 file 存在</li>\n<li>-d file  文件 file 是一个目录</li>\n<li>-f file  文件 file 是一个普通文件</li>\n<li>-s file  文件 file 大小不为 0</li>\n<li>-r file  可读（对文件所有者的权限）</li>\n<li>-w file  可写（对文件所有者的权限）</li>\n<li>-x file  可执行（对文件所有者的权限）</li>\n</ul>\n<p>④逻辑操作符：测试多个条件的与或组合</p>\n<ul>\n<li>-a 逻辑与</li>\n<li>-o 逻辑或</li>\n<li>! 逻辑非</li>\n</ul>\n<h4 id=\"三shell脚本\"><a class=\"anchor\" href=\"#三shell脚本\">#</a> （三）shell 脚本</h4>\n<h5 id=\"1编写方法\"><a class=\"anchor\" href=\"#1编写方法\">#</a> 1. 编写方法</h5>\n<h6 id=\"1创建文件\"><a class=\"anchor\" href=\"#1创建文件\">#</a> （1）创建文件</h6>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> test<span class=\"token punctuation\">(</span>文件名<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<h6 id=\"2编辑内容\"><a class=\"anchor\" href=\"#2编辑内容\">#</a> （2）编辑内容</h6>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vi</span> test（文件名） //进入vi编辑编辑器\n<span class=\"token comment\">#！/bin/bash// 告诉系统用什么解释器来执行该脚本，用哪一种 shell</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n<h6 id=\"3运行shell脚本\"><a class=\"anchor\" href=\"#3运行shell脚本\">#</a> （3）运行 shell 脚本</h6>\n<ul>\n<li>\n<p><code>bash</code>    或   <code>.</code></p>\n</li>\n<li>\n<p><strong>用户对该文件具有 x 和 r 权限</strong></p>\n</li>\n</ul>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#bash  这种运行方式是启动了一个子 Shell（在后台执行）</span>\n<span class=\"token variable\">$cat</span> set_dir\n<span class=\"token assign-left variable\">dir1</span><span class=\"token operator\">=</span>/tmpf\n<span class=\"token assign-left variable\">dir2</span><span class=\"token operator\">=</span>/usr\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$dir1</span>  <span class=\"token variable\">$dir2</span>\n<span class=\"token variable\">$bash</span> set_dir\n/tmp  /usr\n<span class=\"token variable\">$echo</span> <span class=\"token variable\">$dir1</span> <span class=\"token variable\">$dir2</span>\n空行\n<span class=\"token comment\"># .  </span>\n<span class=\"token variable\">$cat</span> set_dir\n<span class=\"token assign-left variable\">dir1</span><span class=\"token operator\">=</span>/tmp\n<span class=\"token assign-left variable\">dir2</span><span class=\"token operator\">=</span>/usr\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$dir1</span>    <span class=\"token variable\">$dir2</span>\n$. set_dir\n/tmp  /usr\n<span class=\"token variable\">$echo</span> <span class=\"token variable\">$dir1</span>\n/tmp  \n<span class=\"token variable\">$echo</span> <span class=\"token variable\">$dir2</span>\n/usr<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h5 id=\"2流程控制\"><a class=\"anchor\" href=\"#2流程控制\">#</a> 2. 流程控制</h5>\n<h6 id=\"1if\"><a class=\"anchor\" href=\"#1if\">#</a> （1）IF</h6>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">..</span>.\n<span class=\"token keyword\">then</span> \n\t<span class=\"token punctuation\">..</span>.\n<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">..</span>.\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">..</span>.\n<span class=\"token keyword\">then</span>\n\t<span class=\"token punctuation\">..</span>.\nelif<span class=\"token punctuation\">..</span>.\n<span class=\"token keyword\">then</span>\n\t<span class=\"token punctuation\">..</span>.\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"2case\"><a class=\"anchor\" href=\"#2case\">#</a> （2）case</h6>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">case</span> 值 <span class=\"token keyword\">in</span>\n匹配值1<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">..</span>.\n\t<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n匹配值2<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">..</span>.\n\t<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">esac</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"3for\"><a class=\"anchor\" href=\"#3for\">#</a> （3）for</h6>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">for</span> 变量 <span class=\"token keyword\">in</span> item1 item2 item3 <span class=\"token punctuation\">..</span>. itemN\n<span class=\"token keyword\">do</span>\n\t<span class=\"token punctuation\">..</span>.\n\t<span class=\"token punctuation\">..</span>.\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">sta</span> <span class=\"token keyword\">in</span> Alabama Alaska Arizona California\n<span class=\"token keyword\">do</span>\n\t<span class=\"token builtin class-name\">echo</span>  The next state is <span class=\"token variable\">$sta</span>\n<span class=\"token keyword\">done</span> \n\nThe next state is Alabama\nThe next state is Alaska\nThe next state is Arizona\nThe next state is California<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>也支持 java 类似的循环方式</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">do</span>\n\t<span class=\"token punctuation\">..</span>.\n\t<span class=\"token punctuation\">..</span>.\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"4while\"><a class=\"anchor\" href=\"#4while\">#</a> （4）while</h6>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">while</span> condition\n<span class=\"token keyword\">do</span>\n\t<span class=\"token punctuation\">..</span>.\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"5until\"><a class=\"anchor\" href=\"#5until\">#</a> （5）until</h6>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">until</span> condition\n<span class=\"token keyword\">do</span>\n    <span class=\"token punctuation\">..</span>.\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>如果条件不成立，则进入循环，执行循环体中语句直到条件成立，结束循环</p>\n<h5 id=\"3执行时传递参数\"><a class=\"anchor\" href=\"#3执行时传递参数\">#</a> 3. 执行时传递参数</h5>\n<p>（1）位置变量参数</p>\n<ul>\n<li>\n<p>$0 执行的文件名（包含文件路径） （指命令对应的可执行名）</p>\n</li>\n<li>\n<p>$1 第一个参数  $2 第二个参数  $3 第三个参数 ...</p>\n<p>其中 1-9 是真正的参数名（变量名）,“$” 符只是用来标识变量的替换。 第九个以后的参数都不会被访问。</p>\n</li>\n</ul>\n<p>（2）特定变量参数</p>\n<ul>\n<li>$# 传递到脚本的参数个数</li>\n<li>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>脚本运行的当前</mtext><mi>s</mi><mi>h</mi><mi>e</mi><mi>l</mi><mi>l</mi><mtext>的</mtext><mi>P</mi><mi>I</mi><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">   脚本运行的当前shell的PID\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">脚</span><span class=\"mord cjk_fallback\">本</span><span class=\"mord cjk_fallback\">运</span><span class=\"mord cjk_fallback\">行</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">当</span><span class=\"mord cjk_fallback\">前</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span></span></p>\n</li>\n<li>$* 传递的参数作为一个字符串显示</li>\n<li>$@</li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∗</mo><mtext>和</mtext></mrow><annotation encoding=\"application/x-tex\">*和</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">∗</span><span class=\"mord cjk_fallback\">和</span></span></span></span> @区别：</p>\n<blockquote>\n<p>只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，则 &quot;*&quot; 等价于 “1 2 3”（传递了一个参数），而 “@” 等价于 “1” “2” “3”（传递了三个参数）。</p>\n</blockquote>\n<p>传参方法：</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">bash</span> <span class=\"token builtin class-name\">test</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p><img data-src=\"D:%5CFiles%5CStudy%5CLinux%5CLinux%5C6.png\" alt=\"image-20230216154411270\"></p>\n<h5 id=\"4读入参数\"><a class=\"anchor\" href=\"#4读入参数\">#</a> 4. 读入参数</h5>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">read</span> i<span class=\"token punctuation\">(</span>变量名<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<h5 id=\"5sleep\"><a class=\"anchor\" href=\"#5sleep\">#</a> 5.sleep</h5>\n<blockquote>\n<p>将目前动作延迟一段时间。</p>\n</blockquote>\n<p><code>sleep 60s</code>   停 60s</p>\n<p><code>sleep 5m</code>  停 5min</p>\n<p>s 为秒，m 为 分钟，h 为小时，d 为日数</p>\n<h3 id=\"五-例题\"><a class=\"anchor\" href=\"#五-例题\">#</a> 五、例题</h3>\n<h4 id=\"一shell编程\"><a class=\"anchor\" href=\"#一shell编程\">#</a> （一）shell 编程</h4>\n<h5 id=\"1计算两个正整数的最大公约数\"><a class=\"anchor\" href=\"#1计算两个正整数的最大公约数\">#</a> 1. 计算两个正整数的最大公约数</h5>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token builtin class-name\">read</span> num1\n<span class=\"token builtin class-name\">read</span> num2\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$num1</span> <span class=\"token parameter variable\">-ne</span> <span class=\"token variable\">$num2</span> <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">do</span> \n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$num1</span> <span class=\"token parameter variable\">-gt</span> <span class=\"token variable\">$num2</span> <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">then</span>\n<span class=\"token assign-left variable\">num1</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span>num1 <span class=\"token operator\">-</span> num2<span class=\"token variable\">))</span></span> \n<span class=\"token keyword\">else</span>\n<span class=\"token assign-left variable\">num2</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span>num2 <span class=\"token operator\">-</span> num1<span class=\"token variable\">))</span></span>\n<span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">done</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$num1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h5 id=\"2给出输入的一系列整数输入0停止输入的最大数-第二最大数\"><a class=\"anchor\" href=\"#2给出输入的一系列整数输入0停止输入的最大数-第二最大数\">#</a> 2. 给出输入的一系列整数（输入 0 停止输入）的最大数、第二最大数</h5>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token builtin class-name\">read</span> n\n<span class=\"token assign-left variable\">max</span><span class=\"token operator\">=</span><span class=\"token variable\">$n</span>\n<span class=\"token assign-left variable\">sMax</span><span class=\"token operator\">=</span><span class=\"token variable\">$n</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$n</span> <span class=\"token parameter variable\">-ne</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">do</span>\n<span class=\"token builtin class-name\">read</span> n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$n</span> <span class=\"token parameter variable\">-gt</span> <span class=\"token variable\">$max</span> <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">then</span>\n<span class=\"token assign-left variable\">sMax</span><span class=\"token operator\">=</span><span class=\"token variable\">$max</span>\n<span class=\"token assign-left variable\">max</span><span class=\"token operator\">=</span><span class=\"token variable\">$n</span>\n<span class=\"token keyword\">elif</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$n</span> <span class=\"token parameter variable\">-gt</span> <span class=\"token variable\">$sMax</span> <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">then</span>\n<span class=\"token assign-left variable\">sMax</span><span class=\"token operator\">=</span><span class=\"token variable\">$n</span>\n<span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">done</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$max</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$sMax</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h5 id=\"3写一个shell脚本每隔10秒检查当前系统中有没有进程名字为firefox的进程如果有的话显示firefox-进程出现了并退出返回码设置为等待的秒数\"><a class=\"anchor\" href=\"#3写一个shell脚本每隔10秒检查当前系统中有没有进程名字为firefox的进程如果有的话显示firefox-进程出现了并退出返回码设置为等待的秒数\">#</a> 3. 写一个 shell 脚本，每隔 10 秒，检查当前系统中有没有进程名字为 “firefox” 的进程，如果有的话显示 “firefox 进程出现了！” 并退出，返回码设置为等待的秒数。</h5>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">do</span>\nprocess <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">`</span>pgrep <span class=\"token parameter variable\">-f</span> firefox<span class=\"token variable\">`</span></span>\n<span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>process&#125;</span> <span class=\"token parameter variable\">-gt</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">then</span>\n\t\t<span class=\"token builtin class-name\">echo</span> “firefox进程出现了！”\n\t\t<span class=\"token builtin class-name\">echo</span> “等待时间为：<span class=\"token variable\">$i</span>”\n\t\t<span class=\"token builtin class-name\">break</span>\n\t<span class=\"token keyword\">else</span>\n\t\ti <span class=\"token operator\">=</span> i+10\n\t\t<span class=\"token function\">sleep</span> <span class=\"token number\">10</span>\n<span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h5 id=\"4写一个脚本持续监视用户stu是否登录如果登录了就每隔1分钟把你的用户名和qq号码发给他重复发送3次为止\"><a class=\"anchor\" href=\"#4写一个脚本持续监视用户stu是否登录如果登录了就每隔1分钟把你的用户名和qq号码发给他重复发送3次为止\">#</a> 4. 写一个脚本，持续监视用户 stu 是否登录，如果登录了，就每隔 1 分钟把你的用户名和 QQ 号码发给他，重复发送 3 次为止。</h5>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">do</span>\n\t<span class=\"token assign-left variable\">user</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">who</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-w</span> “stu”<span class=\"token variable\">`</span></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>user&#125;</span> <span class=\"token parameter variable\">-gt</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">then</span>\n\t\t<span class=\"token builtin class-name\">echo</span> “please enter message and press ctrl + D”\n\t\t<span class=\"token function\">write</span> stu\n\t\t<span class=\"token function\">sleep</span> <span class=\"token number\">60</span>\n\t\t<span class=\"token builtin class-name\">echo</span> “please enter message and press ctrl + D”\n\t\t<span class=\"token function\">write</span> stu\n\t\t<span class=\"token function\">sleep</span> <span class=\"token number\">60</span>\n\t\t<span class=\"token builtin class-name\">echo</span> “please enter message and press ctrl + D”\n\t\t<span class=\"token function\">write</span> stu\n\t\t<span class=\"token function\">sleep</span> <span class=\"token number\">60</span>\n\t\t<span class=\"token builtin class-name\">break</span>\n\t<span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h5 id=\"5\"><a class=\"anchor\" href=\"#5\">#</a> 5.</h5>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">until</span> <span class=\"token function\">who</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> “<span class=\"token variable\">$1</span>” <span class=\"token operator\">></span> /dev/null\n<span class=\"token keyword\">do</span>\n\t<span class=\"token function\">sleep</span> <span class=\"token number\">60</span>\n<span class=\"token keyword\">done</span>\n<span class=\"token builtin class-name\">echo</span> “*****<span class=\"token variable\">$1</span> has just logged in****”\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://rainnn-w.github.io/posts/16107.html",
            "url": "https://rainnn-w.github.io/posts/16107.html",
            "title": "Hello World",
            "date_published": "2022-12-11T09:58:53.503Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}