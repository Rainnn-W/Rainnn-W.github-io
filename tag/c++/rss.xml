<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Rainnnの • Posts by &#34;c++&#34; tag</title>
        <link>https://rainnn-w.github.io</link>
        <description>blingbling~</description>
        <language>CN</language>
        <pubDate>Wed, 21 Jun 2023 23:02:00 +0800</pubDate>
        <lastBuildDate>Wed, 21 Jun 2023 23:02:00 +0800</lastBuildDate>
        <category>Linux</category>
        <category>Java</category>
        <category>lab</category>
        <category>c++</category>
        <item>
            <guid isPermalink="true">https://rainnn-w.github.io/posts/20389.html</guid>
            <title>C++ Notes</title>
            <link>https://rainnn-w.github.io/posts/20389.html</link>
            <category>c++</category>
            <pubDate>Wed, 21 Jun 2023 23:02:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;c&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c&#34;&gt;#&lt;/a&gt; C++&lt;/h1&gt;
&lt;h2 id=&#34;零-碎&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#零-碎&#34;&gt;#&lt;/a&gt; 零、碎&lt;/h2&gt;
&lt;h3 id=&#34;1选择-判断-知识点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1选择-判断-知识点&#34;&gt;#&lt;/a&gt; 1. 选择 判断 知识点&lt;/h3&gt;
&lt;p&gt;1. 逻辑运算符两侧运算对象的数据类型可以是任何类型的数据&lt;/p&gt;
&lt;p&gt;2. &lt;code&gt;if (!x)&lt;/code&gt;  等价于  &lt;code&gt;if (x==0||x==&#39;0&#39;)；&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3. &lt;code&gt;x = ++y&lt;/code&gt;   &lt;code&gt;++x =y&lt;/code&gt;  是正确的   &lt;code&gt;(x+y)++&lt;/code&gt;  是错误的&lt;/p&gt;
&lt;p&gt;4. 条件编译允许在编译时包含不同的代码&lt;/p&gt;
&lt;p&gt;5.C++ 中，cin 是预定义的对象&lt;/p&gt;
&lt;p&gt;6. 使用提取符 (&amp;lt;&amp;lt;) 可以输出各种基本数据类型的变量的值，也可以输出指针值。&lt;/p&gt;
&lt;p&gt;7. 和指针类似，引用被初始化后，还可以引用别的变量。❌&lt;/p&gt;
&lt;p&gt;8. 以下程序中，new 语句干了什么。&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int** num;
num &amp;#x3D; new int* [20];&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;分配了长度为 20 的整数指针数组空间，并将 num [0] 的指针返回。&lt;/p&gt;
&lt;p&gt;9.c++ 中不允许嵌套函数（在一个函数中定义新函数）&lt;/p&gt;
&lt;p&gt;10. 抽象类只能作为基类来使用，其纯虚函数的实现由派生类给出；&lt;/p&gt;
&lt;p&gt;11. 类的非静态成员函数才有 this 指针&lt;/p&gt;
&lt;p&gt;12.&lt;strong&gt; 因为静态成员函数不能是虚函数&lt;/strong&gt;，所以它们不能实现多态。&lt;/p&gt;
&lt;p&gt;13. &lt;code&gt;int i; int &amp;amp;ri=i;&lt;/code&gt;  对于这条语句，ri 和 i 这两个变量代表的是同一个存储空间。 （引用）&lt;/p&gt;
&lt;p&gt;14. 构造函数可以被重载，&lt;strong&gt;析构函数不可以被重载&lt;/strong&gt;。因为构造函数可以有多个且可以带参数，而析构函数只能有一个，且不能带参数。&lt;/p&gt;
&lt;p&gt;15. 如果基类声明了带有形参表的构造函数，则派生类就应当声明构造函数&lt;/p&gt;
&lt;p&gt;16. 基类中的私有成员不论通过何种派生方式，到了派生类中均变成不可直接访问成员。&lt;/p&gt;
&lt;p&gt;17. 纯虚函数与函数体为空的虚函数等价。❌&lt;/p&gt;
&lt;p&gt;18. 不可以对数组类型进行整体赋值&lt;/p&gt;
&lt;p&gt;19. 函数可以返回一个不带索引的数组名&lt;/p&gt;
&lt;p&gt;20.&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3JhaW5ubi13L1BpY3R1cmVzQG1haW4vYmxvZy8yMDIzMDgyODExMDg3NjAucG5n&#34;&gt;https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281108760.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20230615162748030&amp;quot;  /&amp;gt;（B）&lt;/p&gt;
&lt;p&gt;21.&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3JhaW5ubi13L1BpY3R1cmVzQG1haW4vYmxvZy8yMDIzMDgyODExMDg1NzcucG5n&#34;&gt;https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281108577.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20230615171122503&amp;quot;  /&amp;gt;（B）&lt;/p&gt;
&lt;p&gt;22. 指向函数的指针变量 p 可以先后指向不同的同种类型的函数，但不可作加减运算。&lt;/p&gt;
&lt;p&gt;23. 数组名就是数组的起始地址，数组的指针就是数组的起始地址。&lt;/p&gt;
&lt;p&gt;24. 用指针变量作函数参数，可以得到多个变化了的值。&lt;/p&gt;
&lt;p&gt;25. 成员函数是公有的，在内存中存在一份，各个对象都可以使用&lt;/p&gt;
&lt;h3 id=&#34;2读程序-计算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2读程序-计算&#34;&gt;#&lt;/a&gt; 2. 读程序 计算&lt;/h3&gt;
&lt;p&gt;（1）&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;&amp;#x2F;&amp;#x2F;若
#define N 3
#define Y(n) ((N+1)*n) 
&amp;#x2F;&amp;#x2F;则
z&amp;#x3D;2*（N+Y(5+1)）&amp;#x2F;&amp;#x2F;z值为&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;48&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;（2）负数对正数取余结果为负数，正数对负数取余结果为正数&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;-7%5&amp;#x3D;-2；
7%-5&amp;#x3D;2；
-7%-5&amp;#x3D;-2;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;（3）运算符优先级&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int x&amp;#x3D;3,y&amp;#x3D;4,z;  
z&amp;#x3D;x++&amp;#x3D;&amp;#x3D;4 || ++y&amp;#x3D;&amp;#x3D;5;  
cout&amp;lt;&amp;lt;y&amp;lt;&amp;lt;z;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;51&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-C++&#34; data-language=&#34;C++&#34;&gt;&lt;code class=&#34;language-C++&#34;&gt;int a&amp;#x3D;0;
cout &amp;lt;&amp;lt; (a&amp;#x3D;4+5,a+5),a+25;
cout &amp;lt;&amp;lt; ((a&amp;#x3D;4+5,a+5),a+25);
cout &amp;lt;&amp;lt; (a&amp;#x3D;3*5,a*4),a+15;
cout &amp;lt;&amp;lt; ((a&amp;#x3D;3*5,a*4),a+15);&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;14346030&lt;/p&gt;
&lt;p&gt;运算符优先级：括号运算 &amp;gt; 加法 &amp;gt; 赋值 &amp;gt; 逗号&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;（4）条件运算符&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int a &amp;#x3D; 1, b &amp;#x3D; 2, c &amp;#x3D; 3, d &amp;#x3D; 4;
int answer &amp;#x3D; a &amp;lt; b ? a : b &amp;lt; c ? b : c &amp;lt; d ? c : d;
cout &amp;lt;&amp;lt; answer;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;条件运算符的结合性是从右到左结合的，先算 c＜d？c:d 返回 c=3；再算 a＜b？a:c 返回值为 1。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;（5）注意细节！&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;&amp;#x2F;&amp;#x2F;执行以下的程序片段，将输出几个数字？
for(i&amp;#x3D;0;i&amp;lt;3;i++);

       cout&amp;lt;&amp;lt;i;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1 个数字，for 循环没有方法体&lt;/p&gt;
&lt;p&gt;输出：2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;（6） &lt;code&gt;bool&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;bool flag &amp;#x3D; 2021;&amp;#x2F;&amp;#x2F;flag 1
cout &amp;lt;&amp;lt; (flag &amp;gt; 2019) + flag * 2 + bool(4) &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;输出结果为3&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;（7）string&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;char s[5];
cin.getline(s,4); &amp;#x2F;&amp;#x2F;只读入3位（会存&amp;#39;\0&amp;#39;）
int n &amp;#x3D; strlen(s);
cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
cout &amp;lt;&amp;lt; sizeof(s) &amp;lt;&amp;lt; &amp;quot; &amp;quot;;

char* q&amp;#x3D;&amp;quot;abcde&amp;quot;;
q+&amp;#x3D;2;
cout&amp;lt;&amp;lt;q; &amp;#x2F;&amp;#x2F;cde&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入：ABCDE&lt;/p&gt;
&lt;p&gt;输出：ABC 3 5&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;（8）5 4 6&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281108350.png&#34; alt=&#34;image-20230615170300301&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;指针阅读程序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#指针阅读程序&#34;&gt;#&lt;/a&gt; 指针阅读程序&lt;/h4&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int a[] &amp;#x3D; &amp;#123;1,2,3,4,5&amp;#125;;
   int *p; &amp;#x2F;&amp;#x2F;a[0]
   p &amp;#x3D; a+1; &amp;#x2F;&amp;#x2F;a[1]
   cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;地址
   cout &amp;lt;&amp;lt; &amp;amp;a &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;与a相同 地址
   &amp;#x2F;&amp;#x2F;cout &amp;lt;&amp;lt; a++ &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;Error
   cout &amp;lt;&amp;lt; &amp;amp;a+1 &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;下一位地址
   cout &amp;lt;&amp;lt; *(a+1) &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;2
   cout &amp;lt;&amp;lt; *p &amp;lt;&amp;lt; p[1] &amp;lt;&amp;lt; a[1] &amp;lt;&amp;lt; endl;&amp;#x2F;&amp;#x2F;232
   cout &amp;lt;&amp;lt; *p++ &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;2 a[2]
   (*p)++; &amp;#x2F;&amp;#x2F; a[2]++ 即a[2]&amp;#x3D;4
   cout &amp;lt;&amp;lt; p &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;输出地址
   cout &amp;lt;&amp;lt; *p &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;4
   cout &amp;lt;&amp;lt; *(a+2); &amp;#x2F;&amp;#x2F;4 此时a[2]已经等于4&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;&amp;#x2F;&amp;#x2F;指针数组
    int a[]&amp;#x3D;&amp;#123;1,3,5,7,9&amp;#125;;
    int *p[]&amp;#x3D;&amp;#123;a,a+1,a+2,a+3,a+4&amp;#125;;
    cout &amp;lt;&amp;lt; a[4] &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;9
    cout &amp;lt;&amp;lt; &amp;amp;a[4] &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;地址 0x61fe10
    cout &amp;lt;&amp;lt; p[4] &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;同上地址 0x61fe10
    cout &amp;lt;&amp;lt; *p[4] &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;9
    cout &amp;lt;&amp;lt; &amp;amp;p[4] &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;地址 0x61fdf0
    cout &amp;lt;&amp;lt; *(a+4) &amp;lt;&amp;lt; endl;&amp;#x2F;&amp;#x2F;9
    cout &amp;lt;&amp;lt; *(p+4) &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;地址 0x61fe10
	cout &amp;lt;&amp;lt; **(p+4) &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;9
    cout &amp;lt;&amp;lt; *(p+4)-*(p+0) &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;4 运算顺序（
    cout &amp;lt;&amp;lt; (*(p+4)-*(p+0)) &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;4
    cout &amp;lt;&amp;lt; *(a+3)%a[4] &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;7 （7%9）&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;&amp;#x2F;&amp;#x2F;数组指针
    int (*p)[5];
    int a[5]&amp;#x3D;&amp;#123;1,3,5,7,9&amp;#125;;
    cout &amp;lt;&amp;lt; p &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;地址0x10
    cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;地址0x61fe00
    cout &amp;lt;&amp;lt; p[2] &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;地址0x38
    cout &amp;lt;&amp;lt; *p &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;地址0x10
    cout &amp;lt;&amp;lt; a+2 &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;地址0x61fe08
    cout &amp;lt;&amp;lt; *(a+2) &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;5
    cout &amp;lt;&amp;lt; p++ &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;地址0x10
    cout &amp;lt;&amp;lt; *p++ &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;地址0x24
    cout &amp;lt;&amp;lt; *p &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;0x38&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h4 id=&#34;派生类构造函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#派生类构造函数&#34;&gt;#&lt;/a&gt; 派生类构造函数&lt;/h4&gt;
&lt;p&gt;1. 调用基类构造函数，对基类数据成员初始化；&lt;/p&gt;
&lt;p&gt;2. 调用子对象构造函数，对子对象数据成员初始化；&lt;/p&gt;
&lt;p&gt;3. 再执行派生类构造函数本身，对派生类数据成员初始化。&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;
class A&amp;#123;
	public: A(int aa)&amp;#123;cout&amp;lt;&amp;lt; aa;&amp;#125;;
&amp;#125;;
class B:public A&amp;#123;
	int b; A a;&amp;#x2F;&amp;#x2F; 子对象a
  public:
	B(int bb):a(bb-2),A(bb+1),b(bb+2)&amp;#123;
		b &amp;#x3D; bb-4;
		cout &amp;lt;&amp;lt; b &amp;lt;&amp;lt;endl;
	&amp;#125;
&amp;#125;;
int main()&amp;#123; A a(3); B b(4); &amp;#125;
&amp;#x2F;&amp;#x2F;3520&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;C++ 声明 + 赋值一个对象指针时，调用默认构造函数。如果只是声明，那 么不会调用构造函数，分配空间给 p，但是不可用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;默认构造函数（即无参构造函数）不一定存在，但是拷贝构造函数总是会存在。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;一-概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-概述&#34;&gt;#&lt;/a&gt; 一、概述&lt;/h2&gt;
&lt;h3 id=&#34;一程序设计语言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一程序设计语言&#34;&gt;#&lt;/a&gt; （一）程序设计语言&lt;/h3&gt;
&lt;h4 id=&#34;1低级语言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1低级语言&#34;&gt;#&lt;/a&gt; 1. 低级语言&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;机器语言（采用指令编码和数据的存储地址来表示指令的操作以及操作数）&lt;/p&gt;
&lt;p&gt;可以直接在计算机上执行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;汇编语言（用符号来表示指令的操作以及操作数）&lt;/p&gt;
&lt;p&gt;必须翻译成机器语言才能执行（翻译工作由程序 assembler 汇编程序 来自动完成）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2高级语言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2高级语言&#34;&gt;#&lt;/a&gt; 2. 高级语言&lt;/h4&gt;
&lt;h3 id=&#34;二c程序的构成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二c程序的构成&#34;&gt;#&lt;/a&gt; （二）c++ 程序的构成&lt;/h3&gt;
&lt;p&gt;1. 每个 c++ 程序必须有且仅有一个名字为 main 的全局函数，称为主函数，程序&lt;strong&gt;从全局函数 main 开始执行&lt;/strong&gt;，main 函数的返回值类型为 &lt;code&gt;int&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一般情况下，返回 0 表示程序正常结束，返回负数（如 - 1）表示程序非正常结束&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2. 一个 c++ 程序可以存放在一个或多个文件（称为源文件）中，每个源文件包含一些程序实体的定义，其中有且仅有一个源文件中包含全局函数 &lt;code&gt;main&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;三词法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三词法&#34;&gt;#&lt;/a&gt; （三）词法&lt;/h3&gt;
&lt;p&gt;1. 标识符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;标识符命名规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由 ** 大小写中英文字母、数字、下划线、美元符号（$)** 构成&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第一个字符不能是数字&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;标识符通常用作程序实体的名字&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;大小写字母有区别&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（C++ 语言保留了一些名字供语言本身使用，这些名字不能被用作标识符。）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2. 关键字&lt;/p&gt;
&lt;p&gt;3. 字面常量&lt;/p&gt;
&lt;p&gt;4. 操作符&lt;/p&gt;
&lt;p&gt;5. 标点符号&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;注释不构成可执行程序的一部分&lt;/p&gt;
&lt;p&gt;不参加编译，也不会出现在目标程序中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;预处理和函数头后面不需要加 &lt;code&gt;;&lt;/code&gt;  表示结束&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;续行符 &lt;code&gt;\&lt;/code&gt; （将一个单词分成多行来写，需在每行最后加续行符）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;四cpp程序的运行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四cpp程序的运行&#34;&gt;#&lt;/a&gt; （四）cpp 程序的运行&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;编写 C++ 程序一般需经过的几个步骤依次是：编辑、编译、连接、运行&lt;/li&gt;
&lt;li&gt;程序执行的顺序：本程序文件的 main 函数开始，到 main 函数结束&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;源程序的扩展名： &lt;code&gt;.cpp&lt;/code&gt; / &lt;code&gt;.h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;目标文件： &lt;code&gt;.obj&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可执行文件： &lt;code&gt;.exe&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;五进制转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#五进制转换&#34;&gt;#&lt;/a&gt; （五）进制转换&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;十进制整数 ---- 二进制 / 八进制 / 十六进制：除以 2/8/16 从下往上取余&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;十进制小数 ---- 二进制 / 八进制 / 十六进制：乘以 2/8/16 从上往下取整&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281109020.png&#34; alt=&#34;image-20230305174903120&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二进制 / 八进制 / 十六进制 ---- 十进制：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281109311.png&#34; alt=&#34;image-20230305175103292&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二进制 ---- 八进制 / 十六进制：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281109178.png&#34; alt=&#34;image-20230305175202024&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;六原码-反码-补码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#六原码-反码-补码&#34;&gt;#&lt;/a&gt; （六）原码 反码 补码&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;原码：2 进制表示 （通常最高位表示正负 1 负 0 正）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;对于 n 个二进制位构成的原码，能表示的整数范围为 -(2&lt;sup&gt;(n-1)-1)~2&lt;/sup&gt;(n-1)-1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;补码：
&lt;ul&gt;
&lt;li&gt;正整数：原码&lt;/li&gt;
&lt;li&gt;负整数：原码各位取反后加 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;对于 n 个二进制位构成的补码，能表示的整数范围为 -2&lt;sup&gt;(n-1)~2&lt;/sup&gt;(n-1)-1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3JhaW5ubi13L1BpY3R1cmVzQG1haW4vYmxvZy8yMDIzMDgyODExMDkxMTgucG5n&#34;&gt;https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281109118.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20230615162922367&amp;quot; style=&amp;quot;zoom:33%;&amp;quot; /&amp;gt;（A）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加减法
&lt;ul&gt;
&lt;li&gt;加：补码直接相加，舍去最高位&lt;/li&gt;
&lt;li&gt;减：减数取负，与被减数相加，舍去最高位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;二-基本数据类型和表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-基本数据类型和表达式&#34;&gt;#&lt;/a&gt; 二、基本数据类型和表达式&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281109044.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;一基本数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一基本数据类型&#34;&gt;#&lt;/a&gt; （一）基本数据类型&lt;/h3&gt;
&lt;p&gt;![image-20230330112752014](./C++ Notes/image-20230330112752014.png)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以使用 &lt;code&gt;sizeof(&amp;lt;类型&amp;gt;)&lt;/code&gt;  或 &lt;code&gt;sizeof(&amp;lt;变量&amp;gt;)&lt;/code&gt;  运算其字节长度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;1整数类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1整数类型&#34;&gt;#&lt;/a&gt; 1. 整数类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;int&lt;/code&gt;    2/4 字节 （由计算机字长决定）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;short int&lt;/code&gt;    &lt;code&gt;short&lt;/code&gt;    2 字节&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;long int&lt;/code&gt;   &lt;code&gt;long&lt;/code&gt;    4 字节&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无符号整数类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unsigned int&lt;/code&gt;  /  &lt;code&gt;unsigned&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unsigned short int&lt;/code&gt;  /  &lt;code&gt;unsigned short&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unsigned long int&lt;/code&gt;  /  &lt;code&gt;unsigned long&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;无符号整数类型所占内存大小与相应整数类型相同&lt;/p&gt;
&lt;p&gt;有符号整数类型的数，分配给其内存空间中会占用一个二进制位表示它的符号&lt;/p&gt;
&lt;p&gt;但无符号整数类型其内存空间中没有表示符号的位&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2实数类型浮点类型默认为double&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2实数类型浮点类型默认为double&#34;&gt;#&lt;/a&gt; 2. 实数类型（浮点类型）默认为 &lt;code&gt;double&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt;   4 个字节&lt;/li&gt;
&lt;li&gt;&lt;code&gt;double&lt;/code&gt;   8 个字节&lt;/li&gt;
&lt;li&gt;&lt;code&gt;long double&lt;/code&gt;    8/10 个字节&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3字符类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3字符类型&#34;&gt;#&lt;/a&gt; 3. 字符类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;char&lt;/code&gt;   1 个字节&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;wchar_t&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;ASCII 字符集：a--97    A--65&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;4逻辑类型-bool&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4逻辑类型-bool&#34;&gt;#&lt;/a&gt; 4. 逻辑类型  &lt;code&gt;bool&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1 真 true&lt;/li&gt;
&lt;li&gt;0 假 false&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;5空值类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5空值类型&#34;&gt;#&lt;/a&gt; 5. 空值类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;void&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void*&lt;/code&gt;  通用指针类型&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二表现形式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二表现形式&#34;&gt;#&lt;/a&gt; （二）表现形式&lt;/h3&gt;
&lt;h4 id=&#34;1常量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1常量&#34;&gt;#&lt;/a&gt; 1. 常量&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;字面常量 在程序中直接写出常量值的常量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;整数类型常量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;十进制 第一个数字不能是 0（0 除外）&lt;/li&gt;
&lt;li&gt;八进制 由 0 开头&lt;/li&gt;
&lt;li&gt;十六进制 由 0x 或 0X 开头&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实数类型常量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;小数：可以省略小数点前后的 0  &lt;code&gt;5.&lt;/code&gt;   &lt;code&gt;.5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;科学计数法： &lt;code&gt;4.2E2&lt;/code&gt;  = 4.2*10^2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字符类型常量&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&#39;A&#39; &lt;/code&gt;   &lt;code&gt;\101&lt;/code&gt;  （八进制） &lt;code&gt;\x41&lt;/code&gt; （十六进制）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&#39;\n’&lt;/code&gt; （换行符） &lt;code&gt;‘\r’&lt;/code&gt; （回车符） &lt;code&gt;‘\t’&lt;/code&gt; （横向制表符） &lt;code&gt;‘\b’&lt;/code&gt; （退格符） &lt;code&gt;‘\a’&lt;/code&gt; （响铃） &lt;code&gt;&#39;\f&#39;&lt;/code&gt;  （换页，在打印机上，屏幕上没有页）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字符串常量  为一维字符数组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;符号常量 有名字的常量&lt;/p&gt;
&lt;p&gt;&lt;code&gt;const double PI=3.14;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#define PI 3.14&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（ &lt;code&gt;#define&lt;/code&gt;  定义的标识符在编译前将被替换成所定义的内容）&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2变量&#34;&gt;#&lt;/a&gt; 2. 变量&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;变量有一定的&lt;strong&gt;生存周期&lt;/strong&gt;和&lt;strong&gt;作用范围&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;int a=5;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;int a(5);&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义&lt;/li&gt;
&lt;li&gt;赋值：对内存空间初始化&lt;/li&gt;
&lt;li&gt;使用：获取，或者改变内存空间的数值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;三操作符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三操作符&#34;&gt;#&lt;/a&gt; （三）操作符&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;又称作：运算符 数据称为：操作数&lt;/p&gt;
&lt;p&gt;操作符的优先级：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281109105.png&#34; alt=&#34;image-20230305202512335&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;1算术操作符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1算术操作符&#34;&gt;#&lt;/a&gt; 1. 算术操作符&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;加  &lt;code&gt;+&lt;/code&gt; 、减  &lt;code&gt;-&lt;/code&gt; 、乘  &lt;code&gt;*&lt;/code&gt; 、除  &lt;code&gt;/&lt;/code&gt; 、取余  &lt;code&gt;%&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;取负 取正  &lt;code&gt;-&lt;/code&gt;    &lt;code&gt;+&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;自增、自减 &lt;code&gt;++&lt;/code&gt;   &lt;code&gt;--&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例题：可以使 x 的值增大 2： &lt;code&gt;++ ++x&lt;/code&gt;   &lt;code&gt;(++x)++&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;❌： &lt;code&gt;x++ ++&lt;/code&gt;     &lt;code&gt;++x++&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;2关系与逻辑操作符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2关系与逻辑操作符&#34;&gt;#&lt;/a&gt; 2. 关系与逻辑操作符&lt;/h4&gt;
&lt;h5 id=&#34;1关系操作符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1关系操作符&#34;&gt;#&lt;/a&gt; （1）关系操作符&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;   &lt;code&gt;&amp;lt;&lt;/code&gt;   &lt;code&gt;&amp;gt;=&lt;/code&gt;   &lt;code&gt;&amp;lt;=&lt;/code&gt;   &lt;code&gt;==&lt;/code&gt;   &lt;code&gt;!=&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;2逻辑操作符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2逻辑操作符&#34;&gt;#&lt;/a&gt; （2）逻辑操作符&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;  逻辑与   &lt;code&gt;||&lt;/code&gt;  逻辑或   &lt;code&gt;!&lt;/code&gt;  逻辑非&lt;/p&gt;
&lt;p&gt;例：3&amp;amp;&amp;amp;5 的结果为：1&lt;/p&gt;
&lt;p&gt;解析：3：11&lt;/p&gt;
&lt;p&gt;​			  5：101&lt;/p&gt;
&lt;p&gt;​			  11&amp;amp;&amp;amp;101 = 001 = 1&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;短路求值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;3位操作符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3位操作符&#34;&gt;#&lt;/a&gt; 3. 位操作符&lt;/h4&gt;
&lt;h5 id=&#34;1逻辑位操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1逻辑位操作&#34;&gt;#&lt;/a&gt; （1）逻辑位操作&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;~&lt;/code&gt;  按位取反  二进制取反&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;  按位与&lt;/p&gt;
&lt;p&gt;例：若有变量定义 int a = 13, b = 6; 则表达式 a &amp;amp; b 的值为：4&lt;/p&gt;
&lt;p&gt;13=1101&lt;br&gt;
6=0110&lt;/p&gt;
&lt;p&gt;1101 &amp;amp; 0110 = 0100 = 4&lt;br&gt;
1101 ^ 0110 = 1011 = 11&lt;/p&gt;
&lt;p&gt;&lt;code&gt;|&lt;/code&gt;  按位或&lt;/p&gt;
&lt;p&gt;&lt;code&gt;^&lt;/code&gt;  按位异或  相同为 0，不同为 1&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;(x^a)^a=x&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;2移位操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2移位操作&#34;&gt;#&lt;/a&gt; （2）移位操作&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;  左移&lt;/p&gt;
&lt;p&gt;把第一个操作数按二进制位依次左移由第二个操作数所指定的位数。左移时，高位舍弃，低位补 0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;  右移&lt;/p&gt;
&lt;p&gt;把第一个操作数按二进制位依次右移由第二个操作数所指定的位数。右移时，低位舍弃，高位按下面规则处理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于无符号数或有符号的非负数，高位补 0&lt;/li&gt;
&lt;li&gt;对于有符号数的负数，高位与原来的最高位相同（适合于补码表示的整数）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;移位操作常常用于实现特殊的乘法和除法运算。&lt;/p&gt;
&lt;p&gt;例如，在某些情况下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把一个整型数按二进位左移一位相当于把该整型数乘以 2，&lt;/li&gt;
&lt;li&gt;把一个整型数按二进位右移一位相当于把该整型数除以 2，&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;4赋值运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4赋值运算符&#34;&gt;#&lt;/a&gt; 4. 赋值运算符&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;cpp 允许连续使用赋值运算符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int a;
int b;
int c;
a&amp;#x3D;b&amp;#x3D;c&amp;#x3D;88;&amp;#x2F;&amp;#x2F;88先被赋值给c，c的值被赋给b，b的值被赋给a&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h4 id=&#34;5其他操作符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5其他操作符&#34;&gt;#&lt;/a&gt; 5. 其他操作符&lt;/h4&gt;
&lt;h5 id=&#34;1条件操作符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1条件操作符&#34;&gt;#&lt;/a&gt; （1）条件操作符&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;d1?d2:d3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果 d1 的值为 true 或非零，则运算结果为 d2，否则为 d3&lt;/p&gt;
&lt;h5 id=&#34;2逗号操作符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2逗号操作符&#34;&gt;#&lt;/a&gt; （2）逗号操作符&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;d1,d2,d3,...&lt;/code&gt;  将若干个运算连接起来&lt;/p&gt;
&lt;p&gt;从左至右依次进行各个运算，操作结果为最后一个运算的&lt;br&gt;
结果。&lt;/p&gt;
&lt;p&gt;例： &lt;code&gt;x=a+b,y=c+d,z=x+y&lt;/code&gt;  等价于 &lt;code&gt;z=a+b+c+d&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;3sizeof操作符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3sizeof操作符&#34;&gt;#&lt;/a&gt; （3）sizeof 操作符&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sizeof(类型名/变量名)&lt;/code&gt;  计算各种数据类型的数据所占内存空间大小&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;CHAR_MAX&lt;/p&gt;
&lt;p&gt;SHRT_MAX&lt;/p&gt;
&lt;p&gt;INT_MAX&lt;/p&gt;
&lt;p&gt;LONG_MAX&lt;/p&gt;
&lt;p&gt;LLONG_MAX  long long&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;typedef &amp;lt;已有类型&amp;gt; &amp;lt;别名&amp;gt;&lt;/code&gt;   给已有数据类型取别名&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;6操作数的类型转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6操作数的类型转换&#34;&gt;#&lt;/a&gt; 6. 操作数的类型转换&lt;/h4&gt;
&lt;h5 id=&#34;1隐式类型转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1隐式类型转换&#34;&gt;#&lt;/a&gt; （1）隐式类型转换&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;char&lt;/code&gt; ,   &lt;code&gt;short&lt;/code&gt; ,   &lt;code&gt;int &lt;/code&gt; ,  &lt;code&gt;unsigned int&lt;/code&gt; ,   &lt;code&gt;long int&lt;/code&gt; ,  &lt;code&gt;unsigned long int&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;（将 &lt;code&gt;char&lt;/code&gt; ,  &lt;code&gt;signed char&lt;/code&gt; ,  &lt;code&gt;unsigned char&lt;/code&gt; ,  &lt;code&gt;short int&lt;/code&gt; ,  &lt;code&gt;unsigned short int&lt;/code&gt;  )&lt;/p&gt;
&lt;p&gt;&lt;code&gt;float&lt;/code&gt; ,   &lt;code&gt;double&lt;/code&gt; ,   &lt;code&gt;long double&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;2显式类型转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2显式类型转换&#34;&gt;#&lt;/a&gt; （2）显式类型转换&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;类型名&amp;gt;(&amp;lt;操作数&amp;gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(&amp;lt;类型名&amp;gt;)&amp;lt;操作数&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;三-控制语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三-控制语句&#34;&gt;#&lt;/a&gt; 三、控制语句&lt;/h2&gt;
&lt;h3 id=&#34;一选择&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一选择&#34;&gt;#&lt;/a&gt; (一）选择&lt;/h3&gt;
&lt;h4 id=&#34;1if&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1if&#34;&gt;#&lt;/a&gt; 1.if&lt;/h4&gt;
&lt;h4 id=&#34;2switch&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2switch&#34;&gt;#&lt;/a&gt; 2.switch&lt;/h4&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;switch (&amp;lt;整型表达式&amp;gt;)
&amp;#123;
        case&amp;lt;整型常量表达式&amp;gt;:
        	&amp;lt;语句&amp;gt;;
       		break;
        case&amp;lt;整型常量表达式&amp;gt;:
        	&amp;lt;语句&amp;gt;;
        	break;
        case&amp;lt;整型常量表达式&amp;gt;:
        	&amp;lt;语句&amp;gt;;
        	break;
        ...
        default:&amp;lt;语句&amp;gt;;
&amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3 id=&#34;二循环&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二循环&#34;&gt;#&lt;/a&gt; （二）循环&lt;/h3&gt;
&lt;h4 id=&#34;1while&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1while&#34;&gt;#&lt;/a&gt; 1.while&lt;/h4&gt;
&lt;h4 id=&#34;2do-while&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2do-while&#34;&gt;#&lt;/a&gt; 2.do-while&lt;/h4&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;do
&amp;#123;&amp;lt;语句&amp;gt;;
 &amp;lt;语句&amp;gt;;
&amp;#125;while(&amp;lt;表达式&amp;gt;);&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意： &lt;code&gt;while&lt;/code&gt;  后的 &lt;code&gt;;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;3for&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3for&#34;&gt;#&lt;/a&gt; 3.for&lt;/h4&gt;
&lt;h3 id=&#34;三无条件转移&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三无条件转移&#34;&gt;#&lt;/a&gt; （三）无条件转移&lt;/h3&gt;
&lt;h4 id=&#34;1goto&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1goto&#34;&gt;#&lt;/a&gt; 1.goto&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;不能用 &lt;code&gt;goto&lt;/code&gt;  从一个函数外部转入该函数内部，也不能用 &lt;code&gt;goto&lt;/code&gt;  从一个函数内部转到该函数外部&lt;/li&gt;
&lt;li&gt;不能掠过带有初始化的变量定义&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2break&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2break&#34;&gt;#&lt;/a&gt; 2.break&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;立即跳出循环&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3continue&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3continue&#34;&gt;#&lt;/a&gt; 3.continue&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;只能用在循环语句的循环体中&lt;/li&gt;
&lt;li&gt;结束当前循环，进入下一次循环&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4return&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4return&#34;&gt;#&lt;/a&gt; 4.return&lt;/h4&gt;
&lt;h2 id=&#34;四-函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四-函数&#34;&gt;#&lt;/a&gt; 四、函数&lt;/h2&gt;
&lt;h3 id=&#34;1函数定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1函数定义&#34;&gt;#&lt;/a&gt; 1. 函数定义&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;返回值类型&amp;gt; &amp;lt;函数名&amp;gt; (&amp;lt;形式参数表&amp;gt;)  &amp;lt;函数体&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例： &lt;code&gt; int factorial(int n)&amp;#123;  &amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;return 语句：若返回值类型与 return 的类型不同，会存在隐式类型转换，把 return 的类型转成 &amp;lt;返回值类型&amp;gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;函数的定义不可以嵌套&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2函数调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2函数调用&#34;&gt;#&lt;/a&gt; 2. 函数调用&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;函数名&amp;gt; (&amp;lt;实在参数表&amp;gt;) &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例： &lt;code&gt;factorial(5);&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;实参个数和类型与函数形参相同，若类型不同，会隐式转换，把实参类型转换成形参类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数调用执行过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;计算实参的值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把实参分别传递给被调用函数的相应形参&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为形参分配临时内存空间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行函数体&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为局部变量分配临时内存空间&lt;/p&gt;
&lt;p&gt;当函数的语句部分执行结束后，释放进入函数时所申请的所有临时变量空间，这包括形式参数和局部变量两个部分。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数体中执行 &lt;code&gt;return&lt;/code&gt;  语句返回函数调用点，调用点获得返回值（如果有返回值）并执行调用后的操作&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数参数传递&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;值传递（默认）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;&amp;#x2F;&amp;#x2F;例题
void swap(int x,int y)&amp;#123;
    int temp;
    temp &amp;#x3D; x;
    x &amp;#x3D; y;
    y &amp;#x3D; temp;
&amp;#125;
int main()&amp;#123;
    int a &amp;#x3D; 2,b &amp;#x3D; 3;
    swap(a,b);
    cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; b &amp;lt;&amp;lt; endl;
    return 0;
&amp;#125;
&amp;#x2F;&amp;#x2F; 2 3&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;地址或引用传递&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3函数声明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3函数声明&#34;&gt;#&lt;/a&gt; 3. 函数声明&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;调用的函数都要有定义，若定义在调用点之后或其他文件中，需要在调用前对被调用的函数进行声明。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;返回值类型&amp;gt; &amp;lt;函数名&amp;gt; (&amp;lt;形式参数表&amp;gt;) &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或   &lt;code&gt;extren &amp;lt;返回值类型&amp;gt; &amp;lt;函数名&amp;gt; (&amp;lt;形式参数表&amp;gt;) &lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在函数声明中，形式参数表可以只列出参数类型而不写形参名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例： &lt;code&gt;int g(int,int);&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在函数里面也可以声明&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4局部变量与全局变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4局部变量与全局变量&#34;&gt;#&lt;/a&gt; 4. 局部变量与全局变量&lt;/h3&gt;
&lt;h4 id=&#34;1局部变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1局部变量&#34;&gt;#&lt;/a&gt; （1）局部变量&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;在复合语句中定义的变量，只能在定义他们的复合语句中使用&lt;/li&gt;
&lt;li&gt;函数的形式参数与可以看成是局部变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2全局变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2全局变量&#34;&gt;#&lt;/a&gt; （2）全局变量&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在函数外部定义的变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;若全局变量定义在使用点之后或其他文件里，使用前需对其声明&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;extern &amp;lt;变量类型&amp;gt; &amp;lt;变量名&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;变量定义也属于一种声明：定义性声明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量定义要给变量分配空间，变量声明则不用&lt;/li&gt;
&lt;li&gt;变量定义要给变量赋初值（初始化变量），变量声明则不可以。&lt;/li&gt;
&lt;li&gt;变量定义只能有一个，变量声明可以有多个。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt;  全局变量：存储在静态存储区，&lt;strong&gt;在函数外部定义&lt;/strong&gt;，&lt;strong&gt;只限在本文件中使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;extern&lt;/code&gt;  全局变量：存储在静态存储区，&lt;strong&gt;在其他文件中定义&lt;/strong&gt;，&lt;strong&gt;在本文件中可以使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt;  局部变量：存储在静态存储区，在函数内部定义，只限在函数内部使用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5程序的多模块结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5程序的多模块结构&#34;&gt;#&lt;/a&gt; 5. 程序的多模块结构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一个程序模块包含两个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接口 interface （.h 文件 头文件）在本模块中定义的、提供给其他模块使用的一些程序实体的定义（常量、类型等）和声明（函数、全局变量等）&lt;/li&gt;
&lt;li&gt;实现 implementation （.cpp 文件 源文件）模块中程序实体的定义&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在一个模块 A 中用到另一个模块 B 中定义的全局程序文件，要在 A 的源文件中用一条编译预处理命令（ &lt;code&gt;#include&lt;/code&gt; ）把 B 的头文件中的内容包含进来，达到声明的目的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件包含命令： &lt;code&gt;#include &amp;lt;文件名&amp;gt;&lt;/code&gt;  或  &lt;code&gt;#include &amp;quot;文件名&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;include 命令的含义是：在编译前，用文件名所指定的文件内容替换该命令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&amp;lt;文件名&amp;gt; 表示在&lt;strong&gt;系统指定的目录&lt;/strong&gt;下寻找指定文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;quot;文件名&amp;quot; 表示先在 #include 命令的&lt;strong&gt;源文件所在的目录&lt;/strong&gt;下查找，然后再在&lt;strong&gt;系统指定的目录&lt;/strong&gt;下寻找指定文件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果几个目录中都有 xx.h， &lt;code&gt;#include &amp;quot;xx.h&amp;quot;&lt;/code&gt;  最多只会搜索到第一个就停止继续搜索&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6标识符的作用域&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6标识符的作用域&#34;&gt;#&lt;/a&gt; 6. 标识符的作用域&lt;/h3&gt;
&lt;h4 id=&#34;1局部作用域&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1局部作用域&#34;&gt;#&lt;/a&gt; （1）局部作用域&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在函数定义或复合语句中、从标识符的定义点开始到函数定义或复合语句结束之间的程序段。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;具有局部作用域的标识符：局部常量名、局部变量名 / 对象名、函数的形参名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果在一个标识符的局部作用域中包含内层复合语句，并且在该内层复合语句中定义了一个同名的不同实体，则外层定义的标识符的作用域应该是从其潜在作用域中扣除内层同名标识符的作用域之后所得到的作用域。&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;void f()&amp;#123;
    int x;&amp;#x2F;&amp;#x2F;外层x的定义
    ... x ...&amp;#x2F;&amp;#x2F;外层的x
    while ( ... x ...)&amp;#123;&amp;#x2F;&amp;#x2F;外层的x
    	...x...&amp;#x2F;&amp;#x2F;外层的x
        double x;&amp;#x2F;&amp;#x2F;内层的x
        ...x...&amp;#x2F;&amp;#x2F;内层的x
    &amp;#125;
    ...x...&amp;#x2F;&amp;#x2F;外层的x
&amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2全局作用域&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2全局作用域&#34;&gt;#&lt;/a&gt; （2）全局作用域&lt;/h4&gt;
&lt;p&gt;（具有全局作用域的标识符主要用于标识被程序&lt;strong&gt;各个模块共享&lt;/strong&gt;的程序实体）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;构成 c++ 程序的所有模块（源文件）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;具有全局作用域的标识符：全局函数名、全局变量名 / 对象名、全局类名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若标识符的定义点在其它源文件中或在本源文件中使用点之后，则在使用前需要声明它们。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果在某个局部作用域中定义了与某个全局标识符同名的标识符，则该全局标识符的作用域应扣掉与之同名的局部标识符的作用域。&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int x;&amp;#x2F;&amp;#x2F;外层x的定义
void f()&amp;#123;    
    ... x ...&amp;#x2F;&amp;#x2F;外层的x
    while ( ... x ...)&amp;#123;&amp;#x2F;&amp;#x2F;外层的x
    	...x...&amp;#x2F;&amp;#x2F;外层的x
        double x;&amp;#x2F;&amp;#x2F;内层的x
        ...x...&amp;#x2F;&amp;#x2F;内层的x
    &amp;#125;
    ...x...&amp;#x2F;&amp;#x2F;外层的x
&amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;若在局部标识符的作用域中要使用与其同名的全局标识符，需要用全局域选择符（ &lt;code&gt;::&lt;/code&gt; ）对全局标识符进行修饰（受限）&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;double x;&amp;#x2F;&amp;#x2F;外
void f()&amp;#123;
    ...x...&amp;#x2F;&amp;#x2F;外
    int x;&amp;#x2F;&amp;#x2F;内
    x&amp;#x2F;&amp;#x2F;内
    ::x&amp;#x2F;&amp;#x2F;外
&amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3文件作用域&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3文件作用域&#34;&gt;#&lt;/a&gt; （3）文件作用域&lt;/h4&gt;
&lt;p&gt;（具有文件作用域的标识符用于标识在&lt;strong&gt;一个模块内部共享&lt;/strong&gt;的程序实体）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在全局标识符的定义中加上 &lt;code&gt;static&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt;  定义的全局常量名&lt;/li&gt;
&lt;li&gt;具有文件作用域的标识符只能在定义他们的源文件（模块）中使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4函数作用域&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4函数作用域&#34;&gt;#&lt;/a&gt; （4）函数作用域&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;语句标号 一个语句标号只能定义一次&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;5函数原型作用域&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5函数原型作用域&#34;&gt;#&lt;/a&gt; （5）函数原型作用域&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;用于函数声明的函数原型，其中的形式参数名的作用域从函数原型开始到函数原型结束。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void f(int x, double y);&lt;/code&gt;  其中的 x 和 y 的作用域是从  &lt;code&gt;(&lt;/code&gt;  开始到  &lt;code&gt;) &lt;/code&gt; 结束&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;6名空间作用域&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6名空间作用域&#34;&gt;#&lt;/a&gt; （6）名空间作用域&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;在一个源文件中要用到两个分别在另外两个源文件中定义的不同全局程序实体（如：全局函数），而这两个全局程序实体的名字相同，C++ 提供了名空间 (namespace）设施来解决上述的名冲突问题。&lt;/li&gt;
&lt;li&gt;在一个名空间中定义的全局标识符，其作用域为该&lt;strong&gt;名空间&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;当在一个名空间外部需要使用该名空间中定义的全局标识符时，可用该&lt;strong&gt;名空间的名字来修饰或受限&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7变量的生存期存储分配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7变量的生存期存储分配&#34;&gt;#&lt;/a&gt; 7. 变量的生存期（存储分配）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;生存期：程序运行时一个变量占有内存空间的时间段&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;静态生存期&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;从程序开始执行时就进行内存空间分配，直到程序结束才收回它们的空间&lt;/strong&gt;。全局变量具有静态生存期。&lt;strong&gt;静态数据区&lt;/strong&gt;，系统将未显式初始化的变量初始化为 0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动生存期&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内存空间在程序执行到定义它们的复合语句 (包括函数体）时才分配，当定义它们的复合语句执行结束时，它们的空间将被收回&lt;/strong&gt;。局部变量和函数的参数一般具有自动生存期。&lt;strong&gt;栈区 M&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;局部变量默认存储类为 &lt;code&gt;auto&lt;/code&gt;   使其具用自动生存期&lt;/li&gt;
&lt;li&gt;&lt;code&gt;register&lt;/code&gt;   使局部变量具有自动生存期，由编译程序根据 CPU 寄存器的使用情况来决定是否存放在寄存器中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt;  使局部变量具有静态生存期 只在函数第一次调用时进行初始化，以后调用中不再进行初始化，它的值为上一次函数调用结束时的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在全局标识符的定义中， &lt;code&gt;static&lt;/code&gt;  用于把全局标识符的作用域改为文件作用域&lt;/p&gt;
&lt;p&gt;在局部变量的定义中， &lt;code&gt;static&lt;/code&gt;  用于指出相应的局部变量具有静态生存期。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态生存期&lt;/p&gt;
&lt;p&gt;内存空间在程序中显式地用 &lt;code&gt;new&lt;/code&gt;  操作或 &lt;code&gt;malloc&lt;/code&gt;  库函数分配、用 &lt;code&gt;delete&lt;/code&gt;  操作或 &lt;code&gt;free&lt;/code&gt;  库函数收回。动态变量具动态生存期。在 ** 堆区  （大小：G）** 中分配&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;8宏定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8宏定义&#34;&gt;#&lt;/a&gt; 8. 宏定义&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一种编译预处理命令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;#define &amp;lt;宏名&amp;gt; (&amp;lt;参数表&amp;gt;) &amp;lt;文字串&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例： &lt;code&gt;#define max(a,b) ((a)&amp;gt;(b)?(a):(b))&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;9内联函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#9内联函数&#34;&gt;#&lt;/a&gt; 9. 内联函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在定义函数定义时，在函数返回类型之前加上一个 &lt;code&gt;inline&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;编译时，直接将被调函数体的代码直接插到调用处&lt;/li&gt;
&lt;li&gt;可以提高程序的运行速度&lt;/li&gt;
&lt;li&gt;有些函数即使加上了 &lt;code&gt;inline&lt;/code&gt;  关键词，编译程序也不会把它作为内联函数来对待（是否内联由编译器决定）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;10带默认值的形式参数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#10带默认值的形式参数&#34;&gt;#&lt;/a&gt; 10. 带默认值的形式参数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;有默认值的形参应处于形参表的&lt;strong&gt;右部&lt;/strong&gt;。例如:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void f(int a, int b=1, int c=O);//OK&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void f(int a, int b=1, int c); //Error&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对参数默认值的指定只在函数声明处有意义。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在不同的源文件中，对同一个函数的声明可以对它的同一个参数指定不同的默认值；在同一个源文件中，对同一个函数的声明只能对它的每一个参数指定一次默认值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;11函数名重载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11函数名重载&#34;&gt;#&lt;/a&gt; 11. 函数名重载&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;相同函数名，具有不同的参数列表&lt;/strong&gt;（参数的类型或个数不同）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参数类型和个数相同，只有返回值类型不同不能对他们重载函数名&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;确定一个&lt;strong&gt;对重载函数的调用对应着哪一个重载函数定义的过程&lt;/strong&gt;称为&lt;strong&gt;绑定&lt;/strong&gt;（binding，又称定联、联编、捆绑)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按参数类型匹配优先级：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;精确匹配：细微的转换（数组名转化成第一个元素的指针、函数名转换成函数指针等）后相同&lt;/li&gt;
&lt;li&gt;提升匹配&lt;/li&gt;
&lt;li&gt;标准转换匹配
&lt;ul&gt;
&lt;li&gt;任何算术类型可以互相转换&lt;/li&gt;
&lt;li&gt;枚举类型可以转换成任何算术类型&lt;/li&gt;
&lt;li&gt;零可以转换成任何算术类型或指针类型&lt;/li&gt;
&lt;li&gt;任何类型的指针可以转换成 void *&lt;/li&gt;
&lt;li&gt;派生类指针可以转换成基类指针&lt;/li&gt;
&lt;li&gt;每个标准转换都是平等的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自定义转换匹配&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12λlambda表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12λlambda表达式&#34;&gt;#&lt;/a&gt; 12.λ（lambda）表达式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;匿名函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;[&amp;lt;环境变量使用说明&amp;gt;] &amp;lt;形式参数&amp;gt; &amp;lt;返回值类型&amp;gt; &amp;lt;函数体&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;环境变量使用说明&amp;gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;空：不能使用外层作用域中的自动变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;amp;：按引用方式使用外层作用域中的自动变量（可以改变这些变量的值）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;=：按值方式使用外层作用域中的自动变量（不可以改变这些变量的值）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以使用 &lt;code&gt;&amp;amp;&lt;/code&gt;   &lt;code&gt;=&lt;/code&gt;  统一指定外层作用域中的自动变量的使用方式，与可以在变量名前加 &lt;code&gt;$&lt;/code&gt;   &lt;code&gt;=&lt;/code&gt; （默认为 &lt;code&gt;=&lt;/code&gt; ）单独指定&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;&amp;#123; int k,m,n;
    ... [](int x) -&amp;gt; int &amp;#123;return x;&amp;#125; &amp;#x2F;&amp;#x2F;不能使用k、m、n
    ...[&amp;amp;](int x) -&amp;gt; int &amp;#123;k++,m++,n++; return k+m+n+x;&amp;#125; &amp;#x2F;&amp;#x2F;k、m、n可以被修改
    ...[&amp;#x3D;](int x) -&amp;gt; int &amp;#123;return k+m+n+x;&amp;#125; &amp;#x2F;&amp;#x2F;k、m、n不可以被修改
    ...[&amp;amp;,n](int x) -&amp;gt; int &amp;#123;k++,m++; return x+k+m+n;&amp;#125; &amp;#x2F;&amp;#x2F;n不能被修改
    ...[&amp;#x3D;,&amp;amp;n](int x) -&amp;gt; int &amp;#123;n++; return x+k+m+n;&amp;#125; &amp;#x2F;&amp;#x2F;只有n能被修改
    ...[&amp;amp;k,m](int x) -&amp;gt; int &amp;#123;k++; return x+k+m;&amp;#125; &amp;#x2F;&amp;#x2F;只能使用k、m，k可以被修改
    ...[&amp;#x3D;] &amp;#123;return k+m+n;&amp;#125; &amp;#x2F;&amp;#x2F;没有参数，返回值类型为int（编译器自动确定）
&amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2 id=&#34;五-构造数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#五-构造数据类型&#34;&gt;#&lt;/a&gt; 五、构造数据类型&lt;/h2&gt;
&lt;h3 id=&#34;一枚举&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一枚举&#34;&gt;#&lt;/a&gt; （一）枚举&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;设计者自己来定义值集的数据类型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;1枚举类型的定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1枚举类型的定义&#34;&gt;#&lt;/a&gt; 1. 枚举类型的定义&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;enum &amp;lt;枚举类型名&amp;gt; &amp;#123;&amp;lt;枚举值表&amp;gt;&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例： &lt;code&gt;enum Day &amp;#123;SUN,MON,TUE,WED,THU,FRI,SAT&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;默认情况下，第一个枚举值为 0，以此加 1，也可以显式地给枚举值指定值。&lt;/p&gt;
&lt;p&gt;例： &lt;code&gt;enum Day &amp;#123;SUN=7,MON=1,TUE,WED,THU,FRI,SAT&amp;#125;&lt;/code&gt;   TUE=2,WED=3......&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;枚举类型变量的定义： &lt;code&gt;&amp;lt;枚举类型名&amp;gt;&amp;lt;变量表&amp;gt;;&lt;/code&gt;  或 &lt;code&gt;enum &amp;lt;枚举类型名&amp;gt;&amp;lt;变量表&amp;gt;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;枚举类型和枚举类型变量同时定义： &lt;code&gt;enum Day &amp;#123;SUN,MON,TUE,WED,THU,FRI,SAT&amp;#125;d1,d2,d3;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2枚举类型的运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2枚举类型的运算&#34;&gt;#&lt;/a&gt; 2. 枚举类型的运算&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;赋值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一个枚举类型的变量只能在相应枚举类型的值集中取值。&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;Day day;
day &amp;#x3D; SUN;&amp;#x2F;&amp;#x2F;OK&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;s&gt; &lt;code&gt;day = 1;&lt;/code&gt; &lt;/s&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;相同枚举类型之间可以进行赋值操作。&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;Day d1,d2;
d2 &amp;#x3D; d1;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以把一个枚举值赋值给一个整型变量。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;int a = d1;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;但不能把一个整型值赋值给枚举类型的变量.&lt;/p&gt;
&lt;p&gt;&lt;s&gt; &lt;code&gt;d1 = a;&lt;/code&gt; &lt;/s&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;d1 = (Day)a;//可以，但不安全&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;比较：&lt;/p&gt;
&lt;p&gt;系统首先将枚举值转换为对应的整型值，然后进行比较。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;算术运算：&lt;/p&gt;
&lt;p&gt;运算时，将枚举值转换为对应的整型值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不能对枚举类型的值直接进行输入，但可以进行输出。~~ &lt;code&gt;cin &amp;gt;&amp;gt; d&lt;/code&gt; ~~ 例：&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;Day d;
cout &amp;lt;&amp;lt; d;&amp;#x2F;&amp;#x2F;输出时，枚举类型的值将转换成int型&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二数组&#34;&gt;#&lt;/a&gt; （二）数组&lt;/h3&gt;
&lt;h4 id=&#34;1一维数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1一维数组&#34;&gt;#&lt;/a&gt; 1. 一维数组&lt;/h4&gt;
&lt;h5 id=&#34;1定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1定义&#34;&gt;#&lt;/a&gt; （1）定义：&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;直接定义变量 &lt;code&gt;int a[10]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;定义数组类型，再定义变量  &lt;code&gt;typedef int A[10];&lt;/code&gt;   &lt;code&gt;A a;&lt;/code&gt;  （数组类型的元素个数是固定的，在程序执行中不能改变）&lt;/li&gt;
&lt;li&gt;不能通过赋值修改数组长度&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;2变量的初始化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2变量的初始化&#34;&gt;#&lt;/a&gt; （2）变量的初始化&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;int a[10]=&amp;#123;1,2,3,4,5,6,7,8,9,10&amp;#125;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;若初始化表中的值的个数少于数组元素个数，则&lt;strong&gt;不足部分的数组元素初始化为 0&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;int c[]=&amp;#123;1,2,3&amp;#125;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;若对每个元素都进行了初始化，可以省略元素个数，元素个数由初始化的个数来定&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若不使用 &lt;code&gt;=&amp;#123;&amp;#125;&lt;/code&gt;  赋初值时（此时一定会定义长度）， &lt;code&gt;static&lt;/code&gt;  和全局数组均默认其为 0 或‘0’，其他局部数组赋值随机&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2一维字符数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2一维字符数组&#34;&gt;#&lt;/a&gt; 2. 一维字符数组&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在字符串中最后一个字符的后面存储一个 &lt;code&gt;&#39;\0&#39;&lt;/code&gt; ，&lt;strong&gt;作为字符串的结束标记&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若初始化表中的值的个数少于数组元素个数，则&lt;strong&gt;不足部分的数组元素初始化为 &#39;\0&#39;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化： &lt;code&gt;char s[10]=&amp;#123;&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;,&#39;\0&#39;&amp;#125;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;（只有这种形式程序中必须显式的加上 &lt;code&gt;&#39;\0&#39;&lt;/code&gt; ）&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;char* buf1 &amp;#x3D; &amp;quot;abcd12345678&amp;quot;;
char buf2[] &amp;#x3D; &amp;quot;abcd12345678&amp;quot;;
cout &amp;lt;&amp;lt; sizeof(buf1) &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;8
cout &amp;lt;&amp;lt; sizeof(buf2) &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;13 (包含结束符\0)
cout &amp;lt;&amp;lt; strlen(buf1) &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;12
cout &amp;lt;&amp;lt; strlen(buf2) &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;12

char a[]&amp;#x3D;&amp;#123;&amp;#39;h&amp;#39;,&amp;#39;e&amp;#39;,&amp;#39;l&amp;#39;,&amp;#39;l&amp;#39;,&amp;#39;o&amp;#39;&amp;#125;; &amp;#x2F;&amp;#x2F;长度为5
char a[]&amp;#x3D; &amp;quot;hello&amp;quot;; &amp;#x2F;&amp;#x2F;长度为6

&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3二维数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3二维数组&#34;&gt;#&lt;/a&gt; 3. 二维数组&lt;/h4&gt;
&lt;h5 id=&#34;1定义-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1定义-2&#34;&gt;#&lt;/a&gt; （1）定义：&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int a[10][5]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;typedef int A[10][5];&lt;/code&gt;   &lt;code&gt;A a;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;2初始化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2初始化&#34;&gt;#&lt;/a&gt; （2）初始化：&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;int a[2][3]=&amp;#123;&amp;#123;1,2,3&amp;#125;,&amp;#123;4,5,6&amp;#125;&amp;#125;;&lt;/code&gt;  或 &lt;code&gt;int a[2][3]=&amp;#123;1,2,3,4,5,6&amp;#125;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;初始化的值可以少于数组元素的个数，元素默认初始化为 0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数组的行数可以省略，其行数由初始化的个数来决定（&lt;strong&gt;只能省略最高维&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;int a[][3]=&amp;#123;&amp;#123;1,2,3&amp;#125;,&amp;#123;4,5,6&amp;#125;,&amp;#123;7,8,9&amp;#125;&amp;#125;;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;由于不存在数组的长度这个属性，在将数组作为函数参数时，通常同时将长度作为参数传输&lt;/p&gt;
&lt;p&gt;在 main 函数中可以使用 &lt;code&gt;sizeof(a)&lt;/code&gt;  获得数组长度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;三结构类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三结构类型&#34;&gt;#&lt;/a&gt; （三）结构类型&lt;/h3&gt;
&lt;h4 id=&#34;1定义-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1定义-3&#34;&gt;#&lt;/a&gt; 1. 定义：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;结构类型定义 &lt;code&gt;struct &amp;lt;结构类型名&amp;gt; &amp;#123;&amp;lt;成员表&amp;gt;&amp;#125;;&lt;/code&gt;  例：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;struct Student&amp;#123;
    int no;
    char name[20];
    Sex sex;
&amp;#125;;
enum Sex &amp;#123;MALE,FEMALE&amp;#125;;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;变量定义  &lt;code&gt;&amp;lt;结构类型名&amp;gt; &amp;lt;变量名表&amp;gt;&lt;/code&gt;  或  &lt;code&gt;struct &amp;lt;结构类型名&amp;gt; &amp;lt;变量名表&amp;gt;&lt;/code&gt;  例：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Student a,b,c;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;也可以在定义结构类型的同时定义结构类型的变量，这时结构类型名可以省略，例：&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;struct&amp;#123;
    int x;
    double y;
&amp;#125;a,b;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;struct&lt;/code&gt;  默认访问权限是 public， &lt;code&gt;class&lt;/code&gt;  默认访问权限是 private&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2初始化-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2初始化-2&#34;&gt;#&lt;/a&gt; 2. 初始化：&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;定义结构类型时不能对其成员初始化&lt;/strong&gt;。因为类型不是程序运行时刻的实体，他们不占有内存空间，初始化没意义。可以在定义变量时初始化，例： &lt;code&gt;Student a=&amp;#123;2,Amy,FEMALE&amp;#125;;&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;3访问结构的成员&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3访问结构的成员&#34;&gt;#&lt;/a&gt; 3. 访问结构的成员&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;结构类型变量&amp;gt;.&amp;lt;成员名&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不同结构类型的成员的名字可以相同，它们可以与程序中非结构成员的名字相同；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结构类型的名字可以与同一作用域中的其他非结构类型标识符相同；&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;struct A&amp;#123;
    ...;
&amp;#125;;
int A;
...
struct A a;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;对于上述这种情况，使用结构类型 A 必须要在结构类型名前加上关键字 &lt;code&gt;struct&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4结构数据的赋值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4结构数据的赋值&#34;&gt;#&lt;/a&gt; 4. 结构数据的赋值&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;对结构类型的数据可以整体赋值，但此操作必须要在相同的结构类型之间进行，不同类型结构之间不能相互赋值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;四联合类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四联合类型&#34;&gt;#&lt;/a&gt; （四）联合类型&lt;/h3&gt;
&lt;h4 id=&#34;1定义-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1定义-4&#34;&gt;#&lt;/a&gt; 1. 定义：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;联合类型定义  例：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;union A&amp;#123; &amp;#x2F;&amp;#x2F;A是一个联合类型
    int i;
    char c;
    double d;
&amp;#125;;
A a; &amp;#x2F;&amp;#x2F;a是一个联合类型的变量

...a.i... &amp;#x2F;&amp;#x2F;可以把a作为int型来用&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;联合类型的所有成员占有同一块内存空间，该内存空间的大小为其最大成员所需要的内存空间的大小。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;可以进行整体赋值，可传给函数，可作为函数返回值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;五指针类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#五指针类型&#34;&gt;#&lt;/a&gt; （五）指针类型&lt;/h3&gt;
&lt;h4 id=&#34;1指针类型的定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1指针类型的定义&#34;&gt;#&lt;/a&gt; 1. 指针类型的定义&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;指针是内存地址的抽象表示，&lt;strong&gt;一个指针代表了一个内存地址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;获取变量的地址： &lt;code&gt;&amp;amp;&amp;lt;变量名&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;每一个地址都属于某一种指针类型&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;类型&amp;gt; *&amp;lt;指针变量&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例： &lt;code&gt;int *p,*q; //p q均为指针变量&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 	`int *p,q; //p为指针变量，q为int型变量`

 	`int* p,q; //p为指针变量，q为int型变量`
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;typedef &amp;lt;类型&amp;gt;* &amp;lt;指向数据类型数据的指针类型&amp;gt;;
&amp;lt;指向数据类型数据的指针类型&amp;gt; &amp;lt;指针类型的变量名&amp;gt;;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;
例：&amp;#96;typedef int* Pointer;&amp;#96; &amp;#96;Pointer p,q;&amp;#96;

- &amp;#96;void *p&amp;#96; 表明该指针变量可以指向任意类型的数据

- 符号常量&amp;#96;NULL&amp;#96; 空指针

&amp;gt; 指针变量拥有自己的内存空间，**在该空间中存储的是另一个数据的内存地址**
&amp;gt;
&amp;gt; 例：&amp;#96;int x&amp;#x3D;1; int *p&amp;#x3D;&amp;amp;x;&amp;#96;

#### 2.指针类型的基本操作

##### （1）赋值

&amp;#96;&amp;#96;&amp;#96;c++
int x,*p,*p1;
double y,*q;
......
&amp;#x2F;&amp;#x2F;相同类型指针变量可以互相赋值
p &amp;#x3D; &amp;amp;x;
q &amp;#x3D; &amp;amp;y;
p &amp;#x3D; &amp;amp;y; &amp;#x2F;&amp;#x2F;Error 类型不同不能赋值
p1 &amp;#x3D; p;
p &amp;#x3D; 0; &amp;#x2F;&amp;#x2F;使得p不指向任何变量
p &amp;#x3D; 120; &amp;#x2F;&amp;#x2F;Error 120为int型&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;任意类型的都可以赋给 &lt;code&gt;void*&lt;/code&gt;  类型的指针变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;2间接访问操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2间接访问操作&#34;&gt;#&lt;/a&gt; （2）间接访问操作&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;*&amp;lt;指针变量&amp;gt;&lt;/code&gt;  访问指针变量所指向的变量&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int x;
int *p &amp;#x3D; &amp;amp;x;
&amp;#x2F;&amp;#x2F;赋值：
x &amp;#x3D; 1; &amp;#x2F;&amp;#x2F;或 
*p &amp;#x3D; 1; &amp;#x2F;&amp;#x2F;此时x&amp;#x3D;1&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用指针变量前，必须先给它赋一个指向合法具体对象的地址值&lt;/p&gt;
&lt;p&gt;Error： &lt;code&gt;int *px; *px = x;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Error： &lt;code&gt;char *s; cin&amp;gt;&amp;gt;s;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;3指针的运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3指针的运算&#34;&gt;#&lt;/a&gt; （3）指针的运算&lt;/h5&gt;
&lt;h6 id=&#34;1一个指针加上或减去一个整型值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1一个指针加上或减去一个整型值&#34;&gt;#&lt;/a&gt; ①一个指针加上或减去一个整型值&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;通常用此访问数组元素&lt;/p&gt;
&lt;p&gt;一个指针可以与一个整型值进行加或减运算，运算结果为与该指针同类型的指针&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int a[10];
int *p &amp;#x3D; &amp;amp;a[0]; &amp;#x2F;&amp;#x2F;p指向数组a的第0个元素
p &amp;#x3D; p + 3; &amp;#x2F;&amp;#x2F;p指向数组a的第3个元素
p++; &amp;#x2F;&amp;#x2F;p指向数组a的第4个元素&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int *p;
double *q;
p++; &amp;#x2F;&amp;#x2F;p的值加sizeof(int)
q -&amp;#x3D;4; &amp;#x2F;&amp;#x2F;q的值减4*sizeof(double)&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281109576.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;y = *px++;&lt;/code&gt;  相当于  &lt;code&gt;y = *px  (px++)&lt;/code&gt;  （取当前元素，指向下一个）&lt;/p&gt;
&lt;h6 id=&#34;2两个同类型的指针相减&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2两个同类型的指针相减&#34;&gt;#&lt;/a&gt; ②两个同类型的指针相减&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;两个同类型的指针相减，结果为两个指针之间相差元素的个数&lt;/p&gt;
&lt;p&gt;两个指针不能相加&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int a[10];
int *p &amp;#x3D; &amp;amp;a[0];
int *q &amp;#x3D; &amp;amp;a[3];
cout &amp;lt;&amp;lt; q-p &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;输出3&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h6 id=&#34;3两个同类型的指针比较&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3两个同类型的指针比较&#34;&gt;#&lt;/a&gt; ③两个同类型的指针比较&lt;/h6&gt;
&lt;p&gt;即：比较他们所对应的内存地址的大小&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int a[10],sum &amp;#x3D; 0,*p &amp;#x3D; &amp;amp;a[0],*q &amp;#x3D; &amp;amp;a[3];
while(p&amp;lt;&amp;#x3D;q)&amp;#123;
    sum +&amp;#x3D; *p;
    p++;
&amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h5 id=&#34;4指针的输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4指针的输出&#34;&gt;#&lt;/a&gt; （4）指针的输出&lt;/h5&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int x&amp;#x3D;1;
int *p&amp;#x3D;&amp;amp;x;
cout &amp;lt;&amp;lt; p; &amp;#x2F;&amp;#x2F;输出p的值（x的地址）
cout &amp;lt;&amp;lt; *p; &amp;#x2F;&amp;#x2F;输出p指向的值（x的值）&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当输出字符指针 &lt;code&gt;*char&lt;/code&gt;  时，输出的不是指针值，而是该指针所指向的字符串（特例）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;char str[] &amp;#x3D; &amp;quot;ABCD&amp;quot;;
char *p&amp;#x3D;&amp;amp;str[0];
cout &amp;lt;&amp;lt; p; &amp;#x2F;&amp;#x2F;输出p指向的字符串：ABCD
cout &amp;lt;&amp;lt; *p; &amp;#x2F;&amp;#x2F;输出p指向的字符：A

cout &amp;lt;&amp;lt; (void *)p; &amp;#x2F;&amp;#x2F;输出p的值，即字符串&amp;quot;ABCD&amp;quot;的内存首地址&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h4 id=&#34;3指针作为参数类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3指针作为参数类型&#34;&gt;#&lt;/a&gt; 3. 指针作为参数类型&lt;/h4&gt;
&lt;h5 id=&#34;1提高传参效率&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1提高传参效率&#34;&gt;#&lt;/a&gt; （1）提高传参效率&lt;/h5&gt;
&lt;h5 id=&#34;2通过参数返回函数的计算结果&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2通过参数返回函数的计算结果&#34;&gt;#&lt;/a&gt; （2）通过参数返回函数的计算结果&lt;/h5&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;void swap(int *px, int *py)&amp;#123;
    int t &amp;#x3D; *px;
    *px &amp;#x3D; *py;
    *py &amp;#x3D; t;
&amp;#125;
int main()&amp;#123;
    int a&amp;#x3D;0.b&amp;#x3D;1;
    swap(&amp;amp;a,&amp;amp;b);
    cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; b; &amp;#x2F;&amp;#x2F; 1 0
&amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h5 id=&#34;3指向常量的指针&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3指向常量的指针&#34;&gt;#&lt;/a&gt; （3）指向常量的指针&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;指向&lt;strong&gt;常量的指针&lt;/strong&gt;（常量指针）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;const &amp;lt;类型&amp;gt; *&amp;lt;指针变量&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;const int *p; &amp;#x2F;&amp;#x2F;p为指向常量的指针变量
const int x &amp;#x3D; 0; &amp;#x2F;&amp;#x2F; 常量必须初始化
p &amp;#x3D; &amp;amp;x;
*p &amp;#x3D; 1; &amp;#x2F;&amp;#x2F;Error 不能通过常量指针改变它所指向的常量的值
int *q;
q &amp;#x3D; &amp;amp;x; &amp;#x2F;&amp;#x2F;Error 指向变量的指针变量不能指向一个常量&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int a，b；
 const int *p&amp;#x3D;&amp;amp;a &amp;#x2F;&amp;#x2F;常量指针 可以指向变量（但不能改变其值）
&amp;#x2F;&amp;#x2F;那么分为一下两种操作
*p&amp;#x3D;9; &amp;#x2F;&amp;#x2F;操作错误
p&amp;#x3D;&amp;amp;b; &amp;#x2F;&amp;#x2F;操作成功&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;指针类型的常量&lt;/strong&gt;（指针常量）是一个常量，但是是指针修饰的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int x,y;
int *const p &amp;#x3D; &amp;amp;x; &amp;#x2F;&amp;#x2F;定义了一个指针类型的常量p，p指向一个变量
*p &amp;#x3D; 1; &amp;#x2F;&amp;#x2F;*p是一个常量
p &amp;#x3D; *y; &amp;#x2F;&amp;#x2F;Error p是一个常量，其值不能被修改&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;
&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int a，b；
int * const p&amp;#x3D;&amp;amp;a &amp;#x2F;&amp;#x2F;指针常量
&amp;#x2F;&amp;#x2F;那么分为一下两种操作
*p&amp;#x3D;9;&amp;#x2F;&amp;#x2F;操作成功
p&amp;#x3D;&amp;amp;b;&amp;#x2F;&amp;#x2F;操作错误&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;const &amp;lt;类型&amp;gt; *&lt;/code&gt;   常量指针：不可以改变值，可以改变指向&lt;/li&gt;
&lt;li&gt;&lt;code&gt;* const&lt;/code&gt;   指针常量：不可以改变指向，可以改变值&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;指向常量的指针常量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;const int x &amp;#x3D; 0,y &amp;#x3D; 1;
const int * const p &amp;#x3D; &amp;amp;x; &amp;#x2F;&amp;#x2F;p是一个指向常量的指针常量&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;例：&lt;strong&gt;C&lt;/strong&gt;（A B 相同）&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;以下哪个仅表示指针指向不能变
A.const char*
B.char const*
C.char* const
D.const char* const&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h5 id=&#34;4作为返回值类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4作为返回值类型&#34;&gt;#&lt;/a&gt; （4）作为返回值类型&lt;/h5&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int *max(const int x[], int num)&amp;#123;
    int max_index&amp;#x3D;O;
	for (int i&amp;#x3D;1; i&amp;lt;num; i++)&amp;#123;
        if(x[i]&amp;gt; x[max_index])&amp;#123;
            max_index &amp;#x3D; i;
        &amp;#125;
    &amp;#125;
	return (int*)&amp;amp;x[max_index];
&amp;#125;

int main()&amp;#123;
    int a[100];
    ...
	cout &amp;lt;&amp;lt; *max(a,100)&amp;lt;&amp;lt; endl;
    return 0;
&amp;#125;
&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不能把局部量的地址作为指针返回给调用者&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int *f()&amp;#123;
    int i&amp;#x3D;O;
    return &amp;amp;i;
&amp;#125; &amp;#x2F;&amp;#x2F;f调用完i的变量空间就归还了
int*g()&amp;#123;
    int j&amp;#x3D;1; &amp;#x2F;&amp;#x2F;j与i分配的是同一块空间
    return &amp;amp;j;
&amp;#125;
int main()&amp;#123;
    int x ;
    int *p&amp;#x3D;f();
    int *q&amp;#x3D;g();
    x&amp;#x3D;*p+*q;
	cout &amp;lt;&amp;lt;x &amp;lt;&amp;lt;endl; &amp;#x2F;&amp;#x2F;输出2 (p和q用的同一空间，地址相同，该内存空间最后的值是1)
    return 0;
&amp;#125;
&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h4 id=&#34;4指针与动态变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4指针与动态变量&#34;&gt;#&lt;/a&gt; 4. 指针与动态变量&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;数组元素个数不能是变量，必须在编译时就能确定它的值是多少 &lt;s&gt; &lt;code&gt;int n; cin &amp;gt;&amp;gt; n; int a[n];&lt;/code&gt; &lt;/s&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;1动态变量的创建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1动态变量的创建&#34;&gt;#&lt;/a&gt; （1）动态变量的创建&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;动态变量是指在程序运行中，由程序根据需要所创建的变量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;1new-类型名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1new-类型名&#34;&gt;#&lt;/a&gt; ① &lt;code&gt;new &amp;lt;类型名&amp;gt;&lt;/code&gt;&lt;/h6&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int *p, *p0;
p &amp;#x3D; new int;&amp;#x2F;&amp;#x2F;创建了一个int型动态变量，p指向该变量
*p &amp;#x3D; 1; &amp;#x2F;&amp;#x2F;只能通过改变指针变量来访问该动态的整型变量
p0 &amp;#x3D; new int(10); &amp;#x2F;&amp;#x2F;创建一个int型数，并且用()括号中的数据进行初始化&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;new&lt;/code&gt;  操作类型应保持一致&lt;/p&gt;
&lt;h6 id=&#34;2new-类型名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2new-类型名&#34;&gt;#&lt;/a&gt; ② &lt;code&gt;new &amp;lt;类型名&amp;gt; [][]&lt;/code&gt;&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;除第一维的大小外，其他维的大小必须是常量或常量表达式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int *p; &amp;#x2F;&amp;#x2F;p为指向一个int型数据的指针
int n;
p &amp;#x3D; new int[n];
&amp;#x2F;&amp;#x2F;用 p[i]访问第i个元素&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int (*q)[20]; &amp;#x2F;&amp;#x2F;q为一个指向由20个int型元素所构成的一维数组的指针
		      &amp;#x2F;&amp;#x2F;等价于typedef int A[20]; A *q;
int n;
...
q&amp;#x3D; new int[n][20]; &amp;#x2F;&amp;#x2F;创建一个n行、20列的二维动态数组，返回第一行的地址。 等价于: q&amp;#x3D;new A[n];
...q[i][j]... &amp;#x2F;&amp;#x2F;访问q指向的二维数组的第i行第j列的元素&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如何创建一个 m 行、n 列的动态数组？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用一维数组实现: &lt;code&gt;int *p=new int[m*n];&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第 i 行、第 j 列元素: &lt;code&gt;*(p+i*n+j)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;3void-mallocunsigned-int-size&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3void-mallocunsigned-int-size&#34;&gt;#&lt;/a&gt; ③ &lt;code&gt;void *malloc(unsigned int size)&lt;/code&gt;&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;#include &amp;lt;cstdlib&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int *p1,*p2,*r;
typedef int A[20];
A *q;
int m,n;
...
p1 &amp;#x3D; (int *)malloc(sizeof(int)); &amp;#x2F;&amp;#x2F;创建一个int型动态变量
p2 &amp;#x3D; (int *)malloc(sizeof(int)*n); &amp;#x2F;&amp;#x2F;创建一个由n个int型元素构成的一维动态数组变量

q &amp;#x3D; (A *)malloc(sizeof(int)*n*20);&amp;#x2F;&amp;#x2F;创建一个n行20列的二维动态数组变量
r &amp;#x3D; (int *)malloc(sizeof(int)*m*n); &amp;#x2F;&amp;#x2F;创建一个隐含的m行n列的二维动态数组变量&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;new&lt;/code&gt;   &lt;code&gt;malloc&lt;/code&gt;  区别：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;new&lt;/code&gt;  自动计算所需分配的空间大小，而 &lt;code&gt;malloc&lt;/code&gt;  需要显式指出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;new&lt;/code&gt;  自动返回相应类型的指针，而 &lt;code&gt;malloc&lt;/code&gt;  要做显式类型转换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;2动态变量的访问&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2动态变量的访问&#34;&gt;#&lt;/a&gt; （2）动态变量的访问&lt;/h5&gt;
&lt;p&gt;动态变量没有名字，对动态变量的访问需要通过指向动态变量的指针变量来进行（间接访问）。&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int *p,*q;
p &amp;#x3D;new int;
...*p... &amp;#x2F;&amp;#x2F;访问上面创建的int型动态变量q&amp;#x3D;new int[n];
...*(q+3)... &amp;#x2F;&amp;#x2F;或...q[3]...访问上面创建的动态数组中的第4个元素&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h5 id=&#34;3动态变量的撤销&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3动态变量的撤销&#34;&gt;#&lt;/a&gt; （3）动态变量的撤销&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 C++ 中，动态变量需要由程序显式地撤消（使之消亡）&lt;/p&gt;
&lt;p&gt;例如:&lt;br&gt;
 &lt;code&gt;delete p;//撤消p指向的int型动态变量&lt;/code&gt; 或 &lt;code&gt;free(p);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;再例如:&lt;br&gt;
 &lt;code&gt;delete []q;//撤消q指向的动态数组&lt;/code&gt; 或  &lt;code&gt;free(q);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一般来说，用 new 创建的动态变量需要用 delete 来撤销；用 malloc 创建的动态变量则需要用 free 撤销。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;1delete-指针变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1delete-指针变量&#34;&gt;#&lt;/a&gt; ① &lt;code&gt;delete &amp;lt;指针变量&amp;gt;&lt;/code&gt;&lt;/h6&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int *p &amp;#x3D; new int;
delete p;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h6 id=&#34;2delete-指针变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2delete-指针变量&#34;&gt;#&lt;/a&gt; ② &lt;code&gt;delete []&amp;lt;指针变量&amp;gt;&lt;/code&gt;&lt;/h6&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int *p &amp;#x3D; new int[20];
delete []p;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h6 id=&#34;3void-freevoid-p&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3void-freevoid-p&#34;&gt;#&lt;/a&gt; ③ &lt;code&gt;void free(void *p)&lt;/code&gt;&lt;/h6&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;p1 &amp;#x3D; (int *)malloc(sizeof(int));
q &amp;#x3D; (A *)malloc(sizeof(int)*n*20);
free(p);
free(q);&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用 delete 和 free&lt;strong&gt; 只能撤消动态变量&lt;/strong&gt;！&lt;s&gt; &lt;code&gt;int x,*p; p = &amp;amp;x; delete p;&lt;/code&gt; &lt;/s&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用 delete 和 free 撤消动态数组时，其中的指针变量必须指向数组的第一个元素&lt;/p&gt;
&lt;p&gt;&lt;s&gt; &lt;code&gt;int *p = new int[n];  p++; delete []p;&lt;/code&gt; &lt;/s&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;悬浮指针&lt;/p&gt;
&lt;p&gt;用 delete 或 free 撤消动态变量后，C++ 编译程序一般不会把指向它的指针变量的值赋为 0，这时该指针指向一个无效空间。&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int *p;
p &amp;#x3D; new int;
delete p;&amp;#x2F;&amp;#x2F;撤销了p所指向的动态变量
*p&amp;#x3D; 1;&amp;#x2F;&amp;#x2F;逻辑错误，P指向的内存空间已经分配给其他动态变量了&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内存泄漏&lt;/p&gt;
&lt;p&gt;没有撤消动态变量，而把指向它的指针变量指向了别处或指向它的指针变量的生存期结束了，这时，这个动态变量存在但不可访问（这个动态变量已成为一个 “孤儿”），从而浪费空间。&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int x,*p;
p &amp;#x3D; new int[10];&amp;#x2F;&amp;#x2F;动态数组
p&amp;#x3D;&amp;amp;x; &amp;#x2F;&amp;#x2F;之后，上面的动态数组就访问不到了!&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;5指针与数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5指针与数组&#34;&gt;#&lt;/a&gt; 5. 指针与数组&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;指针访问数组元素能提高效率&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;1一维数组的首地址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1一维数组的首地址&#34;&gt;#&lt;/a&gt; （1）一维数组的首地址&lt;/h5&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int a[10]; &amp;#x2F;&amp;#x2F;等价于: typedef int A[10]; A a;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h6 id=&#34;1通过数组首元素来获得&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1通过数组首元素来获得&#34;&gt;#&lt;/a&gt; ①通过数组首元素来获得&lt;/h6&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int *p;
p &amp;#x3D; &amp;amp;a[0];
或
p &amp;#x3D; a; &amp;#x2F;&amp;#x2F;把一维数组a隐式类型转换成第一个元素的地址: &amp;amp;a[0]
p++;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;把一维数组传给一个函数时，编译器也会对数组变量进行类型转换 例： &lt;code&gt;int a[10]; f(a);&lt;/code&gt;  相当于 &lt;code&gt;f(&amp;amp;a[0]);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字符串常量也可隐式转换成他的第一个字符在内存中的首地址。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;2通过整个数组获得&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2通过整个数组获得&#34;&gt;#&lt;/a&gt; ②通过整个数组获得&lt;/h6&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;A *q;&amp;#x2F;&amp;#x2F;或int(*q)[10];
q &amp;#x3D; &amp;amp;a; &amp;#x2F;&amp;#x2F;整个数组的地址，它与&amp;amp;a[0]值相同，但类型不同
q++;&amp;#x2F;&amp;#x2F;加:10×sizeof(int)
&amp;#x2F;&amp;#x2F;q为1x10的二维数组，q[0][i]或(*q)[i]用于按行来访问二维数组&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当创建一个动态的一维数组时，得到的是第一个元素的地址。例如:&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int n;
int *p;
p &amp;#x3D; new int[n];&amp;#x2F;&amp;#x2F;创建一个由n个int型元素构成的一维动态数组，返回第一个元素的地址，其类型为: int *&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;2多维数组的首地址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2多维数组的首地址&#34;&gt;#&lt;/a&gt; （2）多维数组的首地址&lt;/h5&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int b[5][10];&amp;#x2F;&amp;#x2F;等价于: typedef int A[10]; A b[5];&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int b[2][3]=&amp;#123;1,2,3,4,5,6&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;1通过第一行第一列元素来获得&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1通过第一行第一列元素来获得&#34;&gt;#&lt;/a&gt; ①通过第一行第一列元素来获得&lt;/h6&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int *p;
p&amp;#x3D; &amp;amp;b[0][0];&amp;#x2F;&amp;#x2F;或p&amp;#x3D; b[0];(自动转换成&amp;amp;b[0][0])第一行第一列元素的地址
p++;&amp;#x2F;&amp;#x2F;加:sizeof(int)&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问元素  &lt;code&gt;p[i]&lt;/code&gt;   &lt;code&gt;*(p+i)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;2通过第一行的一维数组来获得&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2通过第一行的一维数组来获得&#34;&gt;#&lt;/a&gt; ②通过第一行的一维数组来获得&lt;/h6&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;A *q; &amp;#x2F;&amp;#x2F;或int (*q)[10];
q&amp;#x3D;&amp;amp;b[0];&amp;#x2F;&amp;#x2F;或q&amp;#x3D;b; (自动转换成&amp;amp;b[0]) 第一行的地址
q++; &amp;#x2F;&amp;#x2F;加:10×sizeof(int) q指向下一行&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问元素  &lt;code&gt;q[i][j]&lt;/code&gt;   &lt;code&gt;*(*(q+i)+j)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;q++&lt;/code&gt; （此时指向第 1 行)  &lt;code&gt;**q&lt;/code&gt;  4（第 1 行第 0 个元素）   &lt;code&gt;*(*q+1)&lt;/code&gt;  5（第 1 行第 1 个元素）  &lt;code&gt;(*q)[1]&lt;/code&gt;  5&lt;/p&gt;
&lt;h6 id=&#34;3通过整个数组来获得&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3通过整个数组来获得&#34;&gt;#&lt;/a&gt; ③通过整个数组来获得&lt;/h6&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;B *r; &amp;#x2F;&amp;#x2F;或int (*r)[5][10];
r &amp;#x3D;&amp;amp;b;&amp;#x2F;&amp;#x2F;整个二维数组的地址
r++; &amp;#x2F;&amp;#x2F;加:5×10×sizeof(int)
&amp;#x2F;&amp;#x2F;在三维数组中使用&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;访问元素 &lt;code&gt;r[0][i][j]&lt;/code&gt;   &lt;code&gt;*(r)[i][j]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例题：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;设int a[3][4]&amp;#x3D;&amp;#123;&amp;#123;1,3,5,7&amp;#125;,&amp;#123;2,4,6,8&amp;#125;&amp;#125;;则*(*a+1)的值为  3 （第0行第1个元素）&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于一个动态的 n 维数组，实际上是按一维动态数组来创建的，返回的首地址类型是去掉第一维后的数组指针类型。例如，下面创建一个动态的二维数组：&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;typedef int A[10];&amp;#x2F;&amp;#x2F;A表示一个由10个int型元素所构成的一维数组类型
int m;
A *q;&amp;#x2F;&amp;#x2F;或: int(*q)[10];
q&amp;#x3D; new int[m][10];&amp;#x2F;&amp;#x2F;创建一个由m行10列的二维数组，返回第一行的地址（类型为:A*)。
或
q&amp;#x3D;new A[m];&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;3函数main的参数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3函数main的参数&#34;&gt;#&lt;/a&gt; （3）函数 main 的参数&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可以给函数 main 定义参数，其定义格式为: &lt;code&gt;int main(int argc, char *argv[]);&lt;/code&gt; &lt;br&gt;
 &lt;code&gt;argc&lt;/code&gt;  表示传给函数 main 的参数的个数，&lt;br&gt;
 &lt;code&gt;argv&lt;/code&gt;  表示各个参数，它是一个一维数组，其每个元素为一个指向字符串的指针。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以 &lt;code&gt;“copy file1 file2”&lt;/code&gt;  执行程序 copy 时，copy 的函数 main 将得到参数:&lt;br&gt;
argc:3&lt;br&gt;
argv[0]: &amp;quot;copy&amp;quot;&lt;/p&gt;
&lt;p&gt;argv[1]: &amp;quot;file1&amp;quot;&lt;/p&gt;
&lt;p&gt;argv[2]: &amp;quot;file2&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;6函数指针&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6函数指针&#34;&gt;#&lt;/a&gt; 6. 函数指针&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;C++ 中可以定义一个指针变量，使其指向一个函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数指针定义格式： &lt;code&gt;&amp;lt;返回类型&amp;gt; (*&amp;lt;指针类型&amp;gt;)(&amp;lt;形式参数表&amp;gt;)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;double (*fp)(int);&amp;#x2F;&amp;#x2F;fp是一个指向函数的指针变量
或者
typedef double (*FP)(int);
FP fp;  &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于一个函数，可以用取地址操作符 &lt;code&gt;&amp;amp;&lt;/code&gt;  来获得它的内存地址，或直接用函数名来表示。&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;double f(int x)&amp;#123; ...&amp;#125;
fp&amp;#x3D; &amp;amp;f;&amp;#x2F;&amp;#x2F;或者，fp &amp;#x3D;f;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过函数指针调用函数可采用下面的形式&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;(*fp)(10); &amp;#x2F;&amp;#x2F;或者，fp(10);&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;&amp;#x2F;&amp;#x2F;函数指针，可以指向有相同参数列表和返回值的不同名函数
int max(int x,int y)&amp;#123;
    return x&amp;gt;y?x:y;
&amp;#125;
int min(int x,int y)&amp;#123;
    return x&amp;gt;y?y:x;
&amp;#125;

void main(void)&amp;#123;
    int (*p)(int,int);
    p &amp;#x3D; max;
    cout &amp;lt;&amp;lt; p(3,5) &amp;lt;&amp;lt; endl;
    p &amp;#x3D; min;
    cout &amp;lt;&amp;lt; p(3,5) &amp;lt;&amp;lt; endl;
&amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281109515.png&#34; alt=&#34;image-20230508153735544&#34;&gt;&lt;/p&gt;
&lt;p&gt;A：指向整型量的指针&lt;/p&gt;
&lt;p&gt;B：指向字符型的指针&lt;/p&gt;
&lt;p&gt;C：由指向字符的指针构成的数组，即指针数组&lt;/p&gt;
&lt;p&gt;D：指向字符数组的指针，即数组指针&lt;/p&gt;
&lt;p&gt;F：返回值为指向整型量的指针的函数，即指针函数&lt;/p&gt;
&lt;p&gt;G：指向返回值为整型量的函数的指针，即函数指针&lt;/p&gt;
&lt;h4 id=&#34;7多级指针&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7多级指针&#34;&gt;#&lt;/a&gt; 7. 多级指针&lt;/h4&gt;
&lt;p&gt;（可能不考 待补充）&lt;/p&gt;
&lt;h4 id=&#34;六引用类型变量的别名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#六引用类型变量的别名&#34;&gt;#&lt;/a&gt; （六）引用类型（变量的别名）&lt;/h4&gt;
&lt;h4 id=&#34;1定义-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1定义-5&#34;&gt;#&lt;/a&gt; 1. 定义&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义格式： &lt;code&gt;&amp;lt;类型&amp;gt; &amp;amp;&amp;lt;引用变量&amp;gt;=&amp;lt;变量&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int x&amp;#x3D;O;
int &amp;amp;y&amp;#x3D;x;&amp;#x2F;&amp;#x2F;y为引用类型的变量，可以看成是x的别名
cout &amp;lt;&amp;lt;x&amp;lt;&amp;lt;&amp;#39;,&amp;#39;&amp;lt;&amp;lt;y &amp;lt;&amp;lt; endl;&amp;#x2F;&amp;#x2F;结果为:0,0
y &amp;#x3D; 1;
cout &amp;lt;&amp;lt;x &amp;lt;&amp;lt;&amp;#39;,&amp;#39;&amp;lt;&amp;lt;y &amp;lt;&amp;lt;endl;&amp;#x2F;&amp;#x2F;结果为:1,1&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引用类型用于给一个变量取一个别名。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在语法上，&lt;br&gt;
对引用类型变量的访问与非引用类型相同。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在语义上，&lt;br&gt;
 对引用类型变量的访问实际访问的是另一个变量（被引用的变量）。&lt;br&gt;
效果与通过指针间接访问另一个变量相同。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对引用类型需要注意下面几点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义引用类型变量时，应在变量名加上符号 “&amp;amp;”，以区别于普通变量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定义引用变量时必须要有初始化&lt;/strong&gt;，并且引用变量和被引用变量应具有相同的类型。&lt;/li&gt;
&lt;li&gt;引用类型的变量定义之后，它不能再引用其它变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;引用本质：指针常量&lt;/p&gt;
&lt;p&gt;指针指向不可变，指针指向的值可变&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2引用类型作为函数的参数类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2引用类型作为函数的参数类型&#34;&gt;#&lt;/a&gt; 2. 引用类型作为函数的参数类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过形参改变实参的值&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;
void swap(int &amp;amp;x, int &amp;amp;y)&amp;#123;&amp;#x2F;&amp;#x2F;交换两个int型变量的值
    int t;
	t &amp;#x3D; x;
    x &amp;#x3D; y;
    y &amp;#x3D; t;
&amp;#125;
int main()&amp;#123;
    int a&amp;#x3D;0,b&amp;#x3D;1;
    cout &amp;lt;&amp;lt;a&amp;lt;&amp;lt;&amp;#39;,&amp;#39;&amp;lt;&amp;lt;b&amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;结果为:0,1
    swap(a,b);
	cout &amp;lt;&amp;lt;a&amp;lt;&amp;lt;&amp;#39;,&amp;#39;&amp;lt;&amp;lt;b&amp;lt;&amp;lt;endl; &amp;#x2F;&amp;#x2F;结果为:1,0
    return 0;
&amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指针的引用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;
void swap(int *&amp;amp;x, int *&amp;amp;y)&amp;#123;&amp;#x2F;&amp;#x2F;交换两个int型指针变量的值
    int *t;
	t &amp;#x3D; x;
    x &amp;#x3D; y;
    y &amp;#x3D; t;
&amp;#125;
int main()&amp;#123;
    int a&amp;#x3D;0,b&amp;#x3D;1;
    int *p&amp;#x3D;&amp;amp;a,*q&amp;#x3D;&amp;amp;b;
    cout &amp;lt;&amp;lt;*p&amp;lt;&amp;lt;&amp;#39;,&amp;#39;&amp;lt;&amp;lt;*q&amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;p指向a，q指向b 结果为:0,1
    swap(p,q);
	cout &amp;lt;&amp;lt;*p&amp;lt;&amp;lt;&amp;#39;,&amp;#39;&amp;lt;&amp;lt;*q&amp;lt;&amp;lt;endl; &amp;#x2F;&amp;#x2F;p指向b，q指向a 结果为:1,0
    return 0;
&amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引用做函数返回值类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;&amp;#x2F;&amp;#x2F;返回数组中最大元素的引用（注意:不能返回局部变量的引用)
int &amp;amp;max(int x[], int num)&amp;#123;
    int i, j;
	j &amp;#x3D; 0;
	for (i&amp;#x3D;1;i&amp;lt;num;i++)&amp;#123;
        if(x[i]&amp;gt;x[j])&amp;#123;
            j &amp;#x3D; i;
            return x[j];
        &amp;#125;
    &amp;#125;
&amp;#125;
&amp;#x2F;&amp;#x2F;引用具有左值,可以通过返回的引用修改值
int a[10];
cout&amp;lt;&amp;lt;max(a,10)&amp;lt;&amp;lt;endl;
max(a,10)+&amp;#x3D;1; &amp;#x2F;&amp;#x2F;把数组最大元素的值+1&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过把形参定义成对常量的引用，可以防止在函数中通过引用类型的形参改变实参的值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引用类型与指针类型的区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;引用类型和指针类型都可以实现通过一个变量访问另一个变量，但在语法上，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;引用是采用直接访问形式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指针则需要采用间接访问形式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在作为函数参数类型时，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;引用类型参数的实参是一个变量的名字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指针类型参数的实参是一个变量的地址&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在定义时初始化以后，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引用类型变量不能再引用其它变量&lt;/li&gt;
&lt;li&gt;指针类型变量可以指向其它的变量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引用类型一般作为指针类型来实现（有时又把引用类型称作隐蔽的指针，hidden pointer)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;能够用引用实现的指针功能，尽量用引用！&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;六-对象与类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#六-对象与类&#34;&gt;#&lt;/a&gt; 六、对象与类&lt;/h2&gt;
&lt;h3 id=&#34;一面向对象程序设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一面向对象程序设计&#34;&gt;#&lt;/a&gt; （一）面向对象程序设计&lt;/h3&gt;
&lt;h4 id=&#34;1基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1基础&#34;&gt;#&lt;/a&gt; 1. 基础&lt;/h4&gt;
&lt;h5 id=&#34;1数据抽象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1数据抽象&#34;&gt;#&lt;/a&gt; （1）数据抽象&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;数据的使用者只需要知道对数据所能实施的操作以及这些操作之间的关系，而不必知道数据的具体表示。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;2数据封装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2数据封装&#34;&gt;#&lt;/a&gt; （2）数据封装&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;指把数据及其操作作为一个整体来进行描述。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据的具体表示对使用者是不可见的，对数据的访问只能通过封装体所提供的对外接口 (操作）来完成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;3栈&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3栈&#34;&gt;#&lt;/a&gt; （3）栈&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;栈是一种由若干个具有线性次序关系的元素所构成的复合数据。对栈只能实施两种操作:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;进栈（push）: 往栈中增加一个元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;退栈（pop）: 从栈中删除一个元素&lt;/p&gt;
&lt;p&gt;上述两个操作必须在栈的同一端（称为栈顶，top）进行。后进先出&lt;br&gt;
 (Last In First Out，简称 LIFO) 是栈的一个重要性质&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2对象和类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2对象和类&#34;&gt;#&lt;/a&gt; 2. 对象和类&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;对象是由数据及能对其实施的操作所构成的封装体，它属于值的范畴。&lt;/li&gt;
&lt;li&gt;类描述了对象的特征（包含哪些数据和操作），它属于类型的范畴 (对象的类型)。
&lt;ul&gt;
&lt;li&gt;数据：数据成员、成员变量、实例变量、对象的局部变量等&lt;/li&gt;
&lt;li&gt;操作：成员函数、方法、消息处理过程等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3继承inheritance&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3继承inheritance&#34;&gt;#&lt;/a&gt; 3. 继承 (Inheritance)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;在定义一个新类（派生类、子类）时，可以利用已有类（基类、父类）的一些特征描述。&lt;/li&gt;
&lt;li&gt;单继承与多继承&lt;/li&gt;
&lt;li&gt;作用：分类、代码复用等&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4多态与绑定&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4多态与绑定&#34;&gt;#&lt;/a&gt; 4. 多态与绑定&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;多态性 (Polymorphism) 动态绑定 (Dynamic Binding)・&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;1多态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1多态&#34;&gt;#&lt;/a&gt; （1）多态&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;某一论域中的一个元素存在多种解释。通常体现为:
&lt;ul&gt;
&lt;li&gt;一名多用:
&lt;ul&gt;
&lt;li&gt;函数名重载&lt;/li&gt;
&lt;li&gt;操作符重载&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;类属性:
&lt;ul&gt;
&lt;li&gt;类属函数：一个函数能对多种类型的数据进行操作。&lt;/li&gt;
&lt;li&gt;类属类型：一个类型可以描述多种类型的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;面向对象程序特有的多态（动态多态）:
&lt;ul&gt;
&lt;li&gt;对象类型的多态：子类对象既属于子类，也属于父类&lt;/li&gt;
&lt;li&gt;对象标识的多态：父类的引用或指针可以引用或指向子类对象&lt;/li&gt;
&lt;li&gt;消息的多态：一个消息集有多种解释（父类与子类有不同解释）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;2绑定&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2绑定&#34;&gt;#&lt;/a&gt; （2）绑定&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;确定对多态元素的某个使用是多态元素的那一种形式。
&lt;ul&gt;
&lt;li&gt;静态绑定（Static Binding，也称前期绑定，EarlyBinding）: 在编译时刻确定。&lt;/li&gt;
&lt;li&gt;动态绑定（Dynamic Binding，也称后期绑定或延迟绑定 Late Binding）: 在运行时刻确定。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多态带来的好处:
&lt;ul&gt;
&lt;li&gt;易于实现程序高层 (上层）代码的复用。&lt;/li&gt;
&lt;li&gt;使得程序扩充变得容易（只要增加底层的具体实现）。&lt;/li&gt;
&lt;li&gt;增强语言的可扩充性（操作符重载等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二类&#34;&gt;#&lt;/a&gt; （二）类&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;对象构成了面向对象程序的基本计算单位，而对象的特征则由相应的类来描述。类也可看成是对象的集合。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;1数据成员&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1数据成员&#34;&gt;#&lt;/a&gt; 1. 数据成员&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据成员指类的对象所包含的数据，它们可以是常量和变量。数据成员的说明格式与非成员数据的声明格式相同&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class Datell&amp;#123;&amp;#x2F;&amp;#x2F;类定义
	private:&amp;#x2F;&amp;#x2F;访问控制说明
      int year,month,day;&amp;#x2F;&amp;#x2F;数据成员说明
&amp;#125;;
例如:class A&amp;#123;
    int x&amp;#x3D;0;&amp;#x2F;&amp;#x2F;Error
	const double y&amp;#x3D;0.0;&amp;#x2F;&amp;#x2F;Error
&amp;#125;;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;说明数据成员时不允许进行初始化&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2成员函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2成员函数&#34;&gt;#&lt;/a&gt; 2. 成员函数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;成员函数描述了对类定义中的数据成员所能实施的操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;成员函数的实现也可以放在类定义外&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class A&amp;#123;
    void f();&amp;#x2F;&amp;#x2F;声明
&amp;#125;;
void A::f() &amp;#123;...&amp;#125; &amp;#x2F;&amp;#x2F;定义，非内联函数，需要用类名受限，区别于全局函数。
或
inline void A:f() &amp;#123;...&amp;#125; &amp;#x2F;&amp;#x2F;显式说明该成员函数也是一个内联函数&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;类成员函数名是可以重载的（析构函数除外），遵循一般函数名的重载规则&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;成员函数可以对其形参设置默认值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3成员的访问控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3成员的访问控制&#34;&gt;#&lt;/a&gt; 3. 成员的访问控制&lt;/h4&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class A
&amp;#123; public:&amp;#x2F;&amp;#x2F;访问不受限制。
	int x;
	void f();
  private: &amp;#x2F;&amp;#x2F;只能在本类和友元的代码中访问。
    int y;
	void g();
  protected: &amp;#x2F;&amp;#x2F;只能在本类、派生类和友元的代码中访问。
    int z;
	void h();
&amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 C++ 的类定义中，&lt;strong&gt;默认访问控制是 private&lt;/strong&gt;（结构和联合成员的默认访问控制为 public)&lt;br&gt;
 可以有多个 public、private 和 protected 访问控制说明&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;三对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三对象&#34;&gt;#&lt;/a&gt; （三）对象&lt;/h3&gt;
&lt;h4 id=&#34;1对象的创建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1对象的创建&#34;&gt;#&lt;/a&gt; 1. 对象的创建&lt;/h4&gt;
&lt;h5 id=&#34;1直接方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1直接方式&#34;&gt;#&lt;/a&gt; （1）直接方式&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;Date today,yesterday&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全局对象：在函数外定义的对象&lt;/li&gt;
&lt;li&gt;局部对象：在函数内定义的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;2间接方式动态对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2间接方式动态对象&#34;&gt;#&lt;/a&gt; （2）间接方式（动态对象）&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在程序运行时刻，通过 &lt;code&gt;new&lt;/code&gt;  操作来创建对象，用 &lt;code&gt;delete&lt;/code&gt;  操作来撤消 (使之消亡）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;new&lt;/code&gt;  创建对象自动调用构造函数&lt;br&gt;
 &lt;code&gt;delete&lt;/code&gt;  释放对象自动调用析构函数&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;malloc&lt;/code&gt;  与 &lt;code&gt;free&lt;/code&gt;  则否&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过指针来标识和访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单个动态对象的创建与撤消&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;A *p;
p &amp;#x3D;new A;&amp;#x2F;&amp;#x2F;创建一个A类的动态对象
...*p...&amp;#x2F;&amp;#x2F;通过p访问动态对象
delete p;&amp;#x2F;&amp;#x2F;撤消p所指向的动态对象。&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态对象数组的创建与撤消&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;A *q;
q&amp;#x3D; new A[100]; &amp;#x2F;&amp;#x2F;创建一个动态对象数组。
...q[i]...&amp;#x2F;&amp;#x2F;或者，*(q+i)，通过q访问动态对象数组
delete []q; &amp;#x2F;&amp;#x2F;撤消q所指向的动态对象数组。&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2对象的操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2对象的操作&#34;&gt;#&lt;/a&gt; 2. 对象的操作&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;非动态对象 &lt;code&gt;&amp;lt;对象&amp;gt;.&amp;lt;类成员&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;动态对象 &lt;code&gt;&amp;lt;对象指针&amp;gt;-&amp;gt;&amp;lt;类成员&amp;gt;&lt;/code&gt;  或 &lt;code&gt;(*&amp;lt;对象指针&amp;gt;).&amp;lt;类成员&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class A&amp;#123;
     int x;
    public:
     void f();
&amp;#125;;
int main()&amp;#123;
    A a;&amp;#x2F;&amp;#x2F;创建A类的一个局部对象a。
	a.f();&amp;#x2F;&amp;#x2F;调用A类的成员函数f对对象a进行操作。
	A *p&amp;#x3D;new A;&amp;#x2F;&amp;#x2F;创建A类的一个动态对象，p指向之。
	p-&amp;gt;f();&amp;#x2F;&amp;#x2F;调用A类的成员函数f对p所指向的对象进行操作。
    delete p;
	return 0;
&amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在类的外部，通过对象来访问类的成员时要受到类成员访问控制的限制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以对同类对象进行赋值&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;Date yesterday,today,some_day;
some_day &amp;#x3D; yesterday;&amp;#x2F;&amp;#x2F;把对象yesterday的数据成员分别赋值给对象some_day的相应数据成员。&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取对象地址&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;Date *p_date;
p_date &amp;#x3D; &amp;amp;today;&amp;#x2F;&amp;#x2F;把对象today的地址赋值给对象指针p_date。&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把对象作为实参传给函数以及作为函数的返回值等操作。&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;Date f(Date d)&amp;#123;
    Date x;
	return x;
	some_day2 &amp;#x3D; f(yesterday);&amp;#x2F;&amp;#x2F;调用函数f，把对象yesterday作为实参。返回值对象赋给对象some_day2。
&amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3this指针&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3this指针&#34;&gt;#&lt;/a&gt; 3. &lt;code&gt;this&lt;/code&gt;  指针&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;类定义中说明的数据成员（静态数据成员除外）对该类的每个对象都有一个拷贝。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实际上，每一个成员函数都有一个隐藏的形参 &lt;code&gt;this&lt;/code&gt; ，其类型为： &lt;code&gt;&amp;lt;类名&amp;gt;*const this;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;成员函数所属对象的指针，明确地表示了成员函数当前操作数据所属对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在成员函数中对类成员的访问是通过 this 来进行的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一般情况下，类的成员函数中不必显式使用 this 指针来访问对象的成员（编译程序会自动加上）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果成员函数中要把 this 所指向的对象作为整体来操作（如：取对象的地址），则需要显式地使用 this 指针。&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;void func(A *p);
class A&amp;#123;
    int x;
    public:
      void f()&amp;#123;func(this);&amp;#125; &amp;#x2F;&amp;#x2F;！！！
      void g(int i)&amp;#123;x &amp;#x3D; i; f();&amp;#125;
&amp;#125;;
...
A a,b;
a.f(); &amp;#x2F;&amp;#x2F;要求在f中调用func(&amp;amp;a)
b.f(); &amp;#x2F;&amp;#x2F;要求在f中调用func(&amp;amp;b)&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;四对象的初始化和消亡前处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四对象的初始化和消亡前处理&#34;&gt;#&lt;/a&gt; （四）对象的初始化和消亡前处理&lt;/h3&gt;
&lt;h4 id=&#34;1构造函数constructors&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1构造函数constructors&#34;&gt;#&lt;/a&gt; 1. 构造函数 (Constructors)&lt;/h4&gt;
&lt;h5 id=&#34;1定义-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1定义-6&#34;&gt;#&lt;/a&gt; （1）定义&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;构造函数是类的特殊成员函数，它的&lt;strong&gt;名字与类名相同&lt;/strong&gt;、&lt;strong&gt;无返回值类型&lt;/strong&gt;。创建对象时，构造函数会自动被调用。&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class A&amp;#123;
      int x,y;
	public:
      A()&amp;#123;x &amp;#x3D;0; y &amp;#x3D; 0;&amp;#125;&amp;#x2F;&amp;#x2F;构造函数
    ...
&amp;#125;;
A a; &amp;#x2F;&amp;#x2F;创建对象a:为a分配内存空间，然后调用a的构造函数A()&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构造函数可以重载，其中，不带参数的（或所有参数都有默认值的）构造函数被称为&lt;strong&gt;默认构造函数&lt;/strong&gt;。(可以不用实参进行调用的构造函数)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构造函数一般为 &lt;code&gt;public&lt;/code&gt;  可以设置为 &lt;code&gt;private&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;2调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2调用&#34;&gt;#&lt;/a&gt; （2）调用&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;对象创建后不能再调用构造函数，构造函数的调用是对象创建过程的一部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class A&amp;#123;
    ...
    public:
      A();
      A(int i);
      A(char *p);
&amp;#125;;
...
A a1; &amp;#x2F;&amp;#x2F;调用默认构造函数  也可写成: A a1&amp;#x3D;A(); 但不能写成: A a1();
A a2(1); &amp;#x2F;&amp;#x2F;调用A(int i)  也可写成:A a2&amp;#x3D;A(1); (显示)或 A a2&amp;#x3D;1;(隐式)
A a3(&amp;quot;abcd&amp;quot;); &amp;#x2F;&amp;#x2F;调A(char *)  也可写成:A a3&amp;#x3D;A(&amp;quot;abcd&amp;quot;); 或A a3&amp;#x3D;&amp;quot;abcd&amp;quot;;
A a[4];&amp;#x2F;&amp;#x2F;调用对象a[0]、a[1]、a[2]、a[3]的默认构造函数。
A b[5]&amp;#x3D;&amp;#123;A(),A(1),A(&amp;quot;abcd&amp;quot;),2,&amp;quot;xyz&amp;quot;&amp;#125;; &amp;#x2F;&amp;#x2F;调用b[0]的A()、b[1]的A(int)、b[2]的A(char *)、b[3]的A(int)和b[4]的A(char *)
A *p1&amp;#x3D;new A;&amp;#x2F;&amp;#x2F;调用默认构造函数。
A *p2&amp;#x3D;new A(2);&amp;#x2F;&amp;#x2F;调用A(int i)。
A *p3&amp;#x3D;new A(&amp;quot;xyz&amp;quot;);&amp;#x2F;&amp;#x2F;调用A(char *)。
A *p4&amp;#x3D;new A[20];&amp;#x2F;&amp;#x2F;创建动态对象数组时只能调用各对象的默认构造函数&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h5 id=&#34;3成员初始化表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3成员初始化表&#34;&gt;#&lt;/a&gt; （3）成员初始化表&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于常量数据成员和引用数据成员（某些静态成员除外），不能在说明它们时初始化，也不能采用赋值操作对它们初始化（说明数据成员时不允许初始化）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于常量数据成员和引用数据成员，可以在定义构造函数时，在函数头和函数体之间加入一个成员初始化表来对它们进行初始化。例如：&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class A&amp;#123;
    int x;
	const int y;
    int &amp;amp;z;
    public:
	  A():x(0),z(x),y(1) &amp;#x2F;&amp;#x2F;成员初始化表(按照 x(0) y(1) z(x)顺序初始化)
      &amp;#123;&amp;#125;
&amp;#125;;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;成员初始化表中成员初始化的书写次序并不决定它们的初始化次序，数据成员的初始化次序由它们在&lt;strong&gt;类定义中的说明次序&lt;/strong&gt;来决定。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;先初始化再执行构造函数体&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;例题：假定 MyClass 为一个类，执行 &lt;code&gt;MyClass a[3],*p[2];&lt;/code&gt;  语句时会自动调用该类构造函数 (3) 次&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2析构函数destructors&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2析构函数destructors&#34;&gt;#&lt;/a&gt; 2. 析构函数 (Destructors)&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;~&amp;lt;类名&amp;gt;&lt;/code&gt;  没有返回类型、不带参数、不能被重载&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个对象消亡时，系统在收回它的内存空间之前，将会自动调用析构函数。&lt;/li&gt;
&lt;li&gt;可以在析构函数中完成对象被删除前的一些清理工作（如归还对象额外申请的资源等)。&lt;/li&gt;
&lt;li&gt;析构函数的调用顺序与构造函数的调用顺序完全相反&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class String&amp;#123;
    int len;
    char *str;
  public:
    String(char* s)&amp;#123; 
        len &amp;#x3D; strlen(s);
        str &amp;#x3D; new char[len+1];&amp;#x2F;&amp;#x2F;申请资源
        strcpy(str， s); &amp;#x2F;&amp;#x2F;复制字符串
    &amp;#125;
    ~String()&amp;#123;
        delete[] str;&amp;#x2F;&amp;#x2F;归还资源
        str&amp;#x3D;NULL;&amp;#x2F;&amp;#x2F;一般情况下不需要这条语句，有时需要
    &amp;#125;
&amp;#125;
	void f()&amp;#123;
        String s1(&amp;quot;abcd&amp;quot;);&amp;#x2F;&amp;#x2F;调用s1的构造函数
    ......
    &amp;#125;&amp;#x2F;&amp;#x2F;调用s1的析构函数&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281110275.png&#34; alt=&#34;image-20230515134011070&#34;&gt;&lt;/p&gt;
&lt;p&gt;注意：系统为对象 s1 分配的内存空间只包含 len 和 str（指针）本身所需的空间，str 所指向的空间不由系统分配，而是由对象作为资源自己处理！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;析构函数可以显式调用&lt;/li&gt;
&lt;li&gt;把 string 类的对象 s 变成空字符串的对象，显式调 &lt;code&gt;s1.~String();&lt;/code&gt; （只归还对象的资源，对象并未消亡！）&lt;/li&gt;
&lt;li&gt;注意：一般不需要自定义析构函数
&lt;ul&gt;
&lt;li&gt;需要时系统隐式提供，如：需要调用成员对象类和基类的析构函数&lt;/li&gt;
&lt;li&gt;归还资源时需自定义&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;总结对比&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结对比&#34;&gt;#&lt;/a&gt; 总结对比&lt;/h4&gt;
&lt;h5 id=&#34;构造函数的特殊性质&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#构造函数的特殊性质&#34;&gt;#&lt;/a&gt; 构造函数的特殊性质&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;构造函数的名字必须与类名相同&lt;/li&gt;
&lt;li&gt;构造函数不指定返回类型，它隐含有返回值，由系统内部使用&lt;/li&gt;
&lt;li&gt;构造函数可以有一个或多个参数，因此&lt;strong&gt;构造函数可以重载&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在创建对象时，系统会自动调用构造函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;析构函数的特殊性质&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#析构函数的特殊性质&#34;&gt;#&lt;/a&gt; 析构函数的特殊性质&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;析构函数名是在类名前加 &lt;code&gt;~&lt;/code&gt;  符号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;析构函数不指定返回类型，它不能有返回值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;析构函数&lt;strong&gt;没有参数&lt;/strong&gt;，因此析构函数不能重载，&lt;strong&gt;一个类中只能定义一个析构函数&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在撤销对象时，系统会自动调用析构函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;析构与构造顺序相反&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果一个类没有定义构造和析构函数，则编译器将生成默认构造函数（不必为其提供参数的构造函数）和默认析构函数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;例题 1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;&amp;#x2F;&amp;#x2F;date.h
class Date&amp;#123;
    int year, month, day;
  public:
	Date(int y, int m, int d); &amp;#x2F;&amp;#x2F;构造函数1
    Date(int y&amp;#x3D;2000): year(y)&amp;#123; &amp;#x2F;&amp;#x2F;构造函数2
		month &amp;#x3D; 4;
		day&amp;#x3D;8;
		cout&amp;lt;&amp;lt;&amp;quot;Constructor of Date with 1 parameter.&amp;quot;&amp;lt;&amp;lt;endl;
    &amp;#125;
	~Date()&amp;#123;
            cout&amp;lt;&amp;lt;&amp;quot;Destructor of Date: &amp;quot;&amp;lt;&amp;lt;year&amp;lt;&amp;lt;&amp;quot;.&amp;quot;&amp;lt;&amp;lt;month&amp;lt;&amp;lt;&amp;quot;.&amp;quot;&amp;lt;&amp;lt;day&amp;lt;&amp;lt;endl;
    &amp;#125;
	int IsLeapYear();
    void Print()&amp;#123;cout&amp;lt;&amp;lt;year&amp;lt;&amp;lt;&amp;quot;.&amp;quot;&amp;lt;&amp;lt;month&amp;lt;&amp;lt;&amp;quot;.&amp;quot;&amp;lt;&amp;lt;day&amp;lt;&amp;lt;endl;&amp;#125;
&amp;#125;
&amp;#x2F;&amp;#x2F;date.cpp
Date::Date(int y, int m, int d):year(y),month(m), day(d)&amp;#123;
    cout&amp;lt;&amp;lt;&amp;quot;Constructor of Date with 3 paramenters.&amp;quot;&amp;lt;&amp;lt;endl;
&amp;#125;
int Date::IsLeapYear()&amp;#123;
	return (year%4&amp;#x3D;&amp;#x3D;0 &amp;amp;&amp;amp; year%100&amp;#x3D; 0) || (year%400)&amp;#x3D;&amp;#x3D;0;
&amp;#125;

&amp;#x2F;&amp;#x2F;example.cpp
#include“date.h”
int main()
&amp;#123;
	Date date1(2022,4,8), date2; &amp;#x2F;&amp;#x2F;分别调用构造函数1，2
    cout&amp;lt;&amp;lt;&amp;quot;date1:&amp;quot;;
    date1.Print();
    cout&amp;lt;&amp;lt;&amp;quot;date2:&amp;quot;;
    date2.Print();
	if(date2.IsLeapYear())&amp;#123;
        cout&amp;lt;&amp;lt;&amp;quot;date2 is a leapyear.&amp;quot;&amp;lt;&amp;lt;endl;
	else 
        cout&amp;lt;&amp;lt;&amp;quot;date2 is not a leapyear. &amp;quot;&amp;lt;&amp;lt;endl;
	return 0;
&amp;#125;&amp;#x2F;&amp;#x2F;分别调用析构函数

&amp;#x2F;*
Constructor of Date with 3 paramenters.
Constructor of Date with 1 paramenters.
date1: 2022.4.8
date2: 2000.4.8
date2 is leapyear.
Destructor of Date: 2000.4.8
Destructor of Date: 2022.4.8
*&amp;#x2F;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对象数组&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数组元素为对象的数组，即数组中每个元素都是同一个类的对象&lt;/li&gt;
&lt;li&gt;对象数组的格式: &lt;code&gt;&amp;lt;类名&amp;gt;&amp;lt;数组名&amp;gt;[&amp;lt;大小&amp;gt;]…..&lt;/code&gt;    &lt;code&gt;DATE dates[5];&lt;/code&gt; &lt;br&gt;
 使用对象数组成员: &lt;code&gt;&amp;lt;数组名&amp;gt;[&amp;lt;下标&amp;gt;].&amp;lt;成员名&amp;gt;&lt;/code&gt;   &lt;code&gt;dates[0].year&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class DATE
&amp;#123;
    int year, month, day;
  public:
	DATE():month(0), day(0), year(0)&amp;#123;
		cout&amp;lt;&amp;lt;&amp;quot;Default constructor called.&amp;quot;&amp;lt;&amp;lt;endl;
	&amp;#125;
	DATE(int m, int d, int y):month(m), day(d), year(y)&amp;#123;
		cout&amp;lt;&amp;lt;&amp;quot;Constructor called.&amp;quot;&amp;lt;&amp;lt;day&amp;lt;&amp;lt;endl;
	&amp;#125;
	~DATE()&amp;#123;
		cout&amp;lt;&amp;lt;&amp;quot;Destructor called.&amp;quot;&amp;lt;&amp;lt;day&amp;lt;&amp;lt;endl;
	&amp;#125;
	void Print() const&amp;#123;
		cout&amp;lt;&amp;lt;&amp;quot;Month&amp;#x3D;&amp;quot;&amp;lt;&amp;lt;month&amp;lt;&amp;lt;&amp;quot;, Day&amp;#x3D;&amp;quot;&amp;lt;&amp;lt;day&amp;lt;&amp;lt;&amp;quot;, Year&amp;#x3D;&amp;quot;&amp;lt;&amp;lt;year&amp;lt;&amp;lt;endl;
	&amp;#125;
&amp;#125;;
int main()&amp;#123;
	DATE dates[5]&amp;#x3D;&amp;#123;DATE(10,1,2002),DATE(10,2,2002),DATE(10,3,2002)&amp;#125;;
    dates[3] &amp;#x3D; DATE(10,4,2002);
	dates[4] &amp;#x3D; DATE(10,5,2002);
	for(int i&amp;#x3D;0;i&amp;lt;5;i++) dates[i].Print();
    return 0; 
&amp;#125;

&amp;#x2F;*
Constructor called.1
Constructor called.2
Constructor called.3
Default constructor called.
Default constructor called.
Constructor called.4
Destructor called.4 &amp;#x2F;&amp;#x2F;！
Constructor called.5 
Destructor called.5 &amp;#x2F;&amp;#x2F;！
Month &amp;#x3D; 10, Day &amp;#x3D; 1, Year &amp;#x3D; 2002
Month &amp;#x3D; 10, Day &amp;#x3D; 2, Year &amp;#x3D; 2002
Month &amp;#x3D; 10, Day &amp;#x3D; 3, Year &amp;#x3D; 2002
Month &amp;#x3D; 10, Day &amp;#x3D; 4, Year &amp;#x3D; 2002
Month &amp;#x3D; 10, Day &amp;#x3D; 5, Year &amp;#x3D; 2002
Destructor called.5
Destructor called.4
Destructor called.3
Destructor called.2
Destructor called.1
*&amp;#x2F;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;自由存储对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在程序运行过程中根据需要可以随时建立或者删除的对象称为自由存储对象（建立及删除可使用 new 和 delete）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;Class test&amp;#123;
	int X, Y;
  public:
	Test();
	Test(int i, int j);
	~Test()&amp;#123;cout&amp;lt;&amp;lt;“Destructor called: ”&amp;lt;&amp;lt; X &amp;lt;&amp;lt;“,”&amp;lt;&amp;lt; Y &amp;lt;&amp;lt; endl;&amp;#125;
	void Set(int i, int j);
	void Print()&amp;#123;cout&amp;lt;&amp;lt;  X &amp;lt;&amp;lt;“, ”&amp;lt;&amp;lt; Y &amp;lt;&amp;lt;endl;&amp;#125;
&amp;#125;;

Test::Test(): X(0), Y(0)&amp;#123;
	cout&amp;lt;&amp;lt;“Default constructor called. ”&amp;lt;&amp;lt;endl;
&amp;#125;;
Test::Test(int i, int j): X(i), Y(j)&amp;#123;
	cout&amp;lt;&amp;lt;“Constructor called: ”&amp;lt;&amp;lt; X &amp;lt;&amp;lt;‘, ’&amp;lt;&amp;lt; Y &amp;lt;&amp;lt;endl;
&amp;#125;;
void Test::Set(int i, int j)&amp;#123;X&amp;#x3D;i, Y&amp;#x3D;j&amp;#125;;

int main()&amp;#123;
	Test *ptr1, *ptr2, *ptr3;
	ptr1 &amp;#x3D; new Test(1, 2);
	ptr2 &amp;#x3D; new Test(3, 4);
	ptr3 &amp;#x3D; new Test[2];
	ptr3[0].Set(5, 6);
	ptr3[1].Set(7, 8);
	ptr1-&amp;gt;Print();
	ptr2-&amp;gt;Print();
	ptr3[0].Print();
	ptr3[1].Print();
	delete ptr1;
	delete ptr2;
	delete [] ptr3;
	return 0;
&amp;#125;

&amp;#x2F;*
Constructor called: 1, 2
Constructor called: 3, 4
Default constructor called.
Default constructor called.
1, 2
3, 4
5, 6
7, 8
Destructor called: 1, 2
Destructor called. 3, 4
Destructor called: 7, 8
Destructor called. 5, 6
*&amp;#x2F;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h4 id=&#34;3成员对象的初始化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3成员对象的初始化&#34;&gt;#&lt;/a&gt; 3. 成员对象的初始化&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;成员对象：&lt;/p&gt;
&lt;p&gt;对于类的数据成员，其类型可以是另一个类。也就是说，一个对象可以包含另一个对象（称为成员对象）&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class A&amp;#123; 
    ...
&amp;#125;;

class B&amp;#123; 
    ...
	A a; &amp;#x2F;&amp;#x2F;成员对象
	...
&amp;#125;;

B b; &amp;#x2F;&amp;#x2F;对象b包含一个成员对象：b.a&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;成员对象由成员对象类的构造函数初始化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果在包含成员对象的类中，没有指出用成员对象类的什么构造函数对成员对象初始化，则调用成员对象类的默认构造函数。&lt;/li&gt;
&lt;li&gt;可以在类构造函数的成员初始化表中显式指出用成员对象类的某个构造函数对成员对象初始化。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class A&amp;#123; 
    int x;
  public:
	A() &amp;#123; x &amp;#x3D; 0; &amp;#125;
	A(int i) &amp;#123; x &amp;#x3D; i; &amp;#125;
&amp;#125;;
class B&amp;#123; 
    A a;
	int y;
  public:
	B(int i) &amp;#123; y &amp;#x3D; i;&amp;#125; &amp;#x2F;&amp;#x2F;调用A的默认构造函数对a初始化。
	B(int i, int j): a(j) &amp;#123; y &amp;#x3D; i; &amp;#125; &amp;#x2F;&amp;#x2F;调用A(int)对初始化。
&amp;#125;;
B b1(1); &amp;#x2F;&amp;#x2F;b1.y初始化为1，b1.a.x初始化为0
B b2(1,2); &amp;#x2F;&amp;#x2F;b2.y初始化为1，b2.a.x初始化为2&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建包含成员对象的类的对象时，先执行成员对象类的构造函数，再执行本身类的构造函数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;初始化成员对象时，若调用成员对象的非默认构造数，必用成员初始化列表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若成员初始化表为空，则调用成员对象的默认构造函数完成初始化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个类若包含多个成员对象，这些对象的初始化次序按它们在类中的说明次序（而不是成员初始化表的次序）进行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;析构函数的执行次序与构造函数的执行次序正好相反。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先析构类对象，再析构成员对象&lt;/li&gt;
&lt;li&gt;若有多个成员对象，则析构与构造次序相反&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class Counter&amp;#123;
	int val;
  Public:
	Counter(): val(0)&amp;#123;cout&amp;lt;&amp;lt;“Defalut Constructor of Counter”&amp;lt;&amp;lt;endl;&amp;#125;
	Counter(int x): val(x)&amp;#123;cout&amp;lt;&amp;lt;“Constructor of 				Counter:”&amp;lt;&amp;lt;val&amp;lt;&amp;lt;endl;&amp;#125;
	~Counter()&amp;#123;cout&amp;lt;&amp;lt;“Destructor of Counter:”&amp;lt;&amp;lt;val&amp;lt;&amp;lt;endl;&amp;#125;
&amp;#125;;
class Example&amp;#123;
	Counter c1, c2;
	int val;
  Public:
	Example(): val(0)&amp;#123;cout&amp;lt;&amp;lt;“Defalut Constructor of Example”&amp;lt;&amp;lt;endl;&amp;#125;
	Example(int x): c2(x),val(x)&amp;#123;cout&amp;lt;&amp;lt;“Constructor of Example:”&amp;lt;&amp;lt;val&amp;lt;&amp;lt;endl;&amp;#125;
	~Example()&amp;#123;cout&amp;lt;&amp;lt;“Destructor of Example:”&amp;lt;&amp;lt;val&amp;lt;&amp;lt;endl;&amp;#125;
	void Print() const &amp;#123;cout&amp;lt;&amp;lt;“value &amp;#x3D; ”&amp;lt;&amp;lt;val&amp;lt;&amp;lt;emdl;&amp;#125;
&amp;#125;;

int main()&amp;#123;
	Example e1, e2(4);
	e2.Print();
	return 0;
&amp;#125;

&amp;#x2F;*
Defalut Constructor of Counter
Defalut Constructor of Counter
Defalut Constructor of Example
Defalut Constructor of Counter
Constructor of Counter: 4
Constructor of Example: 4
value&amp;#x3D;4
Destructor of Example: 4
Destructor of Counter: 4
Destructor of Counter: 0
Destructor of Example: 0
Destructor of Counter: 0
Destructor of Counter: 0
*&amp;#x2F;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h4 id=&#34;4拷贝构造函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4拷贝构造函数&#34;&gt;#&lt;/a&gt; 4. 拷贝构造函数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;在创建一个对象时，若用一个同类型的对象对其初始化，这时将会调用一个特殊的构造函数：拷贝构造函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class A&amp;#123; 
    ......
  public:
	A(); &amp;#x2F;&amp;#x2F;默认构造函数
	A(const A&amp;amp; a); &amp;#x2F;&amp;#x2F;拷贝构造函数 const可以省略，只是为了防止在函数体中修改实参对象
&amp;#125;;

&amp;#x2F;&amp;#x2F;此外拷贝构造函数还可如下：
A(const A&amp;amp; a， int i&amp;#x3D;0, int j&amp;#x3D;0);&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在三种情况下，会调用类的拷贝构造函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义对象时，例如：&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;A a1;
A a2(a1); &amp;#x2F;&amp;#x2F;也可写成：A a2&amp;#x3D;a1; 或：A a2&amp;#x3D;A(a1);
&amp;#x2F;&amp;#x2F;调用A的拷贝构造函数，用对象a1初始化对象a2，&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把对象作为值参数传给函数时，例如：&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;void f(A x);
A a;
f(a); &amp;#x2F;&amp;#x2F;调用f时将创建形参对象x，并调用A的拷贝构造函数，用对象a对其初始化。&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把对象作为函数的返回值时，例如：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;A f()&amp;#123; 
    A a;
	......
	return a; &amp;#x2F;&amp;#x2F;创建一个A类的临时对象，并调用A的拷贝构造函数，用对象a对其初始化。
&amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;&amp;#x2F;&amp;#x2F;date.h
#include &amp;lt;iostream&amp;gt;
using namespace std;

class Date&amp;#123;
		int year, month, day;
  public:
	Date(int y, int m, int d);
	Date(int y&amp;#x3D;2000): year(y)&amp;#123;
		month &amp;#x3D; 4;
		day&amp;#x3D;8;
		cout&amp;lt;&amp;lt;&amp;quot;Constructor ofDate with 1 parameter.&amp;quot;&amp;lt;&amp;lt;endl;
	&amp;#125;
	Date(const Date&amp;amp; d);
	~Date()&amp;#123;cout&amp;lt;&amp;lt;&amp;quot;Destructor of Date: &amp;quot;&amp;lt;&amp;lt; year &amp;lt;&amp;lt;&amp;quot;.&amp;quot;&amp;lt;&amp;lt; month &amp;lt;&amp;lt;&amp;quot;.&amp;quot;&amp;lt;&amp;lt; day &amp;lt;&amp;lt; endl;&amp;#125;
	int IsLeapYear();
	void Print()&amp;#123;cout&amp;lt;&amp;lt;year&amp;lt;&amp;lt;&amp;quot;.&amp;quot;&amp;lt;&amp;lt;month&amp;lt;&amp;lt;&amp;quot;.&amp;quot;&amp;lt;&amp;lt;day&amp;lt;&amp;lt;endl;&amp;#125;
&amp;#125;;

&amp;#x2F;&amp;#x2F;date.cpp
Date::Date(int y, int m, int d): year(y),month(m),day(d)&amp;#123;
	cout&amp;lt;&amp;lt;&amp;quot;Constructor of Date with 3 paramenters.&amp;quot;&amp;lt;&amp;lt;endl;
&amp;#125;
Date::Date(const Date&amp;amp; d)&amp;#123;
	year&amp;#x3D;d.year;
	month&amp;#x3D;d.month;
	day&amp;#x3D;d.day;
	cout&amp;lt;&amp;lt;&amp;quot;Copy constructor of Date&amp;quot;&amp;lt;&amp;lt;endl;
&amp;#125;
int Date::IsLeapYear()&amp;#123;
	return (year%4&amp;#x3D;&amp;#x3D;0 &amp;amp;&amp;amp; year%100 !&amp;#x3D;0) || (year%400)&amp;#x3D;&amp;#x3D;0;
&amp;#125;

Date fun(Date d)&amp;#123;
	Date temp; temp&amp;#x3D;d; return temp;
&amp;#125;

int main()&amp;#123;
	Date date1(2000, 1, 1), date2(0, 0, 0);
	Date date3(date1);
	date2&amp;#x3D;fun(date3);
	cout&amp;lt;&amp;lt;&amp;quot;date1: &amp;quot;;
	date1.Print();
	cout&amp;lt;&amp;lt;&amp;quot;date2: &amp;quot;;
	date2.Print();
	cout&amp;lt;&amp;lt;&amp;quot;date3: &amp;quot;;
	date3.Print();
	return 0;
&amp;#125;

&amp;#x2F;*
Constructor of Date with 3 parameters.
Constructor of Date with 3 parameters.
Copy constructor of Date. &amp;#x2F;&amp;#x2F;date3(date1)
Copy constructor of Date. &amp;#x2F;&amp;#x2F;d(date3) !!!!! 调用方法fun()时
Constructor of Date with 1 parameters. &amp;#x2F;&amp;#x2F;(temp)
Copy constructor of Date.&amp;#x2F;&amp;#x2F;匿名date2(temp)
Destructor of Date: 2000.1.1&amp;#x2F;&amp;#x2F;temp对象
Destructor of Date: 2000.1.1 &amp;#x2F;&amp;#x2F;d对象
Destructor of Date: 2000.1.1 &amp;#x2F;&amp;#x2F;匿名对象
date1: 2000.1.1
date2: 2000.1.1
date3: 2000.1.1
Destructor of Date: 2000.1.1&amp;#x2F;&amp;#x2F;date3对象
Destructor of Date: 2000.1.1&amp;#x2F;&amp;#x2F;date2对象
Destructor of Date: 2000.1.1&amp;#x2F;&amp;#x2F;date1对象
*&amp;#x2F;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果程序中没有为类提供拷贝构造函数，则编译器将会为其生成一个隐式拷贝构造函数。&lt;/li&gt;
&lt;li&gt;隐式拷贝构造函数将逐个成员拷贝初始化：
&lt;ul&gt;
&lt;li&gt;对于普通成员：它采用通常的初始化操作；&lt;/li&gt;
&lt;li&gt;对于成员对象：则调用成员对象类的拷贝构造函数来实现成员对象的初始化 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class A&amp;#123; 
    int x,y;
  public:
	A() &amp;#123; x &amp;#x3D; y &amp;#x3D; 0; &amp;#125;
	......
&amp;#125;;
class B&amp;#123; 
    int z;
	A a;
  public:
	B() &amp;#123; z &amp;#x3D; 0; &amp;#125;
	...... &amp;#x2F;&amp;#x2F;其中没有定义拷贝构造函数
&amp;#125;;
...
B b1; &amp;#x2F;&amp;#x2F;b1.z、b1.a.x以及b1.a.y均为0。
B b2(b1); &amp;#x2F;&amp;#x2F;b2.z初始化成b1.z；调用A的拷贝构造函数用b1.a对b2.a初始化。如果A中没有定义拷贝构造函数，则A的隐式拷贝构造函数把b2.a.x和b2.a.y分别初始化成 b1.a.x和b1.a.y；否则，由A的自定义拷贝构造函数决定如何对b2.a.x和b2.a.y进行初始化。&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一般情况下，编译程序提供的默认拷贝构造函数的行为足以满足要求，类中不需要自定义拷贝构造函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在有些情况下必须要自定义拷贝构造函数，否则，将会产生设计者未意识到的严重的程序错误：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;浅拷贝&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class A&amp;#123; 
    int x,y;
	char *p;
  public:
	A(char *str)&amp;#123; 
        x &amp;#x3D; 0; y &amp;#x3D; 0;
		p &amp;#x3D; new char[strlen(str)+1];
		strcpy(p,str);
	&amp;#125;
	~A() &amp;#123; delete [] p; p&amp;#x3D;NULL; &amp;#125;
&amp;#125;;
......
A a1(“abcd”);
A a2(a1);&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281110027.png&#34; alt=&#34;image-20230530140234188&#34;&gt;&lt;/p&gt;
&lt;p&gt;系统提供的隐式拷贝构造函数将会使得 a1 和 a2 的成员指针 p 指向同一块内存区域！&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;如果对一个对象操作之后修改了这块空间的内容，则另一个对象将会受到影响。如果不是设计者特意所为，这将是一个隐藏的错误。&lt;/li&gt;
&lt;li&gt;当对象 a1 和 a2 消亡时，将会分别去调用它们的析构函数，&lt;br&gt;
这会使得同一块内存区域将被归还两次，从而导致程&lt;br&gt;
序运行异常。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;深拷贝&lt;/p&gt;
&lt;p&gt;解决上面问题的办法是在类 A 中显式定义一个拷贝构造函数。&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;A::A(const A&amp;amp; a)&amp;#123; 
    x &amp;#x3D; a.x;
	y &amp;#x3D; a.y;
	p &amp;#x3D; new char[strlen(a.p)+1];
	strcpy(p,a.p);
&amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281110527.png&#34; alt=&#34;image-20230530140326030&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;隐式拷贝构造函数会调用成员对象的拷贝构造函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自定义的拷贝构造函数将默认调用成员对象类的默认构造函数对成员对象初始化！&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;五-进阶&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#五-进阶&#34;&gt;#&lt;/a&gt; （五） 进阶&lt;/h3&gt;
&lt;h4 id=&#34;1常const成员函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1常const成员函数&#34;&gt;#&lt;/a&gt; 1. 常 (const) 成员函数&lt;/h4&gt;
&lt;h5 id=&#34;1常成员函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1常成员函数&#34;&gt;#&lt;/a&gt; （1）常成员函数&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;为了防止在获取对象状态的成员函数中改变对象的状态，可以把它们说明成 ** &lt;code&gt;const&lt;/code&gt;  成员函数 **。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;声明与定义时都应加上 &lt;code&gt;const&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class Date&amp;#123; 
  public:
	void set(int y, int m, int d); &amp;#x2F;&amp;#x2F;改变对象状态
	int get_day() const; &amp;#x2F;&amp;#x2F;获取对象状态
&amp;#125;;
int Date::get_day() const &amp;#123;.....&amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;const&lt;/code&gt;  成员函数不能改变对象的状态（数据成员的值）。&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class A&amp;#123; 
    int x;
	char *p;
  public:
	......
	void f() const&amp;#123;
		x &amp;#x3D; 10; &amp;#x2F;&amp;#x2F;Error
		p &amp;#x3D; new char[20]; &amp;#x2F;&amp;#x2F;Error
		strcpy(p,&amp;quot;ABCD&amp;quot;); &amp;#x2F;&amp;#x2F;没有改变p的值，编译程序认为OK！
	&amp;#125;
&amp;#125;;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;给成员函数加上 const 修饰符还有一个作用：描述对常量对象所能进行的操作（常对象只能调用常成员函数）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常成员函数不能调用非常成员函数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;const 成员函数可以修改 static 成员变量&lt;br&gt;
✓ const 修饰 this 指针指向内容不可更改&lt;br&gt;
✓ static 变量不用 this 指针访问&lt;/p&gt;
&lt;p&gt;const 成员函数不能修改对象的任何数据成员&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;2常对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2常对象&#34;&gt;#&lt;/a&gt; （2）常对象&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用 const 关键字修饰的对象称为&lt;strong&gt;常对象&lt;/strong&gt; &lt;code&gt;&amp;lt;类名&amp;gt; const &amp;lt;对象名&amp;gt;&lt;/code&gt;  或者  &lt;code&gt;const &amp;lt;类名&amp;gt; &amp;lt;对象名&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;常数据成员&lt;/strong&gt;： &lt;code&gt;const&lt;/code&gt;  说明的数据成员，只能通过构造函数的成员初始化列表显式进行初始化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;常对象在&lt;strong&gt;定义时&lt;/strong&gt;必须进行&lt;strong&gt;初始化&lt;/strong&gt;，而且不能被更新&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常对象只能调用它的常成员函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一般对象既可以调用常成员函数，也可以调用一般成员函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于成员函数，&lt;strong&gt; &lt;code&gt;const&lt;/code&gt;  参与函数重载的区分&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;常对象调用常成员函数，一般对象调用一般成员函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常成员函数可以直接访问类的常数据成员及一般数据成员&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2静态数据成员&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2静态数据成员&#34;&gt;#&lt;/a&gt; 2. 静态数据成员&lt;/h4&gt;
&lt;h5 id=&#34;1静态数据成员&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1静态数据成员&#34;&gt;#&lt;/a&gt; （1）静态数据成员&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;可通过静态数据成员来实现属于同一个类的不同对象之间的数据共享&lt;/li&gt;
&lt;li&gt;类的静态数据成员对该类的所有对象只有一个拷贝。&lt;/li&gt;
&lt;li&gt;往往在类的外部给出定义并进行初始化。在函数内部声明。&lt;/li&gt;
&lt;li&gt;需要通过对象来访问。 &lt;code&gt;a.x&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;2静态成员函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2静态成员函数&#34;&gt;#&lt;/a&gt; （2）静态成员函数&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;静态成员函数可以通过对象来访问外，也可以直接通过类来访问。 &lt;code&gt;A::get_shared(); &lt;/code&gt; 或 &lt;code&gt;A a; a.get_shared();&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;静态成员函数可以直接访问类的静态成员&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;静态成员函数不能直接访问类的非静态成员&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;静态成员函数没有隐藏的 this 参数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若要访问非静态成员，必须通过参数传递的方式得到相应的对象，再通过对象进行访问&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class A&amp;#123; 
    int x,y;
	static int shared;
  public:
	A() &amp;#123; x &amp;#x3D; y &amp;#x3D; 0; &amp;#125;
	......
	static int get_shared(A&amp;amp; a) &amp;#123; return shared; &amp;#125;
	......
	int A::get_shared(A&amp;amp; a)&amp;#123;
	......a.x......a.y
&amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3友元friend&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3友元friend&#34;&gt;#&lt;/a&gt; 3. 友元 (friend)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;指定与一个类密切相关的、又不适合作为该类成员的程序实体（某些全局函数、某些其它类或某些其它类的某些成员函数）&lt;strong&gt;可以直接访问该类的 private 和 protected 成员&lt;/strong&gt;。这些程序实体称为该类的友元。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class A&amp;#123; 
    ......
	friend void func(); &amp;#x2F;&amp;#x2F;友元函数，可访问x
	friend class B; &amp;#x2F;&amp;#x2F;友元类，可访问x 类B中的所有成员函数都可以访问A类中的成员
	friend void C::f(); &amp;#x2F;&amp;#x2F;友元类成员函数，可访问x
  private:
	int x;
&amp;#125;;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;友元关系具有不对称性，不具有传递性，友元关系不能被继承。&lt;/li&gt;
&lt;li&gt;友元是数据保护和数据访问效率之间的一种折中方案。（破坏了类的封装性）&lt;/li&gt;
&lt;li&gt;一个类的友元函数不属于这个类。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4转移构造函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4转移构造函数&#34;&gt;#&lt;/a&gt; 4. 转移构造函数&lt;/h4&gt;
&lt;h4 id=&#34;5操作符重载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5操作符重载&#34;&gt;#&lt;/a&gt; 5. 操作符重载&lt;/h4&gt;
&lt;h5 id=&#34;1概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1概述&#34;&gt;#&lt;/a&gt; （1）概述&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;操作符重载实质上是函数重载&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以重载 C++ 中除下列操作符外的所有操作符：&lt;br&gt;
成员选择符 &lt;code&gt;.&lt;/code&gt; ，间接成员选择符 &lt;code&gt;.*&lt;/code&gt;   &lt;code&gt;-&amp;gt;*&lt;/code&gt;  ，条件操作符 &lt;code&gt;?:&lt;/code&gt; ，域解析符 &lt;code&gt;::&lt;/code&gt;  ，  &lt;code&gt;sizeof&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重载操作符时，其操作数中至少应该有一个是类、结构、枚举以及它们的引用类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作符重载可通过下面两个途径来实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;作为一个类的非静态的成员函数（ &lt;code&gt;new&lt;/code&gt;  和 &lt;code&gt;delete&lt;/code&gt;  除外）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;作为一个全局（友元）函数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一般情况下，操作符既可以作为全局函数，也可以作为成员函数来重载。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在有些情况下，操作符只能作为全局函数或只能作为成员函数来重载。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;2双目操作符重载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2双目操作符重载&#34;&gt;#&lt;/a&gt; （2）双目操作符重载&lt;/h5&gt;
&lt;p&gt;① 作为成员函数重载&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;重载函数的声明格式&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class &amp;lt;类名&amp;gt;
&amp;#123; ......
&amp;lt;返回值类型&amp;gt; operator # (&amp;lt;类型&amp;gt;); &amp;#x2F;&amp;#x2F;#代表可重载的操作符
&amp;#125;;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重载函数的定义格式&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;&amp;lt;返回值类型&amp;gt; &amp;lt;类名&amp;gt;::operator # (&amp;lt;类型&amp;gt; &amp;lt;参数&amp;gt;) &amp;#123; ...... &amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用格式&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;&amp;lt;类名&amp;gt; a;
&amp;lt;类型&amp;gt; b;
a # b
或
a.operator#(b)&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class Complex&amp;#123; 
    double real, imag;
public:
......
	bool operator &amp;#x3D;&amp;#x3D;(const Complex&amp;amp; x) const&amp;#123; 
    	return (real &amp;#x3D;&amp;#x3D; x.real) &amp;amp;&amp;amp; (imag &amp;#x3D;&amp;#x3D; x.imag);
	&amp;#125;
	bool operator !&amp;#x3D;(const Complex&amp;amp; x) const&amp;#123; 
   		return (real !&amp;#x3D; x.real) || (imag !&amp;#x3D; x.imag);
	&amp;#125;
&amp;#125;;
......
Complex c1,c2;
......
if (c1 &amp;#x3D;&amp;#x3D; c2) &amp;#x2F;&amp;#x2F; 或 if (c1 !&amp;#x3D; c2)
......&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;② 作为全局（友元）函数重载&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义格式&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;&amp;lt;返回值类型&amp;gt; operator #(&amp;lt;类型1&amp;gt; &amp;lt;参数1&amp;gt;,&amp;lt;类型2&amp;gt; &amp;lt;参数2&amp;gt;)
&amp;#123; ...... &amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用格式：&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;&amp;lt;类型1&amp;gt; a;
&amp;lt;类型2&amp;gt; b;
a # b 或 operator#(a,b)&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class Complex&amp;#123; 
    double real, imag;
public:
	Complex() &amp;#123; real &amp;#x3D; 0; imag &amp;#x3D; 0; &amp;#125;
	Complex(double r, double i) &amp;#123; real &amp;#x3D; r; imag &amp;#x3D; i; &amp;#125;
......
	friend Complex operator + (const Complex&amp;amp; c1,const Complex&amp;amp; c2);
	friend Complex operator + (const Complex&amp;amp; c,double d);
	friend Complex operator + (double d,const Complex&amp;amp; c);
&amp;#125;;

Complex operator + (const Complex&amp;amp; c1,const Complex&amp;amp; c2)&amp;#123; 
    return Complex(c1.real+c2.real,c1.imag+c2.imag);
&amp;#125;
Complex operator + (const Complex&amp;amp; c, double d)&amp;#123; 
    return Complex(c.real+d,c.imag);
&amp;#125;
&amp;#x2F;&amp;#x2F;只能作为全局函数重载,若使用成员函数不符合显式调用（操作符重载本质）
Complex operator + (double d, const Complex&amp;amp; c)&amp;#123; 
    return Complex(d+c.real,c.imag);
&amp;#125;
......
Complex a(1,2),b(3,4),c1,c2,c3;
c1 &amp;#x3D; a + b;
c2 &amp;#x3D; b + 21.5;
c3 &amp;#x3D; 10.2 + a;   &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;表达式 x=operator-(y,z) 还可以表示为 x=y-z&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;3单目操作符重载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3单目操作符重载&#34;&gt;#&lt;/a&gt; （3）单目操作符重载&lt;/h5&gt;
&lt;p&gt;①作为成员函数重载&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义格式&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class &amp;lt;类名&amp;gt;
&amp;#123; ......
&amp;lt;返回值类型&amp;gt; operator # ();
&amp;#125;;
&amp;lt;返回值类型&amp;gt; &amp;lt;类名&amp;gt;::operator # () &amp;#123; ...... &amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用格式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;类名&amp;gt; a; #a&lt;/code&gt;  或 &lt;code&gt;a.operator#()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class Complex&amp;#123; 
    ......
  public:
	......
	Complex operator -() const&amp;#123; 
        Complex temp;
		temp .real &amp;#x3D; -real;
		temp.imag &amp;#x3D; -imag;
		return temp;
	&amp;#125;
&amp;#125;;
......
Complex a(1,2),b;
b &amp;#x3D; -a; &amp;#x2F;&amp;#x2F;把b修改成a的负数。&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;②作为全局（友元）函数重载&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义格式&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;返回值类型&amp;gt; operator #(&amp;lt;类型&amp;gt; &amp;lt;参数&amp;gt;) &amp;#123; ...... &amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用格式&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;类型&amp;gt; a; #a&lt;/code&gt;  或 &lt;code&gt;operator#(a)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;操作符和-的重载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#操作符和-的重载&#34;&gt;#&lt;/a&gt; 操作符 ++ 和 -- 的重载&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;操作符 ++（--）有前置和后置两种用法：&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;int x&amp;#x3D;0;
++x; x++; &amp;#x2F;&amp;#x2F;OK
++(++x); (++x)++; &amp;#x2F;&amp;#x2F;OK，++x为左值表达式
++(x++); (x++)++; &amp;#x2F;&amp;#x2F;Error，x++为右值表达式&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;class Counter&amp;#123; 
    int value;
  public:
	Counter() &amp;#123; value = 0; &amp;#125;
	Counter&amp;amp; operator ++()&amp;#123; //前置的++重载函数
    	value++;
	  	return *this;
	&amp;#125;
	const Counter operator ++(int)&amp;#123; //后置的++重载函数
 		Counter temp=*this; //保存原来的对象
		value++; //写成：++(*this);更好！调用前置的++重载函数
		return temp; //返回原来的对象
	&amp;#125;
&amp;#125;;
Counter a,b,c;
b = ++a; //使用的是上述类定义中不带参数的操作符++重载函数
c = a++; //使用的是上述类定义中带int型参数的操作符++重载函数
++(++a); (++a)++; //OK
++(a++); (a++)++; //Error
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;
##### （4）特殊操作符的重载

###### ①赋值操作符“&amp;#x3D;”的重载

- C++编译程序会为每个类定义一个隐式的赋值操作符重载函数，其行为是：逐个成员进行赋值操作

- 参照浅拷贝，解决上面问题的办法是自己定义赋值操作符重载函数

&amp;#96;&amp;#96;&amp;#96;c++
class A&amp;#123; 
    ......
	A&amp;amp; operator &amp;#x3D; (const A&amp;amp; a)&amp;#123;&amp;#x2F;&amp;#x2F;返回值应声明为引用
 		if (&amp;amp;a &amp;#x3D;&amp;#x3D; this) return *this; &amp;#x2F;&amp;#x2F;防止自身赋值。
		delete []p;&amp;#x2F;&amp;#x2F;如果被赋值对象占用了动态空间，应先释放，后接收
		p &amp;#x3D; new char[strlen(a.p)+1];
		strcpy(p,a.p);
		x &amp;#x3D; a.x; y &amp;#x3D; a.y;
		return *this;
	&amp;#125;
&amp;#125;;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自定义的赋值操作符重载函数不会自动地去进行成员对象的赋值操作，必须要在自定义的赋值操作符重载函数中显式地指出。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;赋值操作符只能作为非静态的成员函数来重载。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;若使用全局函数，则会与隐式赋值操作符重载函数存在歧义&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一般来讲，需要自定义拷贝构造函数的类通常也需要自定义赋值操作符重载函数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;2访问数组元素操作符-的重载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2访问数组元素操作符-的重载&#34;&gt;#&lt;/a&gt; ②访问数组元素操作符 “[]” 的重载&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;对于由具有线性关系的元素所构成的对象，可通过重载 “[]”，实现对其元素的访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;3重载操作符new&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3重载操作符new&#34;&gt;#&lt;/a&gt; ③重载操作符 new&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;操作符 &lt;code&gt;new&lt;/code&gt;  必须作为静态的成员函数来重载（ &lt;code&gt;static&lt;/code&gt;  说明可以不写）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void *operator new(size_t size);&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回类型必须为 &lt;code&gt;void *&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;参数表示对象所需空间的大小，其类型为 size_t (unsigned int)&lt;/li&gt;
&lt;li&gt;new 重载函数可以有多个（参数需有所不同）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重载 new 时，除了对象空间大小参数以外，也可以带有其它参数&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void *operator new(size_t size,XXX);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用格式： &lt;code&gt;p = new (XXX) A(...);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;4重载操作符delete&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4重载操作符delete&#34;&gt;#&lt;/a&gt; ④重载操作符 delete&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;与重载操作符 new 相同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作符 delete 也必须作为静态的成员函数来重载（ &lt;code&gt;static&lt;/code&gt;  说明可以不写）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;delete 重载函数只能有一个&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;5函数调用操作符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5函数调用操作符&#34;&gt;#&lt;/a&gt; ⑤函数调用操作符 “()”&lt;/h6&gt;
&lt;h6 id=&#34;6类成员访问操作符-的重载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6类成员访问操作符-的重载&#34;&gt;#&lt;/a&gt; ⑥类成员访问操作符 “-&amp;gt;” 的重载&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;“-&amp;gt;” 为一个双目操作符，其第一个操作数为一个指向类或结构的指针，第二个操作数为第一个操作数所指向的类或结构的成员。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过对 “-&amp;gt;” 进行重载，可以实现一种&lt;strong&gt;智能指针&lt;/strong&gt;（smart pointers）：&lt;/p&gt;
&lt;p&gt;一个具有指针功能的对象，通过该对象访问所 “指向” 的另一个对象时，在访问所指向对象的成员前能做一些额外的事情。&lt;/p&gt;
&lt;p&gt;智能指针 (smart pointer) 是存储指向动态分配（堆）对象指针的类，用于生存期控制，能够确保自动正确的销毁动态分配的对象，防止内存泄露（利用自动调用类的析构函数来释放内存）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;必用成员函数重载&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;7带一个参数的构造函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7带一个参数的构造函数&#34;&gt;#&lt;/a&gt; ⑦带&lt;strong&gt;一个参数&lt;/strong&gt;的构造函数&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;带&lt;strong&gt;一个参数&lt;/strong&gt;的构造函数可以用作从一个基本数据类型或其它类到某个类的转换。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class Complex&amp;#123; 
    double real, imag;
  public:
	Complex() &amp;#123; real &amp;#x3D; 0; imag &amp;#x3D; 0; &amp;#125;
	Complex(double r) &amp;#123; real &amp;#x3D; r; imag &amp;#x3D; 0; &amp;#125;
	Complex(double r, double i) &amp;#123; real &amp;#x3D; r; imag &amp;#x3D; i; &amp;#125;
	......
	friend Complex operator + (const Complex&amp;amp; x, const Complex&amp;amp; y);
&amp;#125;;
......
Complex c1(1,2),c2,c3;
c2 &amp;#x3D; c1 + 1.7; &amp;#x2F;&amp;#x2F;1.7隐式转换成一个复数对象Complex(1.7)
c3 &amp;#x3D; 2.5 + c2; &amp;#x2F;&amp;#x2F;2.5隐式转换成一个复数对象Complex(2.5)&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h6 id=&#34;8自定义类型转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8自定义类型转换&#34;&gt;#&lt;/a&gt; ⑧自定义类型转换&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;自定义类型转换，从一个类转换成基本数据类型或其它类（不需要返回值类型的声明）&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class A&amp;#123; 
    int x,y;
  public:
	......
	operator int() &amp;#123; return x+y; &amp;#125; &amp;#x2F;&amp;#x2F;类型转换操作符int的重载函数
&amp;#125;;
......
A a;
int i&amp;#x3D;1;
int z &amp;#x3D; i + a; &amp;#x2F;&amp;#x2F;将调用类型转换操作符int的重载函数把对象a隐式转换成int型数据。&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;七-继承类的复用-派生类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#七-继承类的复用-派生类&#34;&gt;#&lt;/a&gt; 七、继承（类的复用）---- 派生类&lt;/h2&gt;
&lt;h3 id=&#34;一概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一概述&#34;&gt;#&lt;/a&gt; （一）概述&lt;/h3&gt;
&lt;h4 id=&#34;1继承关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1继承关系&#34;&gt;#&lt;/a&gt; 1. 继承关系&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;在继承关系中存在两个类：基类（或称父类）和派生类（或称子类）。&lt;/li&gt;
&lt;li&gt;派生类拥有基类的所有特征，并可以
&lt;ul&gt;
&lt;li&gt;定义新的特征&lt;/li&gt;
&lt;li&gt;或对基类的一些特征进行重定义。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二单继承&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二单继承&#34;&gt;#&lt;/a&gt; （二）单继承&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;单继承时，派生类只能有一个直接基类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;1单继承派生类的定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1单继承派生类的定义&#34;&gt;#&lt;/a&gt; 1. 单继承派生类的定义：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;定义：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class &amp;lt;派生类名&amp;gt;：[&amp;lt;继承方式&amp;gt;] &amp;lt;基类名&amp;gt;
&amp;#123; &amp;lt;成员说明表&amp;gt;
&amp;#125;;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;继承方式&amp;gt; 指出对从基类继承来的成员的访问控制，可以是 &lt;code&gt;public&lt;/code&gt;   &lt;code&gt;private&lt;/code&gt;   &lt;code&gt;protected&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class A &amp;#123;&amp;#x2F;&amp;#x2F;基类
 	int x,y;
  public:
	void f();
	void g();
&amp;#125;;
class B: public A &amp;#123;&amp;#x2F;&amp;#x2F;派生类
 	int z; &amp;#x2F;&amp;#x2F;新成员
  public:
	void h(); &amp;#x2F;&amp;#x2F;新成员
&amp;#125;;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;派生类除了拥有新定义的成员外，还拥有基类的所有成员（除了基类的构造 / 析构函数和赋值操作符重载函数）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义派生类时一定要见到基类的定义。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果在派生类中没有显式说明，基类的友元不是派生类的友元；如果基类是另一个类的友元，而该类没有显式说明，则派生类也不是该类的友元。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2访问基类成员&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2访问基类成员&#34;&gt;#&lt;/a&gt; 2. 访问基类成员&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;派生类不能直接访问基类的私有成员。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;protected&lt;/code&gt;  用它说明的成员&lt;strong&gt;不能通过对象使用&lt;/strong&gt;，但可以在派生类中使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class A &amp;#123; &amp;#x2F;&amp;#x2F;基类
	int x,y;
  public:
	void f();
	void g();
&amp;#125;;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;派生类对基类成员的访问除了受到基类的访问控制的限制以外，还要受到标识符作用域的限制。&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class B: public A&amp;#123; 
    int z;
  public:
	void f();
	void h()&amp;#123; 
        f(); &amp;#x2F;&amp;#x2F;B类中的f
		A::f(); &amp;#x2F;&amp;#x2F;A类中的f
	&amp;#125;
&amp;#125;;
B b;
b.f(); &amp;#x2F;&amp;#x2F;B类中的f
b.A::f(); &amp;#x2F;&amp;#x2F;A类中的f&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;即使派生类中定义了与基类同名但参数不同的成员函数，&lt;strong&gt;基类的同名函数在派生类的作用域中也是不直接可见的&lt;/strong&gt;，可以用基类名受限方式来使用之&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class B: public A&amp;#123; 
    int z;
  public:
	void f(int); &amp;#x2F;&amp;#x2F;不是重载A的f！
	void h()&amp;#123; 
        f(1); &amp;#x2F;&amp;#x2F;OK
		f(); &amp;#x2F;&amp;#x2F;Error
		A::f(); &amp;#x2F;&amp;#x2F;OK
	&amp;#125;
&amp;#125;;
......
B b;
b.f(1); &amp;#x2F;&amp;#x2F;OK
b.f(); &amp;#x2F;&amp;#x2F;Error
b.A::f(); &amp;#x2F;&amp;#x2F;OK&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;也可以在派生类中使用 using 声明把基类中某个的函数名对派生类开放&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class B: public A&amp;#123; 
    int z;
  public:
	using A::f;
	void f(int); &amp;#x2F;&amp;#x2F;不是重载A的f！
	void h()&amp;#123; 
        f(1); &amp;#x2F;&amp;#x2F;OK
		f(); &amp;#x2F;&amp;#x2F;OK，等价于A::f();
	&amp;#125;
&amp;#125;;
......
B b;
b.f(1); &amp;#x2F;&amp;#x2F;OK
b.f(); &amp;#x2F;&amp;#x2F;OK，等价于b.A::f();&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3继承方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3继承方式&#34;&gt;#&lt;/a&gt; 3. 继承方式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;默认的继承方式为： &lt;code&gt;private&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281110141.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可在派生类中分别调整基类各成员的访问控制属性（基类 private 成员除外）&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class A&amp;#123;
  public:
	void f1();
  protected:
	void g1();
&amp;#125;;

class B: private A&amp;#123;
  public:
	A::f1;&amp;#x2F;&amp;#x2F;f1调整为public
	A::g1;&amp;#x2F;&amp;#x2F;g1调整为public
&amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以将派生类对象赋值给基类对象&lt;/p&gt;
&lt;p&gt;可以将派生类对象的地址赋值给基类指针&lt;/p&gt;
&lt;p&gt;可以将派生类对象赋值给基类的引用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;派生类对象不能赋值给派生类对象。&lt;/p&gt;
&lt;p&gt;派生类指针变量不能指向基类对象。&lt;/p&gt;
&lt;p&gt;派生类操作不能用于基类对象。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4初始化和赋值操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4初始化和赋值操作&#34;&gt;#&lt;/a&gt; 4. 初始化和赋值操作&lt;/h4&gt;
&lt;h5 id=&#34;1初始化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1初始化&#34;&gt;#&lt;/a&gt; ①初始化&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;派生类构造函数必须负责&lt;strong&gt;调用基类构造函数&lt;/strong&gt;，并对其所需要的参数进行设置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;派生类对象的初始化由基类和派生类共同完成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基类的数据成员由基类的构造函数初始化&lt;/li&gt;
&lt;li&gt;派生类的数据成员由派生类的构造函数初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当创建派生类的对象时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;先执行基类的构造函数，再执行派生类构造函数&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;默认情况下，调用基类的默认构造函数，如果要调用基类的&lt;strong&gt;非默认构造函数&lt;/strong&gt;，则必须在派生类构造函数的&lt;strong&gt;成员初始化表&lt;/strong&gt;中指出。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果一个类 D 既有基类 B、又有成员对象类 M：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在创建 D 类对象时，构造函数的执行次序为：&lt;br&gt;
B（调用顺序按照各个基类被继承时声明的顺序）-&amp;gt;M-&amp;gt;D 类构造函数体&lt;/li&gt;
&lt;li&gt;当 D 类的对象消亡时，析构函数的执行次序为：D-&amp;gt;M-&amp;gt;B&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于拷贝构造函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;派生类的&lt;strong&gt;隐式&lt;/strong&gt;拷贝构造函数（由编译程序提供）将会调用&lt;strong&gt;基类的拷贝构造函数&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;派生类自定义的拷贝构造函数在默认情况下则调用基类的&lt;strong&gt;默认构造函数&lt;/strong&gt;。需要时，可在派生类自定义拷贝构造函数的 “基类 / 成员初始化表” 中显式地指出调用&lt;strong&gt;基类的拷贝构造函数&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class A&amp;#123; 
    int a;
  public:
	A() &amp;#123; a &amp;#x3D; 0; &amp;#125;
	A(const A&amp;amp; x) &amp;#123; a &amp;#x3D; x.a; &amp;#125;
	......
&amp;#125;;
class B: public A&amp;#123; 
  public:
	B() &amp;#123; ...... &amp;#125; 
    ...... &amp;#x2F;&amp;#x2F;没有定义拷贝构造，需要时用隐式拷贝构造
&amp;#125;;
	
class C: public A&amp;#123; 
  public:
	C() &amp;#123;......&amp;#125;
	C(const C&amp;amp; ) &amp;#123; ...... &amp;#125; &amp;#x2F;&amp;#x2F;调用A的默认构造
	......
&amp;#125;;
class D: public A&amp;#123; 
  public:
	D() &amp;#123;......&amp;#125;
	D(const D&amp;amp; d): A(d) &amp;#123; ...... &amp;#125; &amp;#x2F;&amp;#x2F;显式指定调用A的拷贝构造
	......
&amp;#125;;

B b1;&amp;#x2F;&amp;#x2F;调用A()
B b2(b1); &amp;#x2F;&amp;#x2F;调用A的拷贝构造
C c1;&amp;#x2F;&amp;#x2F;调用A()
C c2(c1);&amp;#x2F;&amp;#x2F;调用A的默认构造函数A()
D d1;&amp;#x2F;&amp;#x2F;调用A()
D d2(d1);&amp;#x2F;&amp;#x2F;调用A的拷贝构造&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h5 id=&#34;2赋值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2赋值&#34;&gt;#&lt;/a&gt; ②赋值&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果派生类没有提供赋值操作符重载，则系统会为它提供一个&lt;strong&gt;隐式的赋值操作符重载函数&lt;/strong&gt;，其行为是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对基类成员调用基类的赋值操作进行赋值，&lt;/li&gt;
&lt;li&gt;对派生类的成员按逐个成员赋值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;派生类&lt;strong&gt;自定义&lt;/strong&gt;的赋值操作符重载函数&lt;strong&gt;不会自动调用基类的赋值操作&lt;/strong&gt;，需要&lt;strong&gt;显式地调用基类的赋值操作符&lt;/strong&gt;来实现基类成员的赋值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;派生类不从基类继承赋值操作&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class A&amp;#123; 
    ......
&amp;#125;;
class B: public A&amp;#123; 
    ......
  public:
	B&amp;amp; operator &amp;#x3D;(const B&amp;amp; b)&amp;#123; 
        if (&amp;amp;b &amp;#x3D;&amp;#x3D; this) return *this; &amp;#x2F;&amp;#x2F;防止自身赋值。
		*(A*)this &amp;#x3D; b; &amp;#x2F;&amp;#x2F;调用基类的赋值操作符对基类成员进行赋值。也可写成：this-&amp;gt;A::operator &amp;#x3D;(b);
		...... &amp;#x2F;&amp;#x2F;对派生类的成员赋值
		return *this;
	&amp;#125;
&amp;#125;;
......
B b1,b2;
b1 &amp;#x3D; b2;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h5 id=&#34;3聚集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3聚集&#34;&gt;#&lt;/a&gt; ③聚集&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;继承不是代码复用的唯一方式，有些代码复用不宜用继承来实现。&lt;/li&gt;
&lt;li&gt;类之间还存在一种聚集（aggregation，也称聚合）关系：
&lt;ul&gt;
&lt;li&gt;一个类作为另一个类的成员对象类。&lt;/li&gt;
&lt;li&gt;具有聚集关系的两个类之间属于部分与整体的关系（is-a-part-of）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;4子类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4子类型&#34;&gt;#&lt;/a&gt; ④子类型&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;子类型关系可以传递，但是不可逆&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;三消息成员函数调用的动态绑定&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三消息成员函数调用的动态绑定&#34;&gt;#&lt;/a&gt; （三）消息（成员函数调用）的动态绑定&lt;/h3&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class A&amp;#123; 
    int x,y;
  public:
	void f();
&amp;#125;;
class B: public A&amp;#123; 
    int z;
  public:
	void f(); 
	void g();
&amp;#125;;
void func1(A&amp;amp; x)&amp;#123; 
    ......
	x.f(); &amp;#x2F;&amp;#x2F;调用A::f
	......
&amp;#125;
void func2(A *p)&amp;#123; 
    ......
	p-&amp;gt;f(); &amp;#x2F;&amp;#x2F;调用A::f
	......
&amp;#125;
......
A a;
func1(a);
func2(&amp;amp;a);
B b;
func1(b);
func2(&amp;amp;b);&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h4 id=&#34;1静态绑定&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1静态绑定&#34;&gt;#&lt;/a&gt; 1. 静态绑定&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;默认静态绑定&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2动态绑定&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2动态绑定&#34;&gt;#&lt;/a&gt; 2. 动态绑定&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;一般情况下，需要在 func1（或 func2）中根据 x（或 p）实际引用（或指向）的对象来决定是调用 &lt;code&gt;A::f&lt;/code&gt;  还是 &lt;code&gt;B::f&lt;/code&gt; 。即，采用动态绑定。在 C++ 中用虚函数来实现动态绑定。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class A&amp;#123; 
    int x,y;
  public:
	virtual void f(); &amp;#x2F;&amp;#x2F;虚函数
&amp;#125;;
class B: public A&amp;#123; 
    int z;
  public:
	void f();&amp;#x2F;&amp;#x2F;仍为虚函数，在其派生类中可被再次重写
	void g();
&amp;#125;;
void func1(A&amp;amp; x)&amp;#123; 
    ......
	x.f(); 
	......
&amp;#125;
void func2(A *p)&amp;#123; 
    ......
	p-&amp;gt;f(); 
	......
&amp;#125;
A a;
func1(a); &amp;#x2F;&amp;#x2F;在func1中调用A::f
func2(&amp;amp;a); &amp;#x2F;&amp;#x2F;在func2中调用A::f
B b;
func1(b); &amp;#x2F;&amp;#x2F;在func1中调用B::f
func2(&amp;amp;b); &amp;#x2F;&amp;#x2F;在func2中调用B::f&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基类中的一个成员函数如果被定义成虚函数，则在派生类中定义的、与之具有&lt;strong&gt;相同型构&lt;/strong&gt;的成员函数是对基类该成员函数的&lt;strong&gt;重定义&lt;/strong&gt;（或称&lt;strong&gt;覆盖&lt;/strong&gt;，override）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;相同的型构&lt;/strong&gt;是指：派生类中定义的成员函数的&lt;strong&gt;名字、参数类型和个数&lt;/strong&gt;与基类相应成员函数相同，其&lt;strong&gt;返回值类型&lt;/strong&gt;与基类成员函数返回值类型或者&lt;strong&gt;相同&lt;/strong&gt;，或者是基类成员函数返回值类型的&lt;strong&gt;派生类&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一旦在基类中指定某成员函数为虚函数，那么，不管在派生类中是否给出 &lt;code&gt;virtual&lt;/code&gt;  声明，派生类（以及派生类的派生类...）中与其有相同型构的成员函数均为虚函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只有类的成员函数才可以是虚函数，但&lt;strong&gt;静态成员函数不能是虚函数&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;构造函数不能是虚函数&lt;/strong&gt;，析构函数可以（往往）是虚函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只有通过基类的指针或引用访问基类的虚函数时才进行动态绑定。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基类的构造函数中对虚函数的调用不进行动态绑定。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-C++&#34; data-language=&#34;C++&#34;&gt;&lt;code class=&#34;language-C++&#34;&gt;class A&amp;#123;                                                  
  public:
	A() &amp;#123; f();&amp;#125;
	~A();
	virtual void f();
	void g();
	void h() &amp;#123; f(); g(); &amp;#125;
&amp;#125;;
class B: public A&amp;#123; 
  public:
	~B();
	void f();
	void g();
&amp;#125;;
......
A a; &amp;#x2F;&amp;#x2F;调用A::A()和A::f
a.f(); &amp;#x2F;&amp;#x2F;调用A::f
a.g(); &amp;#x2F;&amp;#x2F;调用A::g
a.h(); &amp;#x2F;&amp;#x2F;调用A::h、A::f和A::g
B b; &amp;#x2F;&amp;#x2F;调用B::B(), A::A() 和 A::f !!!
b.f(); &amp;#x2F;&amp;#x2F;调用B::f
b.g(); &amp;#x2F;&amp;#x2F;调用B::g !!!!
b.h(); &amp;#x2F;&amp;#x2F;调用A::h、B::f 和 A::g !!!

A *p;
p &amp;#x3D; &amp;amp;a;
p-&amp;gt;f(); &amp;#x2F;&amp;#x2F;调用A::f
p-&amp;gt;g(); &amp;#x2F;&amp;#x2F;调用A::g
p-&amp;gt;h(); &amp;#x2F;&amp;#x2F;调用A::h, A::f和A::g
p &amp;#x3D; &amp;amp;b;
p-&amp;gt;f(); &amp;#x2F;&amp;#x2F;调用B::f
p-&amp;gt;A::f(); &amp;#x2F;&amp;#x2F;调用A::f
p-&amp;gt;g(); &amp;#x2F;&amp;#x2F;调用A::g，对非虚函数的调用采用静态绑定。 !!!
p-&amp;gt;h(); &amp;#x2F;&amp;#x2F;调用A::h, B::f和A::g
p &amp;#x3D; new B; &amp;#x2F;&amp;#x2F;调用B::B(), A::A()和A::f !!!
.......
delete p; &amp;#x2F;&amp;#x2F;调用A::~A()，因为没有把A的析构函数定义为虚函数。 !!!&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h4 id=&#34;3纯虚函数和抽象类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3纯虚函数和抽象类&#34;&gt;#&lt;/a&gt; 3. 纯虚函数和抽象类&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;纯虚函数&lt;/strong&gt;是指函数体为空（=0）的虚函数&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-C++&#34; data-language=&#34;C++&#34;&gt;&lt;code class=&#34;language-C++&#34;&gt;class A&amp;#123; 
    ......
  public:
	virtual int f()&amp;#x3D;0; &amp;#x2F;&amp;#x2F;纯虚函数
	......
&amp;#125;;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;包含纯虚函数的类称为&lt;strong&gt;抽象类&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;抽象类不能用于创建对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;抽象类的作用是为派生类提供一个基本框架和一个公共的对外接口&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;四-多继承&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四-多继承&#34;&gt;#&lt;/a&gt; （四） 多继承&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;多继承是指派生类可以有一个以上的直接基类。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1定义-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1定义-7&#34;&gt;#&lt;/a&gt; 1. 定义&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;定义格式：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class &amp;lt;派生类名&amp;gt;： [&amp;lt;继承方式&amp;gt;] &amp;lt;基类名1&amp;gt;，[&amp;lt;继承方式&amp;gt;] &amp;lt;基类名2&amp;gt;，...
&amp;#123; 
    &amp;lt;成员说明表&amp;gt;
&amp;#125;;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;继承方式及访问控制的规定同单继承。
&lt;ul&gt;
&lt;li&gt;派生类拥有所有基类的所有成员。&lt;/li&gt;
&lt;li&gt;基类的声明次序决定：
&lt;ul&gt;
&lt;li&gt;对基类构造函数 / 析构函数的调用次序&lt;/li&gt;
&lt;li&gt;对基类数据成员的存储安排。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class C: public A, public B
&amp;#123; 
    ......
&amp;#125;;
&amp;#x2F;&amp;#x2F;构造函数的执行次序是：A()、B()、C()
&amp;#x2F;&amp;#x2F;（A()和B()实际是在C()的成员初始化表中调用。）&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h4 id=&#34;2命名冲突&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2命名冲突&#34;&gt;#&lt;/a&gt; 2. 命名冲突&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;解决方法：基类名受限&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3重复继承-虚基类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3重复继承-虚基类&#34;&gt;#&lt;/a&gt; 3. 重复继承 ---- 虚基类&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;若直接基类有公共的基类，则会出现重复继承&lt;/p&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class A
&amp;#123; int x;
......
&amp;#125;;
class B: public A &amp;#123; ... &amp;#125;;
class C: public A &amp;#123; ... &amp;#125;;
class D: public B, public C &amp;#123; ... &amp;#125;;
&amp;#x2F;&amp;#x2F;上面的类D将包含两个x成员：B::x和C::x&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虚基类&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;class B: virtual public A &amp;#123;...&amp;#125;;
class C: virtual public A &amp;#123;...&amp;#125;;
class D: public B, public C &amp;#123;...&amp;#125;;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;对于包含虚基类的类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虚基类的构造函数由最新派生出的类的构造函数调用。&lt;/li&gt;
&lt;li&gt;虚基类的构造函数优先非虚基类的构造函数执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;八-类属类型泛型-模板&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#八-类属类型泛型-模板&#34;&gt;#&lt;/a&gt; 八、类属类型（泛型）---- 模板&lt;/h2&gt;
&lt;h3 id=&#34;一模板&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一模板&#34;&gt;#&lt;/a&gt; （一）模板&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281110912.png&#34; alt=&#34;image-20230609202134205&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281110326.png&#34; alt=&#34;image-20230609202353873&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;二c标准模板库stl&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二c标准模板库stl&#34;&gt;#&lt;/a&gt; （二）C++ 标准模板库（STL）&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;以下可忽略（）&lt;/p&gt;
&lt;h2 id=&#34;n-库函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#n-库函数&#34;&gt;#&lt;/a&gt; N、库函数&lt;/h2&gt;
&lt;h3 id=&#34;1输入输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1输入输出&#34;&gt;#&lt;/a&gt; 1. 输入输出&lt;/h3&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iomanip&amp;gt;
#include &amp;lt;iostream&amp;gt;
using namespace std;

int main()&amp;#123;
    cout &amp;lt;&amp;lt; &amp;quot;Hello, world!&amp;quot;;  &amp;#x2F;&amp;#x2F;输出
	cout &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;换行
	cout &amp;lt;&amp;lt; &amp;quot;Rainnn!&amp;quot; &amp;lt;&amp;lt; endl;
    double root&amp;#x3D;5.33333;
    cout &amp;lt;&amp;lt; fixed &amp;lt;&amp;lt; setprecision(2) &amp;lt;&amp;lt; root;&amp;#x2F;&amp;#x2F;保留两位小数
    int i;
    double d;
    &amp;#x2F;&amp;#x2F;输入
    cin &amp;gt;&amp;gt; i;
    cin &amp;gt;&amp;gt; d;
    return 0;
&amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;ios::sync_with_stdio(false); &amp;#x2F;&amp;#x2F; 这两行能极大加速C++的输入性能。
cin.tie(nullptr);            &amp;#x2F;&amp;#x2F; 代价是不能混用scanf&amp;#x2F;printf。&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3 id=&#34;2cmath&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2cmath&#34;&gt;#&lt;/a&gt; 2. &lt;code&gt;&amp;lt;cmath&amp;gt;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;cmath&amp;gt;
#include &amp;lt;iostream&amp;gt;
using namespace std;
int main()&amp;#123;
    double count;
    count &amp;#x3D; sqrt(double x); &amp;#x2F;&amp;#x2F;求平方根
    count &amp;#x3D; pow(double x,double y); &amp;#x2F;&amp;#x2F;pow(底,指数的幂);
    
    &amp;#x2F;&amp;#x2F;三角函数
    count &amp;#x3D; cos(double x); 
    count &amp;#x3D; sin(double x);
    count &amp;#x3D; tan(double x);
    count &amp;#x3D; acos(double x);
    count &amp;#x3D; asin(double x);
    count &amp;#x3D; atan(double x);
    
    count &amp;#x3D; log(double x); &amp;#x2F;&amp;#x2F;返回logex的值
    count &amp;#x3D; log10(double x); &amp;#x2F;&amp;#x2F;返回log10x的值
    count &amp;#x3D; exp(double x); &amp;#x2F;&amp;#x2F;返回指数函数e^x的值
    count &amp;#x3D; exp2(double x); &amp;#x2F;&amp;#x2F;指数函数e^x的值
    
    count &amp;#x3D; hypot(3.0,4.0); &amp;#x2F;&amp;#x2F;5.0 返回两个参数的平方总和的平方根,如果参数为一个直角三角形的两个直角边,函数会返回斜边的长度) 
    
    int c &amp;#x3D; abs(int x); &amp;#x2F;&amp;#x2F;绝对值(只能填整数)
    count &amp;#x3D; fabs(double x); &amp;#x2F;&amp;#x2F;绝对值（可以填小数）
    
    count &amp;#x3D; floor(5.89); &amp;#x2F;&amp;#x2F;5 向下取整
    count &amp;#x3D; ceil(5.89); &amp;#x2F;&amp;#x2F;6 向上取整
    
    count &amp;#x3D; max(5.0,4.0); &amp;#x2F;&amp;#x2F;5.0 两者最大值
    count &amp;#x3D; min(5.0,4.0); &amp;#x2F;&amp;#x2F;4.0 两者最小值
&amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3 id=&#34;3bitset&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3bitset&#34;&gt;#&lt;/a&gt; 3. &lt;code&gt;&amp;lt;bitset&amp;gt;&lt;/code&gt;&lt;/h3&gt;
&lt;h4 id=&#34;1进制-oct-dec-hex&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1进制-oct-dec-hex&#34;&gt;#&lt;/a&gt; (1) 进制 oct dec hex&lt;/h4&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;bitset&amp;gt;
#include&amp;lt;iostream&amp;gt;
using namespace std;
int main()&amp;#123;
    int a;
    cin &amp;gt;&amp;gt; hex &amp;gt;&amp;gt; a；&amp;#x2F;&amp;#x2F;输入16进制数
    cout &amp;lt;&amp;lt; dec &amp;lt;&amp;lt; a &amp;lt;&amp;lt; endl;&amp;#x2F;&amp;#x2F;转成10进制  
    cout &amp;lt;&amp;lt; oct &amp;lt;&amp;lt; 35&amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;转成8进制
    cout &amp;lt;&amp;lt; dec &amp;lt;&amp;lt; 35 &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;转成10进制
    cout &amp;lt;&amp;lt; hex &amp;lt;&amp;lt; 35 &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;转成16进制
    cout &amp;lt;&amp;lt; bitset&amp;lt;8&amp;gt;(35) &amp;lt;&amp;lt; endl; &amp;#x2F;&amp;#x2F;2进制 &amp;lt;8&amp;gt;：表示保留8位输出
    return 0;  
&amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3 id=&#34;4字符串&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4字符串&#34;&gt;#&lt;/a&gt; 4. 字符串&lt;/h3&gt;
&lt;h4 id=&#34;1基础-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1基础-2&#34;&gt;#&lt;/a&gt; (1) 基础&lt;/h4&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;1.类似于使用数组
string a &amp;#x3D; “abcdef”;
int num &amp;#x3D; a.length();
for (int i &amp;#x3D; 0; i &amp;lt; num; ++i)
&amp;#123;
	cout &amp;lt;&amp;lt; a[i];
&amp;#125;

2.使用for循环
string a &amp;#x3D; “asdfa”;
for (char ch : a)&amp;#123;
    cout &amp;lt;&amp;lt; ch;
&amp;#125;
cout &amp;lt;&amp;lt; a.length();&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-string&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-string&#34;&gt;#&lt;/a&gt; (2)  &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;string&amp;gt;
using namespace std;

int main()&amp;#123;
    string s1, s2;
    getline(cin, s1);&amp;#x2F;&amp;#x2F;输入字符串
    getline(cin, s2);
    s1 +&amp;#x3D; s2;&amp;#x2F;&amp;#x2F;字符串拼接
    s1.append(s2); &amp;#x2F;&amp;#x2F;把字符串s连接到当前字符串的结尾
    int num&amp;#x3D;10;
    string to_string(num);&amp;#x2F;&amp;#x2F;将数字转换为字符串，这里注意如果是浮点型数转字符，会将精度范围内小数点后的数全部显示出来
&amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;1.int a &amp;#x3D; str.find_first_of(&amp;#39;abc&amp;#39;); &amp;#x2F;&amp;#x2F; 获取字符串中第一个指定字符(串)的位置

2.int a &amp;#x3D; str.find_last_of(&amp;#39;.&amp;#39;);&amp;#x2F;&amp;#x2F; 获取字符串中最后一个指定字符(串)的位置

3.string str1 &amp;#x3D; str.substr(a,b);&amp;#x2F;&amp;#x2F; 根据以上两个端位置，保留第a位及之后共b个字符，（若b超出size则到最后）&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;stoi函数: 将string类型转换成int类型的函数

stod函数: 将string类型转换成double类型的函数

atof函数: 将string类型转换成double类型的函数&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3 id=&#34;5cctype&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5cctype&#34;&gt;#&lt;/a&gt; 5. &lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;1.isalpha()，用来判断一个字符是否为字母，如果是字符则返回非零，否则返回零。

2.isalnum()，用来判断一个字符是否为数字或者字母，也就是说判断一个字符是否属于a~z||A~Z||0~9。是返回非零，不是返回0。

3.islower()，用来判断一个字符是否为小写字母，也就是是否属于a~z。是返回非零，不是返回0。

4.isupper()，用来判断一个字符是否为大写字母。是返回非零，不是返回0。

if(isupper(str[i]))&amp;#123;
   ...
&amp;#125;

5.char c &amp;#x3D; toupper(a)，a为字符时，如果a是小写字母则将其转换为大写字母，否则不变。a为数字则将其按ASCLL码转换为对应字符。（其实即使a是字符，输入之后还是会将其转换为int类型）

6.char c &amp;#x3D; tolower(a)，a为字符时，如果a是大写字母则将其转换为小写字母，否则不变。a为数字则将其按ASCLL码转换为对应字符。

7.isdigit()，用来判断一个字符是否为数字，如果是数字则返回非零，否则返回零。
    
8.int isxdigit( int c )（判断字符c是否：16进制数字）&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3 id=&#34;6sstream&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6sstream&#34;&gt;#&lt;/a&gt; 6. &lt;code&gt;&amp;lt;sstream&amp;gt;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;sstream&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;sstream&amp;gt;
using namespace std;

int main()&amp;#123;
    istringstream iss;
    string s &amp;#x3D; &amp;quot;32 240 2 1450&amp;quot;;
    iss.str(s);
    for (int n&amp;#x3D;0; n&amp;lt;4; n++)&amp;#123;
    	int v;
    	iss &amp;gt;&amp;gt; v;
    	cout &amp;lt;&amp;lt; v &amp;lt;&amp;lt; endl;
  	&amp;#125;
    cout &amp;lt;&amp;lt; &amp;quot;Finished writing the numbers in: &amp;quot;;
  	cout &amp;lt;&amp;lt; iss.str() &amp;lt;&amp;lt; endl;
&amp;#125;
&amp;#x2F;*
32
240
2
1450
Finished writing the numbers in: 32 240 2 1450
*&amp;#x2F;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;sstream&amp;gt;
using namespace std;

int main()
&amp;#123;
    int i &amp;#x3D; 1000;
 
    ostringstream ss;
    ss &amp;lt;&amp;lt; hex &amp;lt;&amp;lt; i;
    string result &amp;#x3D; ss.str();
 
    cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; endl;        &amp;#x2F;&amp;#x2F; 3e8
 
    return 0;
&amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3 id=&#34;7iomanip&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7iomanip&#34;&gt;#&lt;/a&gt; 7. &lt;code&gt;&amp;lt;iomanip&amp;gt;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iomanip&amp;gt;

cout &amp;lt;&amp;lt; setw(3) &amp;lt;&amp;lt; 1; &amp;#x2F;&amp;#x2F;按3列宽度输出(默认右对齐)
cout &amp;lt;&amp;lt; setw(3) &amp;lt;&amp;lt; left &amp;lt;&amp;lt; 1;&amp;#x2F;&amp;#x2F;左对齐
cout &amp;lt;&amp;lt; fixed &amp;lt;&amp;lt; setprecision(2) &amp;lt;&amp;lt; root;&amp;#x2F;&amp;#x2F;保留两位小数&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3 id=&#34;8algorithm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8algorithm&#34;&gt;#&lt;/a&gt; 8. &lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt;&lt;/h3&gt;
&lt;h4 id=&#34;1sort&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1sort&#34;&gt;#&lt;/a&gt; (1) &lt;code&gt;sort()&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;#include&amp;lt;iostream&amp;gt;
#include&amp;lt;algorithm&amp;gt;
using namespace std;

int main()&amp;#123;
	int num[10] &amp;#x3D; &amp;#123;6,5,9,1,2,8,7,3,4,0&amp;#125;;
	sort(num,num+10,greater&amp;lt;int&amp;gt;());
	for(int i&amp;#x3D;0;i&amp;lt;10;i++)&amp;#123;
		cout&amp;lt;&amp;lt;num[i]&amp;lt;&amp;lt;&amp;quot; &amp;quot;;
	&amp;#125;&amp;#x2F;&amp;#x2F;输出结果:9 8 7 6 5 4 3 2 1 0
	return 0;
&amp;#125; &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;它有三个参数 &lt;code&gt;sort(begin, end, cmp)&lt;/code&gt; ，其中 begin 为指向待 sort () 的数组的 &lt;code&gt;第一个元素的指针&lt;/code&gt; ，end 为指向待 sort () 的数组的 &lt;code&gt;最后一个元素的下一个位置的指针&lt;/code&gt; ，cmp 参数为排序准则，cmp 参数可以不写，如果不写的话，默认从小到大进行排序。如果我们想从大到小排序可以将 cmp 参数写为 &lt;code&gt;greater&amp;lt;int&amp;gt;()&lt;/code&gt;  就是对 int 数组进行排序，当然 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;  中我们也可以写 double、long、float 等等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;自定义排序准则&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;#include&amp;lt;iostream&amp;gt;
#include&amp;lt;algorithm&amp;gt;
using namespace std;

bool cmp(int x,int y)&amp;#123;
	return x % 10 &amp;gt; y % 10;
&amp;#125;

int main()&amp;#123;
	int num[10] &amp;#x3D; &amp;#123;65,59,96,13,21,80,72,33,44,99&amp;#125;;
	sort(num,num+10,cmp);
	for(int i&amp;#x3D;0;i&amp;lt;10;i++)&amp;#123;
		cout&amp;lt;&amp;lt;num[i]&amp;lt;&amp;lt;&amp;quot; &amp;quot;;
	&amp;#125;&amp;#x2F;&amp;#x2F;输出结果：59 99 96 65 44 13 33 72 21 80
	return 0;
&amp;#125; &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;（也可以对结构体进行排序）&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;#include&amp;lt;iostream&amp;gt;
#include&amp;lt;string&amp;gt;
#include&amp;lt;algorithm&amp;gt;
using namespace std;

struct Student&amp;#123;
	string name;
	int score;
	Student() &amp;#123;&amp;#125;
	Student(string n,int s):name(n),score(s) &amp;#123;&amp;#125;
&amp;#125;;

bool cmp_score(Student x,Student y)&amp;#123;
	return x.score &amp;gt; y.score;
&amp;#125;

int main()&amp;#123;
	Student stu[3];
	string n;
	int s;
	for(int i&amp;#x3D;0;i&amp;lt;3;i++)&amp;#123;
		cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;s;
		stu[i] &amp;#x3D; Student(n,s);
	&amp;#125;
	sort(stu,stu+3,cmp_score);
	for(int i&amp;#x3D;0;i&amp;lt;3;i++)&amp;#123;
		cout&amp;lt;&amp;lt;stu[i].name&amp;lt;&amp;lt;&amp;quot; &amp;quot;&amp;lt;&amp;lt;stu[i].score&amp;lt;&amp;lt;endl;
	&amp;#125;
	return 0;
&amp;#125;
&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;9regex&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#9regex&#34;&gt;#&lt;/a&gt; 9. &lt;code&gt;&amp;lt;regex&amp;gt;&lt;/code&gt;&lt;/h3&gt;
&lt;h4 id=&#34;1regex_match&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1regex_match&#34;&gt;#&lt;/a&gt; (1) &lt;code&gt;regex_match&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;此函数模板用于匹配给定的模式。如果给定的表达式与字符串匹配，则此函数返回  &lt;code&gt;true&lt;/code&gt; 。否则，该函数返回  &lt;code&gt;false&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;n1-算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#n1-算法&#34;&gt;#&lt;/a&gt; N+1、算法&lt;/h2&gt;
&lt;h3 id=&#34;1排序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1排序&#34;&gt;#&lt;/a&gt; 1. 排序&lt;/h3&gt;
&lt;h4 id=&#34;1冒泡排序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1冒泡排序&#34;&gt;#&lt;/a&gt; （1）冒泡排序&lt;/h4&gt;
&lt;h4 id=&#34;2选择排序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2选择排序&#34;&gt;#&lt;/a&gt; （2）选择排序&lt;/h4&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;
&amp;#x2F;&amp;#x2F;从大到小
int main()&amp;#123;
    int max,temp;
    int n;
    cin &amp;gt;&amp;gt; n;
    int num[n];
    for(int i&amp;#x3D;0;i&amp;lt;n;i++)&amp;#123;
        cin &amp;gt;&amp;gt; num[i];
    &amp;#125;
    for(int index&amp;#x3D;0;index&amp;lt;n-1;index++)&amp;#123;
        max&amp;#x3D;index;
        for(int scan&amp;#x3D;index+1;scan&amp;lt;n;scan++)&amp;#123;
            if(num[scan]&amp;gt;num[max])&amp;#123;
                max&amp;#x3D;scan;
            &amp;#125;
        &amp;#125;
        temp&amp;#x3D;num[index];
        num[index]&amp;#x3D;num[max];
        num[max]&amp;#x3D;temp;
    &amp;#125;
&amp;#125;
&amp;#x2F;&amp;#x2F;从小到大
void sort(string str[],int n)&amp;#123;
    int min;
    string temp;
    for(int index&amp;#x3D;0;index&amp;lt;n-1;index++)&amp;#123;
        min&amp;#x3D;index;
        for(int scan&amp;#x3D;index+1;scan&amp;lt;n;scan++)&amp;#123;
            if(str[scan].length()&amp;lt;str[min].length())&amp;#123;
                min&amp;#x3D;scan;
            &amp;#125;
        &amp;#125;
        temp&amp;#x3D;str[index];
        str[index]&amp;#x3D;str[min];
        str[min]&amp;#x3D;temp;
    &amp;#125;
&amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
