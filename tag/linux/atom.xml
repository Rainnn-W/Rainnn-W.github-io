<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://rainnn-w.github.io</id>
    <title>Rainnnの • Posts by &#34;linux&#34; tag</title>
    <link href="https://rainnn-w.github.io" />
    <updated>2022-12-18T05:42:41.000Z</updated>
    <category term="Java" />
    <category term="lab" />
    <category term="c++" />
    <category term="Linux" />
    <entry>
        <id>https://rainnn-w.github.io/posts/15691.html</id>
        <title>Linux</title>
        <link rel="alternate" href="https://rainnn-w.github.io/posts/15691.html"/>
        <content type="html">&lt;h3 id=&#34;一-linux基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-linux基础&#34;&gt;#&lt;/a&gt; 一、Linux 基础&lt;/h3&gt;
&lt;h5 id=&#34;1简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1简介&#34;&gt;#&lt;/a&gt; 1. 简介&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Linux 是多用户、多任务、抢占式操作系统，原著者 Linus，是开源操作系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基本组成：Kernel 内核、Shell 命令行、System Applications&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用户输入命令 -----shell 翻译 -----kernel&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Linux Kernel  Linux 操作系统的核心程序
&lt;ul&gt;
&lt;li&gt;管理程序的运行，为程序分配资源，并且处理程序之间的通信。&lt;/li&gt;
&lt;li&gt;管理对文件系统的读写，把对文件系统的操作映射成对磁盘或其它块设备的操作。&lt;/li&gt;
&lt;li&gt;管理存储器，为程序分配内存，并且管理虚拟内存。&lt;/li&gt;
&lt;li&gt;管理输入、输出，将设备映射成设备文件。&lt;/li&gt;
&lt;li&gt;管理网络。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linux Shell
&lt;ul&gt;
&lt;li&gt;是一个命令解释器，是内核和用户之间的接口。&lt;/li&gt;
&lt;li&gt;是一个编程语言。(Shell script)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;系统的启动过程:&lt;/p&gt;
&lt;p&gt;init -&amp;gt; login -&amp;gt; passwd -&amp;gt; shell&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Linux 应用程序
&lt;ul&gt;
&lt;li&gt;标准的 Linux 系统都具有一整套称为应用程序的程序集，包括文本编辑器、Xwindow、办公套件、Internet 工具和数据库等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;shell 提供内核的保护层&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对用户屏蔽内核的复杂性&lt;/li&gt;
&lt;li&gt;保护内核以免用户操作造成伤害&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统各层次关系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬件是实体工作者&lt;/li&gt;
&lt;li&gt;内核能够控制硬件工作&lt;/li&gt;
&lt;li&gt;shell 是用户与内核沟通的桥梁，是中间站&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281107205.png&#34; alt=&#34;2&#34;&gt;# !&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;2基本命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2基本命令&#34;&gt;#&lt;/a&gt; 2. 基本命令&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;Linux 命令是大小写敏感的，不同于 Windows&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;登录 退出&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;exit 退出命令窗口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;lt;Ctrl-d&amp;gt; 中断当前的通信或从文件中退出。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;lt;Ctrl-c&amp;gt; 中断当前的命令并返回 Shell&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;date 查看当前日期和时间&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;Web Feb &lt;span class=&#34;token number&#34;&gt;15&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;18&lt;/span&gt;:45:46 PST &lt;span class=&#34;token number&#34;&gt;2023&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;CST：China Standard Time 中国标准时间&lt;/p&gt;
&lt;p&gt;PST ：Pitcairn Standard Time 太平洋标准时间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;date -s 设置日期 / 时间&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;date&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-s&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20041129&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;date&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-s&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;:23:23
&lt;span class=&#34;token function&#34;&gt;date&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-s&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;2004-11-29 12:23:23&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cal 查看日历（默认当前年份 月份的月历）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cal 年份 查看当年 12 个月日历&lt;/li&gt;
&lt;li&gt;cal 月份 年份 查看该年该月日历&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cal 仅显示当前月份日历&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;若只有一个数字，则被认为是年，并显示相应年的 12 个月的日历。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;clear 清屏&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;echo 在标准输出上显示字符串   &lt;code&gt;\&lt;/code&gt;  换行符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;who 查看当前用户及登陆时间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;whoami 查看当前用户&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ping 检测主机。使用 ICMP 传输协议，发出要求回应的信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mail&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mail &amp;lt;username&amp;gt; &lt;/code&gt;  发送 E-mail&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mail  &lt;/code&gt;  接收 E-mail&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;一旦邮件被打开，其将被放 $HOME/mbox 目录中，若想再看这些信息则用：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mail -f&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wall   将在系统中的所有在线用户的终端上显示信息，主要用于广播系统管理信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;write 发送信息  &lt;code&gt;write &amp;lt;username&amp;gt;&lt;/code&gt;    用 &amp;lt;ctrl-d&amp;gt; 结束对话&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mesg 信息接收与否的开关命令&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mesg n&lt;/code&gt;  拒绝消息   &lt;code&gt;mesg y&lt;/code&gt;  允许接收消息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;man + 命令 查看具体命令的说明 （press q to quit）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;超级用户 root，Shell 默认提示符：#&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;普通用户，Shell 默认提示符：$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;#useradd rainnn  &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;添加用户 rainnn&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;#deluser rainnn &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;删除用户 rainnn&lt;/p&gt;
&lt;h5 id=&#34;3知识点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3知识点&#34;&gt;#&lt;/a&gt; 3. 知识点&lt;/h5&gt;
&lt;p&gt;(1)  &lt;code&gt;&amp;gt;&lt;/code&gt;  表示覆盖原文件内容（文件的日期也会自动更新）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;gt;&amp;gt;   &lt;/code&gt;  表示追加内容（会另起一行，文件的日期也会自动更新）&lt;/p&gt;
&lt;p&gt;(2) tty 终端机代号&lt;/p&gt;
&lt;p&gt;(3) 常见目录说明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;/bin 存放二进制可执行文件 (ls,cat,mkdir 等)，常用命令一般都在这里。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/etc 存放系统管理和配置文件&lt;/p&gt;
&lt;p&gt;/etc/shadow 存放用户口令的加密信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/home 存放所有用户文件的根目录，是用户主目录的基点。&lt;/p&gt;
&lt;p&gt;比如用户 user 的主目录就是 /home/user，可以用～user 表示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/usr 用于存放系统应用程序，比较重要的目录 /usr/local 本地系统管理员 软件安装目录（安装系统级的应用）。这是最庞大的目录，要用到的应用 程序和文件几乎都在这个目录。&lt;/p&gt;
&lt;p&gt;/usr/x11r6 存放 x window 的目录&lt;/p&gt;
&lt;p&gt;/usr/bin 众多的应用程序&lt;/p&gt;
&lt;p&gt;/usr/sbin 超级用户的一些管理程序&lt;/p&gt;
&lt;p&gt;/usr/doc linux 文档&lt;/p&gt;
&lt;p&gt;/usr/include linux 下开发和编译应用程序所需要的头文件&lt;/p&gt;
&lt;p&gt;/usr/lib 常用的动态链接库和软件包的配置文件&lt;/p&gt;
&lt;p&gt;/usr/man 帮助文档&lt;/p&gt;
&lt;p&gt;/usr/src 源代码，linux 内核的源代码就放在 /usr/src/linux&lt;/p&gt;
&lt;p&gt;/usr/local/bin 本地增加的命令&lt;/p&gt;
&lt;p&gt;/usr/local/lib 本地增加的库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/dev 存放设备文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/mnt 系统管理员安装临时文件的安装点。&lt;/p&gt;
&lt;p&gt;系统提供这个目录是让用户临时挂载其他的文件系统。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/tmp 存放各种临时文件，是公用的临时文件存储点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/var 存放运行时需要改变数据的文件，也是某些大文件的溢出区， 比方说各种服务的日志文件（系统启动日志等。）等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/opt 额外安装的可选应用程序包所放置的位置。&lt;/p&gt;
&lt;p&gt;一般情况下，我们可以把 tomcat 等都安装到这里。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/boot 存放用于系统引导时使用的各种文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/proc 虚拟文件系统目录，是系统内存的映射。&lt;/p&gt;
&lt;p&gt;可直接访问这个目录来获取系统信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/root 超级用户的目录&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二-文件系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-文件系统&#34;&gt;#&lt;/a&gt; 二、文件系统&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;文件系统：文件系统实现数据存储的物理（介质）独立性&lt;/p&gt;
&lt;p&gt;文件：是 Linux 用来存储信息的基本结构，它是被命名（称为文件名）的、存储在某种媒介（如磁盘、光盘和磁带等）上的一组信息的集合。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;1文件名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1文件名&#34;&gt;#&lt;/a&gt; 1. 文件名&lt;/h5&gt;
&lt;p&gt;（1）文件名通常由字母、数字、“.”（点号）、“_”（下划线）或 “-”（减号）组成，文件名中不能含有 “/” 符号。&lt;/p&gt;
&lt;p&gt;（2）隐藏文件一般是以 “&lt;strong&gt;.&lt;/strong&gt;” 符号开头&lt;/p&gt;
&lt;p&gt;（3）在文件名中的空格或制表符，在引用文件时必须用引号将其括起来；&lt;/p&gt;
&lt;p&gt;（4）大小写敏感&lt;/p&gt;
&lt;p&gt;（5）避免使用具有特别意义的字符： ?,*,@, #,$,&amp;amp;,(,),,|,;,‘,“,`,&amp;lt;,&amp;gt;,[,] 等&lt;/p&gt;
&lt;p&gt;（6）避免使用 ‘+’和‘-‘符号作为文件名的第一个字符&lt;/p&gt;
&lt;h5 id=&#34;2文件类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2文件类型&#34;&gt;#&lt;/a&gt; 2. 文件类型&lt;/h5&gt;
&lt;h6 id=&#34;1普通文件regular-file&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1普通文件regular-file&#34;&gt;#&lt;/a&gt; （1）普通文件（regular file）&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;二进制文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文本文件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;2目录文件directory-包含文件的容器用于存放目录中文件列表信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2目录文件directory-包含文件的容器用于存放目录中文件列表信息&#34;&gt;#&lt;/a&gt; （2）目录文件（directory） 包含文件的容器，用于存放目录中文件列表信息&lt;/h6&gt;
&lt;p&gt;存储一组相关文件的位置、大小等与文件有关的信息，但它不包含具体的文件内容，因而和常规文件相比占用的磁盘空间很小。&lt;/p&gt;
&lt;p&gt;每一项 (entry) 主要表示的是一个文件名 (或子目录名) 以及文件的索引节点号 (i-node number ) 。&lt;/p&gt;
&lt;p&gt;索引节点号：指向该文件内容所在的数据块的位置，记录了该文件的属性&lt;/p&gt;
&lt;p&gt;通过 i-node 表与文件之间建立对应关系，目录文件是存放文件名唯一的地方，但文件名不放在 i-node 表中。&lt;/p&gt;
&lt;h6 id=&#34;3设备文件device-file-在linux中设备被当作文件来处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3设备文件device-file-在linux中设备被当作文件来处理&#34;&gt;#&lt;/a&gt; （3）设备文件（device file） 在 linux 中，设备被当作文件来处理&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;Everything is a file！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;3目录组织&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3目录组织&#34;&gt;#&lt;/a&gt; 3. 目录组织&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;访问一个文件或子目录时，首先访问他所在的目录，找到该文件的 i-node 值，然后再查找 i-node 表找出相应的 i-node 项，从而找到了相应的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281107402.png&#34; alt&gt;&lt;/p&gt;
&lt;h5 id=&#34;u4操作命令u&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#u4操作命令u&#34;&gt;#&lt;/a&gt; &amp;lt;u&amp;gt;4.※操作命令 &amp;lt;/u&amp;gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;touch 创建文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cp 复制   &lt;code&gt;cp [-options] 源文件或目录  目的文件或目录&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-i：在覆盖文件之前提示用户，由用户确认.&lt;/li&gt;
&lt;li&gt;-R 或 - r：递归复制目录，即复制相应的目录及其所有子目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$cp&lt;/span&gt; file1 file2
&lt;span class=&#34;token comment&#34;&gt;#在当前目录下拷贝文件 file1 的副本 file2，但若 file2 已存在，将覆盖 file2 的原有内容&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$cp&lt;/span&gt; file1 directory1
&lt;span class=&#34;token comment&#34;&gt;#将文件 file1 拷贝到当前目录下的 directory1 目录下 (相对路径)&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$cp&lt;/span&gt; preface doc props 
&lt;span class=&#34;token comment&#34;&gt;#将文件 preface 和 doc 拷贝到 props 目录中&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;#要将文件 myfile1 拷贝到 myfile1.bak &lt;/span&gt;
$ &lt;span class=&#34;token function&#34;&gt;cp&lt;/span&gt; myfile1 myfile1.bak
&lt;span class=&#34;token comment&#34;&gt;#要将文件 get.prd 从 /usr/local/sybin 目录拷贝到到 /usr/local/bin 目录&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$cp&lt;/span&gt; /usr/local/sybin/get.prd   /usr/local/bin
&lt;span class=&#34;token comment&#34;&gt;#要将 /logs 目录下的所有文件及子目录拷贝到 /hold/logs 目录中&lt;/span&gt;
$ &lt;span class=&#34;token function&#34;&gt;cp&lt;/span&gt;  &lt;span class=&#34;token parameter variable&#34;&gt;-r&lt;/span&gt; /logs  /hold/logs&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;mv 移动或改名&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mv 原文件名 新文件名&lt;/code&gt;  （改名）    &lt;code&gt;mv 文件名 路径名&lt;/code&gt;  （移动）  &lt;code&gt;mv 文件名 路径/新文件名&lt;/code&gt;  （移动并改名）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-f 强制执行。直接覆盖已存在的目的文件，不显示覆盖前的询问讯息。&lt;/li&gt;
&lt;li&gt;-i 交互执行。当已存在同名的目标文件名时，在覆盖之前给出提示，由用户确认后才予以覆盖。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rm 删除文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rm file1 file2 &lt;/code&gt; （删除多个文件用空格隔开文件名）  &lt;code&gt;rm directory&lt;/code&gt;  （删除目录）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-f 强制执行&lt;/li&gt;
&lt;li&gt;-i 交互执行，在执行删除前提示确认&lt;/li&gt;
&lt;li&gt;-R 或 - r 递归的删除目录&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mkdir 创建目录（对其父目录必须有写权限）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;-p 递归创建，即使路径上的文件夹本来不存在&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$mkdir&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; test1/test2/test3&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;-m 指定权限&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$mkdir&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-m&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;711&lt;/span&gt; testqq
&lt;span class=&#34;token comment&#34;&gt;#drwx--x--x 2 test test 4096 Feb 6 20:48 testqq/&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rmdir 删除目录 （对该目录的父目录必须有写权限，且该目录为空目录）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;whereis 显示文件目录&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;whereis 找不到某个文件的部分原因可能是这个文件没有存在于任何 whereis 命令搜索的子目录中。whereis 命令检索的子目录是固定编写 在它的程序中的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;locate 与 find -name 相同&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;#查找 passwd 文件&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$locate&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;passwd&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#搜索 etc 目录下所有以 sh 开头的文件&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$locate&lt;/span&gt; /etc/sh
&lt;span class=&#34;token comment&#34;&gt;#忽略大小写搜索当前用户目录下所有以 r 开头的文件 ：&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$locate&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-i&lt;/span&gt; ~/r&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mount 挂接文件系统&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Linux 通过挂接（mount）一个文件系统将该新文件系统加入它的文件系统树中。所有的文件系统，不管是什么类型，都挂接在文件系统树的一个目录上并且该文件系统之上的文件将掩盖掉这个挂接目录中原来存在的内容。这个目录称为挂接目录或挂接点。当文件系统被卸掉之后，挂接目录中原来的文件才再次可见。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ls&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ls -a 显示全部文件（包括文件名以 “.” 开头的隐藏文件）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ls 显示文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ls -l 显示长目录（文件的详细信息：文件的类型、操作权限、链接数、属主名、属组名、字节数、最近修改时间、文件名）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每行的第一个字符表明文件的类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;d 目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;f 普通文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;l 符号链接文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;b 块设备文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;c 字符设备文件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ls -d 显示目录名而不显示其中的文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ls -R 递归列出子目录（显示文件 + 目录下文件）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ls -r 以逆序显示文件名列表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ls -x 显示时以字母顺序&lt;/p&gt;
&lt;p&gt;(注：正常的显示顺序为按 ASCII 排序方式。)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ls -color 用不同颜色区分文件类型&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;颜色含义为:&lt;/p&gt;
&lt;p&gt;绿色 ---&amp;gt; 可执行文件&lt;/p&gt;
&lt;p&gt;蓝色 ---&amp;gt; 目录&lt;/p&gt;
&lt;p&gt;红色 ---&amp;gt; 压缩文件&lt;/p&gt;
&lt;p&gt;浅蓝色 -&amp;gt; 连结文件&lt;/p&gt;
&lt;p&gt;灰色 ---&amp;gt; 一般文件 (没有定义的文件)&lt;/p&gt;
&lt;p&gt;（颜色自定义可修改 &lt;code&gt;/etc/DIR_COLORS&lt;/code&gt; ）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cd 切换路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cat 将文件的文本内容一次全部显示在屏幕上&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat -n filename&lt;/code&gt;  打印行号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cat -b filename&lt;/code&gt;  打印行号，空行不编号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cat filename &lt;/code&gt; 打印文本内容（不包括行号）&lt;/li&gt;
&lt;li&gt;文件的合并、建立、覆盖和添加内容等
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat file1 file2 &amp;gt;file&lt;/code&gt;  将 file1 和 file2 合并到 file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cat file1 &amp;gt;&amp;gt;file2&lt;/code&gt;  将 file1 追加到 file2 的末尾&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;more  分屏显示文件内容。&lt;/p&gt;
&lt;p&gt;你可以随心所欲地在文本上上下移动。&lt;/p&gt;
&lt;p&gt;当 more 命令调用一个文件时，显示第一屏的文本。常用按键：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;f 键或 &amp;lt;Space&amp;gt;: 进入下一页。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;b 键：前一页&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;lt;Enter&amp;gt;: 向下移动一行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;q 键或 &amp;lt;Ctrl+C&amp;gt;: 退出。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;less&lt;/p&gt;
&lt;p&gt;less 工具也是对文件或其它输出进行分页显示的工具，应该说是 linux 正 统查看文件内容的工具，功能极其强大。less 的用法比起 more 更加的有弹 性。 在 more 的时候，我们并没有办法向前面翻， 只能往后面看，但若使 用了 less 时，就可以使用 [pageup] [pagedown] 等按 键的功能来往前 往后翻看文件，更容易用来查看一个文件的内容！除此之外，在 less 里头 可以拥有更多的搜索功能，不止可以向下搜，也可以向上搜。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wc  统计文件中的字符数、单词数和行数   按以下顺序输出：&lt;/p&gt;
&lt;p&gt;行数  单词数  字符数  文件名&lt;/p&gt;
&lt;p&gt;&lt;code&gt;wc [ -options] [ filename ]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;-c：显示字符数。&lt;/p&gt;
&lt;p&gt;-l：显示行数。&lt;/p&gt;
&lt;p&gt;-w：显示单词数。（单词是指由空格或 tabs 分开的最大字串。）&lt;/p&gt;
&lt;p&gt;（wc 等价于 wc -lwc）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;alias  别名  &lt;code&gt;alias 简称=&#39;代码&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$alias&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;ls&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;ls --color=auto&#39;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#输入 ls 的时候就等同输入 ls --color=auto&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$unalias&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;cp&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#取消别名&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;id  显示用户 id 以及群组 id&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;df  (disk free) 显示目前在 Linux 系统 上的文件系统磁盘使用情况统计。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;5基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5基本概念&#34;&gt;#&lt;/a&gt; 5. 基本概念&lt;/h5&gt;
&lt;h6 id=&#34;1目录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1目录&#34;&gt;#&lt;/a&gt; （1）目录&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;pwd 当前目录即当前工作目录  (print working directory)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户主目录：/home/rainnn   （~）   root 用户：/root&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cd 回到主目录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;绝对路径：指出从根目录到此文件的路径，一般来说由 / 符号开始。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;相对路径：指明从当前目录到此文件的路径&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;.&lt;/code&gt;  表示当前目录  &lt;code&gt;..&lt;/code&gt;  表示当前目录的父目录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$HOME 主目录&lt;/p&gt;
&lt;p&gt;&lt;code&gt;echo $HOME&lt;/code&gt;  查看自己的主目录&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;2链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2链接&#34;&gt;#&lt;/a&gt; （2）链接&lt;/h6&gt;
&lt;p&gt;** 链接文件:** 目录中每一对文件名称和索引节点号称为一个链接 (考)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;符号链接（软链接） &lt;strong&gt;可跨文件系统 可以链接目录&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以路径的形式存在，类似于 windows 操作系统中的快捷方式&lt;/li&gt;
&lt;li&gt;可以对一个不存在的文件名进行链接&lt;/li&gt;
&lt;li&gt;如果删除符号链接文件的源文件，符号链接文件将无法找到原有资料。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;硬链接 &lt;strong&gt;不可跨文件系统&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以文件副本的形式存在，但不占用实际空间（ln 用于对一个已经存在的文件再创建一个新的链接，而不复制文件的内容。)&lt;/li&gt;
&lt;li&gt;原文件名和链接文件名都指向相同的物理位址。 （i-node number）&lt;/li&gt;
&lt;li&gt;不允许普通用户给目录创建硬链接&lt;/li&gt;
&lt;li&gt;如果删除硬链接文件的源文件，硬链接文件仍然存在，而且保留了原有的内容&lt;/li&gt;
&lt;li&gt;ln 后的链接文件名与物理文件具有相同的权限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ln 命令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ln -s abc linkabc &lt;/code&gt; （为 abc 文件创建&lt;strong&gt;软链接&lt;/strong&gt; linkabc，若 abc 丢失，linkabc 会失效）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ln abc linkabc&lt;/code&gt; （为 abc 创建&lt;strong&gt;硬链接&lt;/strong&gt; linkabc，abc 与 linkabc 各项属性相同）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;6权限控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6权限控制&#34;&gt;#&lt;/a&gt; 6. 权限控制&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;多用户、多任务（此操作系统决定了常常会有多人同时使用这部主机工作），系统必须进行权限控制&lt;/p&gt;
&lt;p&gt;确定用户（或者说代表用户执行的程序）对某资源有或无某种操作的权力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;1用户类别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1用户类别&#34;&gt;#&lt;/a&gt; (1) 用户类别&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;文件所有者 u&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;能够设定同组用户和其他用户对该文件的访问权限。一般来说是文件的创建者。&lt;/p&gt;
&lt;p&gt;保证每个人的隐私权&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;同组用户 g&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;具有相同性质的所有用户，被系统管理员分在同一组。文件所有者或系统管理员可将文件的权限赋予组内的其它用户。&lt;/p&gt;
&lt;p&gt;Linux 中每个用户至少属于一个用户组，以保证对一个用户组中的所有用户进行集中管理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;其他用户 o&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;文件所有者或系统管理员还可以将文件的访问权赋予系统中所有其它的用户。这样，系统中每一位用户可能都能访问你的某一文件或目录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;所有用户 a&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;2三种权限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2三种权限&#34;&gt;#&lt;/a&gt; （2）三种权限&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;读 r: 4&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写 w: 2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行 x: 1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;-: 0&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281108008.png&#34; alt&gt;&lt;/p&gt;
&lt;h6 id=&#34;3权限判断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3权限判断&#34;&gt;#&lt;/a&gt; （3）权限判断&lt;/h6&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281108287.jpg&#34; alt&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ls -lR 查看目录内一文件的权限 (ls -lR 相当于 ls -l + ls -R  长列表显示文件 + 目录下文件)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;移动：文件所在目录具有 w 权限（移动文件其实不改变文件，是改变的目录）&lt;/li&gt;
&lt;li&gt;在目录下增删文件、子目录 (touch rm mkdir rmdir)：要有目录的 w 权限&lt;/li&gt;
&lt;li&gt;用 ls 列目录：要有目录的 r 权限&lt;/li&gt;
&lt;li&gt;进入目录或将该目录作路径分量时 (cd)：要有该文件路径上所有目录的 x 权限&lt;/li&gt;
&lt;li&gt;修改：文件有 w 权限，文件路径上所有目录有 x 权限&lt;/li&gt;
&lt;li&gt;拷贝：文件有 r 权限，文件路径上所有目录有 x 权限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;!-- 若文件在 /jobs/work 下，则需 jobs 目录和 work 目录均具有执行权限 --&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;4权限操作命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4权限操作命令&#34;&gt;#&lt;/a&gt; （4）权限操作命令&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;chmod&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;chmod a+r 文件名&lt;/code&gt; （给所有用户加 r 权限）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;chmod u-r 文件名&lt;/code&gt; （给文件所有者减 r 权限）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;chmod -R a+r  *&lt;/code&gt; （将目录下所有文件与子目录皆设为任何人可读）&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- -R 意为递归 --&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;chmod 771 file&lt;/code&gt; （与 &lt;code&gt;chmod ug=rwx,o=x file&lt;/code&gt;  效果相同）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;chown 设置文件所有者和文件关联组&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;chown [-options] user[：group] filelist&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;user 表示将要改变的所有者用户名或用户 id&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;group 表示将要改变的所属用户组名或组 id&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;chown test test.txt&lt;/code&gt;   把 test.txt 的所有者改为用户 test&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;-R：递归改变目录及其内容的所属用户或用户组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;chown -R root:test testfloder1&lt;/code&gt;  把 testfolder1 目录及目录下所有文件的所有者改为 root，所属用户组名改为 test&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;su + 用户名 切换用户&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sudo 以系统管理员的身份执行指令&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;7进程管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7进程管理&#34;&gt;#&lt;/a&gt; 7. 进程管理&lt;/h5&gt;
&lt;h6 id=&#34;1概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1概念&#34;&gt;#&lt;/a&gt; （1）概念&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;程序是静态的，是保存在磁盘上的可执行代码和数据的集合&lt;/li&gt;
&lt;li&gt;进程（进程是程序执行的过程，是执行的程序）是动态的，是 Linux 系统的基本调度单位&lt;/li&gt;
&lt;li&gt;操作系统通过进程来控制对 CPU 和其他系统资源的访问，并且使用进程来决定在 CPU 上运行哪个程序、运行多久。&lt;/li&gt;
&lt;li&gt;Linux 重要特点：可以同时启动多个进程&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;2init进程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2init进程&#34;&gt;#&lt;/a&gt; （2）Init 进程&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;内核启动后的第一个进程，其 PID=1&lt;/p&gt;
&lt;p&gt;（PID：进程号 一个 PID 唯一的标识一个进程）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;init 进程永远不会被终止&lt;/strong&gt;，扮演终结父进程的角色，所有进程追溯其祖先最终都会落到 init 进程身上。如果某个进程在它衍生出来的全部子进程结束之前被终止，此时那些失去了父进程的子进程就都会以 init 作为它们的父进程。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;3操作命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3操作命令&#34;&gt;#&lt;/a&gt; （3）操作命令&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ps 显示当前进程的状态&lt;/p&gt;
&lt;p&gt;可以用它来确定有哪些进程正在运行以及运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等。&lt;br&gt;
它显示的进程列表是一个静态列表，这个列表是在我们启动这个命令时正在运行的进程的快照。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;USER&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;PID&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;%CPU&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;%MEM&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;VSZ&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;RSS&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;TTY&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;STAT&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;START&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;TIME&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;COMMAND&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;进程所有者&lt;/td&gt;
&lt;td&gt;进程号&lt;/td&gt;
&lt;td&gt;对 cpu 的占用率&lt;/td&gt;
&lt;td&gt;对内存的占用率&lt;/td&gt;
&lt;td&gt;占用的虚拟内存大小&lt;/td&gt;
&lt;td&gt;占用的内存大小&lt;/td&gt;
&lt;td&gt;进程相关的终端设备&lt;/td&gt;
&lt;td&gt;进程状态 R：运行 S：中断 T：停止 D：不可中断 Z：僵死&lt;/td&gt;
&lt;td&gt;进程开始时间&lt;/td&gt;
&lt;td&gt;进程使用的总 cpu 时间&lt;/td&gt;
&lt;td&gt;被执行的命令行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;top 动态地持续监听进程地运行状态&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;d 设置刷新进程的时间间隔，你会被提示输入一个数（秒）&lt;/li&gt;
&lt;li&gt;q 退出 top 命令。&lt;/li&gt;
&lt;li&gt;k 杀死某进程。你会被提示输入进程 ID 以及要发 送给它的信号。&lt;/li&gt;
&lt;li&gt;h 显示帮助屏幕&lt;/li&gt;
&lt;li&gt;n 显示的进程数量。你会被提示输入数量。&lt;/li&gt;
&lt;li&gt;u 选择用户。&lt;/li&gt;
&lt;li&gt;M 按内存用量排序。&lt;/li&gt;
&lt;li&gt;P 按 CPU 用量排序。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;top&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-n&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#表示更新两次之后终止更新显示&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;top&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#更新周期为 3 秒&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;top&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;139&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#显示进程号为 139 的进程信息，CPU、内存占用率等&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;kill 删除执行中的程序或工作  终止和挂起后台进程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pgrep  查找进程的信息，默认只显示 PID (通常会和 kill 命令来连用，在指定条件下 kill 问题进程)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kill PID&lt;/code&gt;  (PID 可通过 ps 查看）或者 &lt;code&gt;kill %jobID&lt;/code&gt;   （jobID 通过 jobs 查看）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-f 匹配进程名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jobs 用于显示和控制后台正在执行的和被挂起的任务序列。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;fg %jobID&lt;/code&gt;  用于将后台运行的或 挂起 的任务（或作业）切换到前台运行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;bg %jobID&lt;/code&gt;  使后台的任务继续运行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nohup   (no hang up)（不挂起），用于在系统后台不挂断地运行命令，退出终端不会影响程序的运行   &lt;code&gt;nohup&amp;#123;command|script&amp;#125;&lt;/code&gt;  {a|b}:a b 中必选一项&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;前台进程：跟用户交互的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后台进程 ：由后台启动的进程&lt;/p&gt;
&lt;p&gt;启动方法： &lt;code&gt;$command &amp;amp;&lt;/code&gt;    终止和挂起后台进程： &lt;code&gt;kill&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dmesg 显示开机信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;三-vi编辑器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三-vi编辑器&#34;&gt;#&lt;/a&gt; 三、vi 编辑器&lt;/h3&gt;
&lt;p&gt;并不是一个排版程序，只是一个文本编辑程序。&lt;/p&gt;
&lt;h5 id=&#34;1命令模式command-mode&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1命令模式command-mode&#34;&gt;#&lt;/a&gt; 1. 命令模式 (Command mode)&lt;/h5&gt;
&lt;h6 id=&#34;1进入命令模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1进入命令模式&#34;&gt;#&lt;/a&gt; （1）进入命令模式&lt;/h6&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$vi&lt;/span&gt; +n 文件名
&lt;span class=&#34;token comment&#34;&gt;# +[n]:&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#指明进入 vi 后直接位于文件的第 n 行&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#如果只有 “+” 而不指定 n, 则光标位于文本的最后一行&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#如果该文件不存在，会自动建立新文件。&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$vi&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-R&lt;/span&gt; 文件名
&lt;span class=&#34;token comment&#34;&gt;#以只读方式打开文件&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$vi&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-r&lt;/span&gt; 文件名
&lt;span class=&#34;token comment&#34;&gt;#恢复系统突然崩溃时正在编辑的文件。&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在任何模式下，按 &amp;lt;Esc&amp;gt; 键即可回到命令模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;2移动光标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2移动光标&#34;&gt;#&lt;/a&gt; （2）移动光标&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;最简单的方式是按键盘的上、下、左、右方向键&lt;br&gt;
 &lt;code&gt;nG&lt;/code&gt; 	　跳到第 n 行&lt;br&gt;
 &lt;code&gt;G&lt;/code&gt; 		  跳到最后一行&lt;br&gt;
 &lt;code&gt;0&lt;/code&gt; 		  跳到行首&lt;br&gt;
 &lt;code&gt;$&lt;/code&gt; 		  跳到行尾&lt;br&gt;
 &lt;code&gt;ctrl+b&lt;/code&gt; 	  前移一页&lt;br&gt;
 &lt;code&gt;ctrl+f&lt;/code&gt; 	  后移一页&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;3字符串搜索&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3字符串搜索&#34;&gt;#&lt;/a&gt; （3）字符串搜索&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;/str1&lt;/code&gt;       正向搜索字符串 str1&lt;br&gt;
 &lt;code&gt;?str2&lt;/code&gt;       反向搜索字符串 str2&lt;br&gt;
 &lt;code&gt;n&lt;/code&gt;           继续搜索，找出 str1 字符串下次出现的位置&lt;br&gt;
 &lt;code&gt;N&lt;/code&gt;           反方向搜索&lt;/p&gt;
&lt;h5 id=&#34;2输入模式insert-mode&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2输入模式insert-mode&#34;&gt;#&lt;/a&gt; 2. 输入模式 (Insert mode)&lt;/h5&gt;
&lt;h6 id=&#34;1进入输入模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1进入输入模式&#34;&gt;#&lt;/a&gt; （1）进入输入模式&lt;/h6&gt;
&lt;p&gt;在命令模式下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;i&amp;gt; 在当前光标位置插入&lt;/li&gt;
&lt;li&gt;&amp;lt;a&amp;gt; 光标后一个位置插入&lt;/li&gt;
&lt;li&gt;&amp;lt;o&amp;gt; 光标下一行插入新的行&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;2输入模式下命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2输入模式下命令&#34;&gt;#&lt;/a&gt; (2) 输入模式下命令&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&amp;lt;x&amp;gt; 删除光标所在处单个字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;lt;dd&amp;gt; 删除当前光标所在行&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;3底行模式last-line-mode&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3底行模式last-line-mode&#34;&gt;#&lt;/a&gt; 3. 底行模式 (Last Line Mode)&lt;/h5&gt;
&lt;h6 id=&#34;1进入底行模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1进入底行模式&#34;&gt;#&lt;/a&gt; （1）进入底行模式&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;在命令模式下，按下 &amp;lt;:&amp;gt; 键&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;2移动光标-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2移动光标-2&#34;&gt;#&lt;/a&gt; （2）移动光标&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;:n&lt;/code&gt;    将光标移到第 n 行&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:+n &lt;/code&gt;     将光标移动到当前行往下的第 n 行&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;.&lt;/code&gt;    -- 光标所在行的行号&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$&lt;/code&gt;    -- 正文最后一行的行号&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;:.+5 &lt;span class=&#34;token comment&#34;&gt;#将光标移动到当前行往下的第 5 行。&lt;/span&gt;
:345 &lt;span class=&#34;token comment&#34;&gt;#将光标移到第 345 行&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h6 id=&#34;3字符串替换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3字符串替换&#34;&gt;#&lt;/a&gt; （3）字符串替换&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;[n1, n2]s/str1/str2/[g][c] &lt;/code&gt;  在第 n1 行到 n2 行的范围内将字符串 str1 用 str2 代替&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;c 每次替换都由用户确认&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;g 对行中搜索字符串的每次出现进行替换。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不加 g 只对行中搜索字符串的首次出现进行替换&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;:s/str1/str2/ 	
&lt;span class=&#34;token comment&#34;&gt;#用字符串 str2 替换该行中首次出现的字符串 str1 &lt;/span&gt;
:s/str1/str2/g 
&lt;span class=&#34;token comment&#34;&gt;#用字符串 str2 替换该行中所有出现的字符串 str1 &lt;/span&gt;
:.,&lt;span class=&#34;token variable&#34;&gt;$s&lt;/span&gt;/str1/str2/g 
&lt;span class=&#34;token comment&#34;&gt;#用字符串 str2 替换正文当前行 (.) 到末尾 ($) 所有出现的字符串 str1 &lt;/span&gt;
:1,&lt;span class=&#34;token variable&#34;&gt;$s&lt;/span&gt;/str1/str2/g
&lt;span class=&#34;token comment&#34;&gt;#用字符串 str2 替换正文中 (第一行到最后一行) 所有出现的字符串 str1 &lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h6 id=&#34;4-保存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-保存&#34;&gt;#&lt;/a&gt; （4） 保存&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;将编辑内容保存到原始文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;:w&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将编辑内容写入 file 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;:w file&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h6 id=&#34;5退出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5退出&#34;&gt;#&lt;/a&gt; （5）退出&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;在未作修改的情况下退出&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;：q&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;放弃所有修改，强制退出&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;：q!&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将编辑的内容写入原始文件并退出编辑程序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;：wq&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281108140.png&#34; alt&gt;&lt;/p&gt;
&lt;h6 id=&#34;6在vi内使用shell&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6在vi内使用shell&#34;&gt;#&lt;/a&gt; (6) 在 vi 内使用 Shell&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;:! command&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;4vim和gvim&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4vim和gvim&#34;&gt;#&lt;/a&gt; 4.Vim 和 gvim&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Vim 代表 Vi IMproved，如同其名称所暗示的那样，Vim 作为标准 UNIX 系统 vi 编辑器的提高版而存在。 Vim 除提供和 vi 编辑器一样强大的功能外，还提供有多级恢复、命令行历史以及命令及文件名补全等功能。&lt;/li&gt;
&lt;li&gt;gvim 是 vi 的 X Window 版本，该版本支持鼠标选中，一些高级的光标移动功能，并且带有菜单和工具按钮。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;四-shell&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四-shell&#34;&gt;#&lt;/a&gt; 四、shell&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;shell 是一个命令行解释器，是内核与用户的接口&lt;/p&gt;
&lt;p&gt;也是一种程序设计语言（shell script）&lt;/p&gt;
&lt;p&gt;在用户登录后 shell 启动&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;一shell基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一shell基础&#34;&gt;#&lt;/a&gt; （一）shell 基础&lt;/h4&gt;
&lt;h5 id=&#34;1启动指定类型子shell&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1启动指定类型子shell&#34;&gt;#&lt;/a&gt; 1. 启动指定类型子 shell&lt;/h5&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$shellname&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h5 id=&#34;2退出子shell&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2退出子shell&#34;&gt;#&lt;/a&gt; 2. 退出子 shell&lt;/h5&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$exit&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;Ctrl+D&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h5 id=&#34;3查看当前系统默认shell&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3查看当前系统默认shell&#34;&gt;#&lt;/a&gt; 3. 查看当前系统默认 shell&lt;/h5&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token environment constant&#34;&gt;$SHELL&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;输出：/bin/bash&lt;/p&gt;
&lt;h5 id=&#34;4变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4变量&#34;&gt;#&lt;/a&gt; 4. 变量&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;变量名&lt;/strong&gt;只能是字母、数字、下划线的组合，不能以数字开头&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通常：&lt;/p&gt;
&lt;p&gt;大写字母为系统预设的变量&lt;/p&gt;
&lt;p&gt;小写字母用于用户自定义的变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;1赋值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1赋值&#34;&gt;#&lt;/a&gt; （1）赋值&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;变量名 = 值 或 {变量名 = 值} (无空格)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;abc&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1234&lt;/span&gt;  或   &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;abc&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1234&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若赋空值：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;abc&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;abc&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;abc&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;等号两边不能直接接单独的空格符&lt;/li&gt;
&lt;li&gt;如果变量所取的值中包含空格，必须使用引号将变量取值括起来&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;my name&#39;&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;my name&#34;&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;my&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt; name&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h6 id=&#34;2显示变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2显示变量&#34;&gt;#&lt;/a&gt; （2）显示变量&lt;/h6&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$abc&lt;/span&gt; 或  &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$&amp;#123;abc&amp;#125;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h6 id=&#34;3显示所有shell环境变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3显示所有shell环境变量&#34;&gt;#&lt;/a&gt; （3）显示所有 Shell 环境变量&lt;/h6&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$set&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h6 id=&#34;4清除变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4清除变量&#34;&gt;#&lt;/a&gt; (4) 清除变量&lt;/h6&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$unset&lt;/span&gt; abc&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;清除后变量的值为空&lt;/p&gt;
&lt;h6 id=&#34;5从标准输入读入变量值read&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5从标准输入读入变量值read&#34;&gt;#&lt;/a&gt; (5) 从标准输入读入变量值 read&lt;/h6&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$read&lt;/span&gt; var1 var2 var3 
Hello my friends
&lt;span class=&#34;token comment&#34;&gt;#将 var1、var2、var3 的值分别设置为 Hello、my、friend&lt;/span&gt;

&lt;span class=&#34;token variable&#34;&gt;$read&lt;/span&gt; var1 var2 var3 
Hello my dear friends
&lt;span class=&#34;token variable&#34;&gt;$echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$var3&lt;/span&gt;
dear friends
&lt;span class=&#34;token comment&#34;&gt;#若读入的内容个数比变量多，则将多出的都赋给最后一个变量&lt;/span&gt;

&lt;span class=&#34;token variable&#34;&gt;$read&lt;/span&gt; var1 var2 var3
Hello friends 
&lt;span class=&#34;token variable&#34;&gt;$echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$var3&lt;/span&gt;
$
&lt;span class=&#34;token comment&#34;&gt;#若变量比读入的内容个数多，则多出的变量将设为空值&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h6 id=&#34;6全局环境变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6全局环境变量&#34;&gt;#&lt;/a&gt; (6) 全局环境变量&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;传统上，所有全局环境变量均为大写&lt;/p&gt;
&lt;p&gt;可用于所有子进程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;variable-name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;value
&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; variable-name
&lt;span class=&#34;token comment&#34;&gt;#与本地变量的赋值方式相同。&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#但赋值后必须将变量值导出，否则无法传递给子进程。&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$env&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#显示所有环境变量&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Shell 中有一些预留的环境变量名，他们各有其用途，且不能用 作他用，称为嵌入 Shell 变量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;HOME 变量：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保存用户主目录的完全路径名&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$echo $HOME&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LOGNAME 变量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保存登陆用户名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;$echo $LOGNAME &lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PS1 变量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;保存主提示符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基本提示符包含 Shell 提示符，缺省（系统默认状态的 意思）对超级用户为 #，其他为 $。可以使用任何符号作 提示符&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ PS1=“HH-&amp;gt;”&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PATH 变量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保存进行命令或脚本查找的目录顺序，不同的目录路径 名之间用冒号分隔开。 &lt;code&gt;PATH=/bin:usr/bin:/etc:/home/team01/bin:. &lt;/code&gt;&lt;/li&gt;
&lt;li&gt;正确排列这个次序很重要，可以在执行命令时节省时间。&lt;/li&gt;
&lt;li&gt;加入新的查找路径：  &lt;code&gt;$PATH=$PATH:filelist $export PATH&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;7特殊字符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7特殊字符&#34;&gt;#&lt;/a&gt; （7）特殊字符&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;单引号&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;括起来的所有字符都作为普通字符出现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特殊字符用单引号括起来后，也会失去原有意义，而只作为普通字符解释。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双引号&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由双引号括起来的字符，除（$ \ 引号）几种符号具有其特殊功能外，其余字符都作为普通字符对待&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;反引号&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;反引号括起来的内容被 Shell 解释为命令行&lt;/li&gt;
&lt;li&gt;执行时，Shell 首先执行该命令行，并用它的标准输出结果取代整个反引号（包括反引号括起来的部分）&lt;/li&gt;
&lt;li&gt;反引号可以与其它引号结合使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;abc&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; The current user is &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt;whoami&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;``  
&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$abc&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#The current user is test&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;反斜线&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果下一个字符有特殊含义，反斜线屏蔽其特殊含义。&lt;/p&gt;
&lt;p&gt;下述字符包含有特殊意义： &amp;amp; * + ^ $ ` &amp;quot; | ?。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;8进程间变量的关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8进程间变量的关系&#34;&gt;#&lt;/a&gt; （8）进程间变量的关系&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;变量是进程运行环境的一个组成部分&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本地变量在各进程间是不能相互访问和修改的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子进程不会自动地继承父进程中本地的变量&lt;/p&gt;
&lt;p&gt;export 命令：将变量的设置导出，使之能够传递给子进程&lt;/p&gt;
&lt;p&gt;环境变量的值只能传递给子进程，而不能传递给它所在的父进程&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;9-profile&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#9-profile&#34;&gt;#&lt;/a&gt; (9) profile&lt;/h6&gt;
&lt;p&gt;/etc/profile：存放系统管理员设置的环境变量&lt;/p&gt;
&lt;h5 id=&#34;5注释&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5注释&#34;&gt;#&lt;/a&gt; 5. 注释&lt;/h5&gt;
&lt;p&gt;在 Shell 程序中以字符 # 开头的正文行表示注释行。&lt;/p&gt;
&lt;h4 id=&#34;二shell进阶&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二shell进阶&#34;&gt;#&lt;/a&gt; （二）shell 进阶&lt;/h4&gt;
&lt;h5 id=&#34;1通配符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1通配符&#34;&gt;#&lt;/a&gt; 1. 通配符&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;用户可以在作为命令参数的文件名中包含这些元字符（通配符） 构成一个模式串。&lt;/p&gt;
&lt;p&gt;这样就可以按照所要求的模式来匹配文件名、路径名、字符串等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;* 通配符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;匹配文件名中的任何字符串&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$ls&lt;/span&gt; .*
&lt;span class=&#34;token comment&#34;&gt;#列出所有隐含文件&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在使用 cd 命令切换路径时，使用星号还可以省去输入整个路径名的麻烦&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$pwd&lt;/span&gt;
/home/student
&lt;span class=&#34;token variable&#34;&gt;$cd&lt;/span&gt;  app*
&lt;span class=&#34;token variable&#34;&gt;$pwd&lt;/span&gt;
/home/student/app.1234567&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;? 通配符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可以匹配文件名中的任何单个字符&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$ls&lt;/span&gt; ??R*
任意两个字符开头，第三个字符是R，后面跟任何字符的文件&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[...] 通配符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;匹配方括号 [ ] 中指定范围内的字符&lt;/p&gt;
&lt;p&gt;可以使用横杠 - 来连接两个字母或数字，以表示范围&lt;/p&gt;
&lt;p&gt;例： &lt;code&gt;[a-z]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[!...]&lt;/p&gt;
&lt;p&gt;匹配不在指定范围内的任何字符。&lt;/p&gt;
&lt;p&gt;例： &lt;code&gt;[!a-z]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;#列出所有以 log 开头，后面跟任何单个字符，. 后面跟随任意一位数字、然后可以是任意字符串的文件名：&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$ls&lt;/span&gt; log?.&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;-9&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;*&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;#列出以 i 或 o 开头的文件名：&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$ls&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;*
&lt;span class=&#34;token comment&#34;&gt;#列出以 a、b、c、d、m 中任一个字符开头的文件：&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$ls&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;abcdm&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;* 或者 &lt;span class=&#34;token variable&#34;&gt;$ls&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;a-dm&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;* 
&lt;span class=&#34;token comment&#34;&gt;#列出所有以 log. 开头、后面跟随任意一位数字、然后可以是任意字符串的文件名：&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$ls&lt;/span&gt; log.&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;-9&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;*
&lt;span class=&#34;token comment&#34;&gt;#列出所有以大写字母开头的文件名:&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$ls&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;A-Z&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;*
&lt;span class=&#34;token comment&#34;&gt;#以。开头，最后一个字符可以是除 a 和 z 之外的任意字符的文件名:&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$ls&lt;/span&gt; .*&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;za&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; 
&lt;span class=&#34;token comment&#34;&gt;#列出所有以 LPS 开头、其后可以是任何两个字符，后面跟随一个非数字字符、然后是任意字符串的文件名:&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$ls&lt;/span&gt; LPS？？&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;！0－9&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;*&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h5 id=&#34;2标准文件和文件描述符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2标准文件和文件描述符&#34;&gt;#&lt;/a&gt; 2. 标准文件和文件描述符&lt;/h5&gt;
&lt;p&gt;在 Shell 中执行命令的时候，每个进程都和三个打开的文件相联系，并使用文件 描述符来引用这些文件。&lt;/p&gt;
&lt;h6 id=&#34;1文件描述符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1文件描述符&#34;&gt;#&lt;/a&gt; （1）文件描述符&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;输入文件 —　标准输入 – stdin    0  缺省是键盘，也可以是文件或其他命令的输出&lt;/li&gt;
&lt;li&gt;输出文件 —　标准输出 – stdout    1  缺省是屏幕，也可以是文件&lt;/li&gt;
&lt;li&gt;错误输出文件 — 标准错误输出 – stderr 2  缺省是屏幕，也可以是文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;2输入输出重定向&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2输入输出重定向&#34;&gt;#&lt;/a&gt; （2）输入输出重定向&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;若要指定命令的标准输入、输出或错误输出，而不是使用缺省值，就需要使用文件重定向机制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Command operator file&lt;/code&gt;   将输入、输出或错误重定向到某个文件中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;输入重定向 &amp;lt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输出重定向 &amp;gt;    追加 &amp;gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$ls&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; directory.out
&lt;span class=&#34;token comment&#34;&gt;#将 ls 的内容写在（输出在）directory.out 文件中&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$cat&lt;/span&gt; file1 file2 &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; file3
&lt;span class=&#34;token comment&#34;&gt;#将 file1 file2 的内容一起写在 file3 中&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;错误重定向 2&amp;gt;   将命令或程序执行的错误信息放到文件中&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;#例：假设已经建立了文件 filea，但没有建立文件 fileb&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$cat&lt;/span&gt; filea fileb
This is output from filea.
cat: cannot &lt;span class=&#34;token function&#34;&gt;open&lt;/span&gt; fileb
&lt;span class=&#34;token comment&#34;&gt;#将命令或程序执行的错误信息放到文件中&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$cat&lt;/span&gt; fila fileb &lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;2&lt;/span&gt;&gt;&lt;/span&gt; errfile
This is output from filea.
&lt;span class=&#34;token variable&#34;&gt;$cat&lt;/span&gt; errfile
cat: cannot &lt;span class=&#34;token function&#34;&gt;open&lt;/span&gt; fileb

&lt;span class=&#34;token comment&#34;&gt;#/dev/null 是一个特殊的文件，始终为空文件  &lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$cat&lt;/span&gt; fila fileb &lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;2&lt;/span&gt;&gt;&lt;/span&gt; /dev/null
&lt;span class=&#34;token comment&#34;&gt;#可以不显示任何错误信息&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#这个操作等同于把错误输出删除掉，而不输出。&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;3重定向的结合应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3重定向的结合应用&#34;&gt;#&lt;/a&gt; (3) 重定向的结合应用&lt;/h6&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;Command &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; outfile  &lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;2&lt;/span&gt;&gt;&lt;/span&gt; errfile  &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;  infile
&lt;span class=&#34;token comment&#34;&gt;#以 infile 为标准输入，将标准输出送到 outfile, 标准错误输出送到 errfile. &lt;/span&gt;
Command &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; outfile  &lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;2&lt;/span&gt;&gt;&gt;&lt;/span&gt; errfile  &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;  infile
&lt;span class=&#34;token comment&#34;&gt;#以 infile 为标准输入，将标准输出追加到 outfile, 标准错误输出追加到 errfile. &lt;/span&gt;
Command &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; outfile &lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;2&lt;/span&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;&amp;amp;1&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#&amp;amp;1 的含义就可以理解为用标准输出的引用，引用的就是重定向标准输出产生打开的 outfile&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#把标准输出和标准错误输出同时重定向到 outfile&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h5 id=&#34;3管道&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3管道&#34;&gt;#&lt;/a&gt; 3. 管道&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;** 把一个命令在屏幕上的输出传递给另一个命令作为输入。** 用竖杠 | 表示。（把信息从一端传送到另外一端）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;命令1 &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;命令2&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;例： &lt;code&gt;ls | wc -w&lt;/code&gt;    &lt;code&gt;set | more&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$ls&lt;/span&gt; 
aa Param set_dir spec_var spec_var2 &lt;span class=&#34;token builtin class-name&#34;&gt;test&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$ls&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;wc&lt;/span&gt; –w
&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h5 id=&#34;4过滤和正则表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4过滤和正则表达式&#34;&gt;#&lt;/a&gt; 4. 过滤和正则表达式&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;当从一个文件或命令输出中抽取或过滤文本时，可以使用正则表达式&lt;/p&gt;
&lt;p&gt;以行为单位，来进行字符串的处理行为&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;^d&lt;/code&gt;           行首是 d 的行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;z$&lt;/code&gt;           行尾字符为 z&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt;             只匹配任意单字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;             前面的字符重复 0 到多次  代表任意多个字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[aA]&lt;/code&gt;  	 a or A&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[a-f]&lt;/code&gt; 	a 到 f&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[^0-9]&lt;/code&gt;   非数字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\&lt;/code&gt;              屏蔽其后的特殊字符的特殊含义&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\.&lt;/code&gt;            包含字符 &lt;code&gt;.&lt;/code&gt;  的行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\&amp;#123;n\&amp;#125; &lt;/code&gt;      前导的正则表达式重复 n 次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[0-9]\&amp;#123;3\&amp;#125;&lt;/code&gt;   包含 3 个数字的行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\&amp;#123;min,max\&amp;#125;&lt;/code&gt;       前导的正则表达式重复 min~max 次&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：有些元字符虽然与 Shell 的通配符一样，但意义有所不同&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;5grep命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5grep命令&#34;&gt;#&lt;/a&gt; 5.grep 命令&lt;/h5&gt;
&lt;p&gt;** 允许对文本文件的内容进行模式查找。** 如果找到匹配模式，grep 显示包含该模式的所有行。&lt;/p&gt;
&lt;p&gt;若指定了多个文件名，结果中会在每一行的前面显示文件名。&lt;/p&gt;
&lt;p&gt;&lt;code&gt; grep [-option] pattern files&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-c 只输出匹配行的计数。&lt;/li&gt;
&lt;li&gt;-n 显示匹配行及行号。&lt;/li&gt;
&lt;li&gt;-v 显示不包含匹配文本的所有行。&lt;/li&gt;
&lt;li&gt;-w 只显示全字符合的列&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 grep 命令中输入字符串参数时，最好将其用双引号括起来。&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;#从以 phone 开头的文件中查找所有含 800 的行&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$grep&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;800&#34;&lt;/span&gt; phone*&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;在调用模式匹配时，应使用单引号。&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;#从 phone1 文件中找开头不是 4 和 8 的行（可以是其他数字或字母、符号等）&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$grep&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;^[^48]&#39;&lt;/span&gt; phone1
&lt;span class=&#34;token comment&#34;&gt;#从 phone1 文件中找开头为 44 的行&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$grep&lt;/span&gt; ‘4&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;’ phone1&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以与管道一起结合使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;#显示当前目录下文件名以 abc 开头同时以 123 结尾的文件。&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$ls&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;^abc.*123$&#34;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#查看所有类型为 “目录” 的文件：&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$ls&lt;/span&gt; –l &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; ‘^d’
&lt;span class=&#34;token comment&#34;&gt;#查看所有类型为 “目录”, 且组成员及其他用户对其具有执行权限的文件：&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$ls&lt;/span&gt; –l &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; ‘^d&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.x&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;x’

&lt;span class=&#34;token comment&#34;&gt;#显示匹配 pattern1 或 pattern2 的行&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$grep&lt;/span&gt; pattern1 &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; pattern2 files 
&lt;span class=&#34;token comment&#34;&gt;#显示既匹配 pattern1 又匹配 pattern2 的行。&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$grep&lt;/span&gt; pattern1 files &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; pattern2&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h5 id=&#34;6find命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6find命令&#34;&gt;#&lt;/a&gt; 6.find 命令&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;find path expression [-exec -ok] [command] &amp;#123;&amp;#125; \&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;path：所查找的目录路径，对目录的搜索是递归的。&lt;br&gt;
. 表示当前目录     / 表示系统根目录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;expression 项：希望查询的文件的匹配标准或说明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;-name file   寻找名为 file 的文件，要找的文件名包括在引号中，可以使用通配符。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$find . -name &amp;quot;*.txt&amp;quot;&lt;/code&gt;   在当前目录及子目录中查找所有的 .txt 文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;-user name  按照文件属主来查找文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$find /etc -user uucp &lt;/code&gt;   在 /etc 目录下查找文件属主为 uucp 的文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;-group name 按照文件所属的组来查找文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;-type type  查找某一类型的文件 (b、c、d、f、l)&lt;/p&gt;
&lt;p&gt;d：目录文件   f：普通文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;-size n [c]  查找文件长度为 n 块 (block) 的文件，带有 c 时表示文件长度以字节计。&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;#在当前目录下查找文件长度大于 1M 字节的文件：&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$find&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-size&lt;/span&gt; +1000000c
&lt;span class=&#34;token comment&#34;&gt;#为了在当前目录下查找长度超过 10block 的文件（1 个 block 等于 512 字节）：&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$find&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-size&lt;/span&gt; +10&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;-mtime n  按照文件的更改时间来查找文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-n&lt;/code&gt; 	        最后的更改时间在 n 天以内。&lt;br&gt;
 &lt;code&gt;n , +n&lt;/code&gt;    更改时间距现在 n 天以上。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;-perm 权限&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;-exec    find 命令对匹配的文件执行该参数所给出的 Shell 命令 command。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;-ok     和 - exec 的作用相同，只是在执行每一个命令之前，都会给出提示，让用户来确定是否执行。如果用户不回应 &#39;y&#39; 或 &#39;Y&#39;，command 将不予以执行，并回应 false。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$find&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-name&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;*.LOG&#34;&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-mtime&lt;/span&gt; +5 &lt;span class=&#34;token parameter variable&#34;&gt;-ok&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#find 命令在当前目录中查找所有文件名以.LOG 结尾、更改时间在 5 日以上的文件，并删除它们。&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$find&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-name&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;*.c&#34;&lt;/span&gt; 
&lt;span class=&#34;token comment&#34;&gt;#将.c 结尾的文件全部找出&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$find&lt;/span&gt; / &lt;span class=&#34;token parameter variable&#34;&gt;-type&lt;/span&gt; f &lt;span class=&#34;token parameter variable&#34;&gt;-size&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-exec&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ls&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-l&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#查找系统中所有（/）长度为 0 的普通文件，并列出其完整路径&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$find&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-type&lt;/span&gt; f &lt;span class=&#34;token parameter variable&#34;&gt;-perm&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;644&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-exec&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ls&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-l&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#查找权限为 644 的文件&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$find&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-name&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;*.txt&#34;&lt;/span&gt; 
&lt;span class=&#34;token comment&#34;&gt;#想要在当前目录及子目录中查找所有的 .txt 文件&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$find&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-name&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;[A-Z]*&#34;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#在当前目录及子目录中查找文件名以任一个大写字母开头的文件&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$find&lt;/span&gt; /etc &lt;span class=&#34;token parameter variable&#34;&gt;-name&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;host*&#34;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#想要在 /etc 目录中查找文件名以 host 开头的文件&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$find&lt;/span&gt; / &lt;span class=&#34;token parameter variable&#34;&gt;-name&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;*&#34;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#想要查找根目录下的文件&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h5 id=&#34;7sort-命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7sort-命令&#34;&gt;#&lt;/a&gt; 7.sort 命令&lt;/h5&gt;
&lt;p&gt;将以默认的方式将文本文件的第一列以 ASCII 码的次序排列，并将结果输出到标准输出。&lt;/p&gt;
&lt;h5 id=&#34;8-命令组-命令换行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8-命令组-命令换行&#34;&gt;#&lt;/a&gt; 8. 命令组 命令换行&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;多个命令在一行输入时，用 “;” 作为命令间分隔符。&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$ls&lt;/span&gt; –R &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; outfile &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;exit&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$ls&lt;/span&gt; –R &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; outfile
&lt;span class=&#34;token variable&#34;&gt;$exit&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可通过加 \ 的方式来进行换行拆分。&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$cat&lt;/span&gt; /home/mydir/mysubdir/mydata &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; /home/yourdir/yourdata&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;9和&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#9和&#34;&gt;#&lt;/a&gt; 9.&amp;amp;&amp;amp; 和 ||&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;命令 1 &amp;amp;&amp;amp; 命令 2&lt;/p&gt;
&lt;p&gt;只有命令 1 为真 (即成功被执行，返回 0），命令 2 才能够被执行&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ ls s*  &amp;amp;&amp;amp;  rm s*&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命令 1 || 命令 2&lt;br&gt;
 如果命令 1 执行失败，那么就执行命令 2。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$cd /dir1 || echo cannot change to /dir1&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;$test expression &amp;amp;&amp;amp; 命令1 || 命令2&lt;/code&gt;   若 expression 为真，则执行命令 1，否则执行命令 2&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;10算术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#10算术&#34;&gt;#&lt;/a&gt; 10. 算术&lt;/h5&gt;
&lt;h6 id=&#34;1shell的算数扩展&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1shell的算数扩展&#34;&gt;#&lt;/a&gt; （1）shell 的算数扩展&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;$((expression))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$echo&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;*&lt;span class=&#34;token variable&#34;&gt;$i&lt;/span&gt;+1
&lt;span class=&#34;token variable&#34;&gt;$echo&lt;/span&gt;  &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$((&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#算术扩展中包含的只有变量、运算符和常数  i 前没有 $ 符号&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#表达式内的变量若未定义，则当作其值为 0&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$((&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;))&lt;/span&gt;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#1&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;#算术扩展可以用来判断真假 (1 为真，0 为假)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h6 id=&#34;2expr命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2expr命令&#34;&gt;#&lt;/a&gt; （2）expr 命令&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;用于进行整数运算&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;表达式由操作数和运算符组成。操作数一般是整数，也可以是字符串&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;表达式的各部分 (操作数和运算符之间) 必须以空格分隔&lt;/strong&gt;！！！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;表达式中某些对 shell 有特殊意义的字符必须转义&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;+&lt;/code&gt;  加法&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-&lt;/code&gt;  减法&lt;/p&gt;
&lt;p&gt;&lt;code&gt;\*&lt;/code&gt;  乘法&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/&lt;/code&gt;  整除&lt;/p&gt;
&lt;p&gt;&lt;code&gt;%&lt;/code&gt;  求模 (余数)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;=&lt;/code&gt;  相等&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可以使用反引号改变计算次序&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$expr&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt; + &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt; / &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#7&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$expr&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;expr&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt; + &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt; / &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#4&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，expr 中括号是不可用的。请用 ``(反括号)&lt;/p&gt;
&lt;p&gt;&lt;s&gt; &lt;code&gt;expr 3 * (2 + 1) &lt;/code&gt; &lt;/s&gt;&lt;/p&gt;
&lt;p&gt;bash: syntax error near unexpected token `(&#39;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;expr 命令还可用于字符串测试。&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$s1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;“hello”
&lt;span class=&#34;token variable&#34;&gt;$expr&lt;/span&gt;  &lt;span class=&#34;token variable&#34;&gt;$s1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; “hello”
&lt;span class=&#34;token comment&#34;&gt;#1 真&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;11test命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11test命令&#34;&gt;#&lt;/a&gt; 11.test 命令&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;用于测试一种或几种条件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;1格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1格式&#34;&gt;#&lt;/a&gt; （1）格式&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;test&lt;/span&gt; expression&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;--code￼54--&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用方括号时，要注意&lt;strong&gt;在条件两边加上空格&lt;/strong&gt;。涉及到变量值（$variable）的比较时最好把变量取值用双引号括起来，以免 Shell 误解变量值。&lt;/p&gt;
&lt;h6 id=&#34;2输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2输出&#34;&gt;#&lt;/a&gt; （2）输出&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;测试结果反映在退出状态中，而不是直接显示输出&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$echo $?&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;条件为真：退出状态为 0&lt;/li&gt;
&lt;li&gt;条件为假：退出状态非 0&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;3操作符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3操作符&#34;&gt;#&lt;/a&gt; （3）操作符&lt;/h6&gt;
&lt;p&gt;①字符串操作符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;str1 = str2  字符串相等&lt;/li&gt;
&lt;li&gt;str1 != str2  字符串不相等&lt;/li&gt;
&lt;li&gt;str  字符串非空&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$str1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;abcd 
&lt;span class=&#34;token variable&#34;&gt;$str2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;abcd &#34;&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$test&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$str1&lt;/span&gt;&#34;&lt;/span&gt;
$&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$str1&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$?&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#测试 $str1 是否非空（非空则 0）&lt;/span&gt;
&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$test&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$str1&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$str2&lt;/span&gt;&#34;&lt;/span&gt; 
$&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$str1&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$str2&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$?&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#判断是否相等&lt;/span&gt;
&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;②整数操作符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;int1 -eq int2    数值相等&lt;/li&gt;
&lt;li&gt;int1 -ne int2    数值不等&lt;/li&gt;
&lt;li&gt;int1 -lt int2      int1&amp;lt;int2&lt;/li&gt;
&lt;li&gt;int1 -gt int2     int1&amp;gt;int2&lt;/li&gt;
&lt;li&gt;int1 -le int2     int1&amp;lt;=int2&lt;/li&gt;
&lt;li&gt;int1 -ge int2    int1&amp;gt;=int2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;!-- 当 string 和 int 比较时，看操作符。--&amp;gt; 例：&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$str1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1234&lt;/span&gt;  
&lt;span class=&#34;token variable&#34;&gt;$str2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;01234  
$&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$str1&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$str2&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; 
&lt;span class=&#34;token variable&#34;&gt;$echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$?&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#1（字符串比较） 不相等 &lt;/span&gt;
$&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$str1&lt;/span&gt;&#34;&lt;/span&gt; –eq &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$str2&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;  
&lt;span class=&#34;token variable&#34;&gt;$echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$?&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#0（数值比较） 相等&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;③文件操作符：测试文件状态&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-e file  文件 file 存在&lt;/li&gt;
&lt;li&gt;-d file  文件 file 是一个目录&lt;/li&gt;
&lt;li&gt;-f file  文件 file 是一个普通文件&lt;/li&gt;
&lt;li&gt;-s file  文件 file 大小不为 0&lt;/li&gt;
&lt;li&gt;-r file  可读（对文件所有者的权限）&lt;/li&gt;
&lt;li&gt;-w file  可写（对文件所有者的权限）&lt;/li&gt;
&lt;li&gt;-x file  可执行（对文件所有者的权限）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;④逻辑操作符：测试多个条件的与或组合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-a 逻辑与&lt;/li&gt;
&lt;li&gt;-o 逻辑或&lt;/li&gt;
&lt;li&gt;! 逻辑非&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;三shell脚本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三shell脚本&#34;&gt;#&lt;/a&gt; （三）shell 脚本&lt;/h4&gt;
&lt;h5 id=&#34;1编写方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1编写方法&#34;&gt;#&lt;/a&gt; 1. 编写方法&lt;/h5&gt;
&lt;h6 id=&#34;1创建文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1创建文件&#34;&gt;#&lt;/a&gt; （1）创建文件&lt;/h6&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;touch&lt;/span&gt; test&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;文件名&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h6 id=&#34;2编辑内容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2编辑内容&#34;&gt;#&lt;/a&gt; （2）编辑内容&lt;/h6&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;vi&lt;/span&gt; test（文件名） //进入vi编辑编辑器
&lt;span class=&#34;token comment&#34;&gt;#！/bin/bash// 告诉系统用什么解释器来执行该脚本，用哪一种 shell&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h6 id=&#34;3运行shell脚本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3运行shell脚本&#34;&gt;#&lt;/a&gt; （3）运行 shell 脚本&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;bash&lt;/code&gt;    或   &lt;code&gt;.&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户对该文件具有 x 和 r 权限&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;#bash  这种运行方式是启动了一个子 Shell（在后台执行）&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$cat&lt;/span&gt; set_dir
&lt;span class=&#34;token assign-left variable&#34;&gt;dir1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;/tmpf
&lt;span class=&#34;token assign-left variable&#34;&gt;dir2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;/usr
&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$dir1&lt;/span&gt;  &lt;span class=&#34;token variable&#34;&gt;$dir2&lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$bash&lt;/span&gt; set_dir
/tmp  /usr
&lt;span class=&#34;token variable&#34;&gt;$echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$dir1&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$dir2&lt;/span&gt;
空行
&lt;span class=&#34;token comment&#34;&gt;# .  &lt;/span&gt;
&lt;span class=&#34;token variable&#34;&gt;$cat&lt;/span&gt; set_dir
&lt;span class=&#34;token assign-left variable&#34;&gt;dir1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;/tmp
&lt;span class=&#34;token assign-left variable&#34;&gt;dir2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;/usr
&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$dir1&lt;/span&gt;    &lt;span class=&#34;token variable&#34;&gt;$dir2&lt;/span&gt;
$. set_dir
/tmp  /usr
&lt;span class=&#34;token variable&#34;&gt;$echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$dir1&lt;/span&gt;
/tmp  
&lt;span class=&#34;token variable&#34;&gt;$echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$dir2&lt;/span&gt;
/usr&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h5 id=&#34;2流程控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2流程控制&#34;&gt;#&lt;/a&gt; 2. 流程控制&lt;/h5&gt;
&lt;h6 id=&#34;1if&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1if&#34;&gt;#&lt;/a&gt; （1）IF&lt;/h6&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.
&lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt; 
	&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.
&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;
	&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.
&lt;span class=&#34;token keyword&#34;&gt;fi&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.
&lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt;
	&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.
elif&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.
&lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt;
	&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.
&lt;span class=&#34;token keyword&#34;&gt;fi&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h6 id=&#34;2case&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2case&#34;&gt;#&lt;/a&gt; （2）case&lt;/h6&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; 值 &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt;
匹配值1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.
	&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
匹配值2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.
	&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;esac&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h6 id=&#34;3for&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3for&#34;&gt;#&lt;/a&gt; （3）for&lt;/h6&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; 变量 &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; item1 item2 item3 &lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;. itemN
&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;
	&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.
	&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.
&lt;span class=&#34;token keyword&#34;&gt;done&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token for-or-select variable&#34;&gt;sta&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; Alabama Alaska Arizona California
&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;
	&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt;  The next state is &lt;span class=&#34;token variable&#34;&gt;$sta&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;done&lt;/span&gt; 

The next state is Alabama
The next state is Alaska
The next state is Arizona
The next state is California&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;也支持 java 类似的循环方式&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;
	&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.
	&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.
&lt;span class=&#34;token keyword&#34;&gt;done&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h6 id=&#34;4while&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4while&#34;&gt;#&lt;/a&gt; （4）while&lt;/h6&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; condition
&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;
	&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.
&lt;span class=&#34;token keyword&#34;&gt;done&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h6 id=&#34;5until&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5until&#34;&gt;#&lt;/a&gt; （5）until&lt;/h6&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;until&lt;/span&gt; condition
&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.
&lt;span class=&#34;token keyword&#34;&gt;done&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;如果条件不成立，则进入循环，执行循环体中语句直到条件成立，结束循环&lt;/p&gt;
&lt;h5 id=&#34;3执行时传递参数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3执行时传递参数&#34;&gt;#&lt;/a&gt; 3. 执行时传递参数&lt;/h5&gt;
&lt;p&gt;（1）位置变量参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$0 执行的文件名（包含文件路径） （指命令对应的可执行名）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$1 第一个参数  $2 第二个参数  $3 第三个参数 ...&lt;/p&gt;
&lt;p&gt;其中 1-9 是真正的参数名（变量名）,“$” 符只是用来标识变量的替换。 第九个以后的参数都不会被访问。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（2）特定变量参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$# 传递到脚本的参数个数&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mtext&gt;脚本运行的当前&lt;/mtext&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mtext&gt;的&lt;/mtext&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mi&gt;I&lt;/mi&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;   脚本运行的当前shell的PID
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;脚&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;本&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;运&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;行&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;的&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;当&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;前&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;的&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;D&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;$* 传递的参数作为一个字符串显示&lt;/li&gt;
&lt;li&gt;$@&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mtext&gt;和&lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;*和&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;和&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; @区别：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，则 &amp;quot;*&amp;quot; 等价于 “1 2 3”（传递了一个参数），而 “@” 等价于 “1” “2” “3”（传递了三个参数）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;传参方法：&lt;/p&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;$ &lt;span class=&#34;token function&#34;&gt;bash&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;D:%5CFiles%5CStudy%5CLinux%5CLinux%5C6.png&#34; alt=&#34;image-20230216154411270&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;4读入参数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4读入参数&#34;&gt;#&lt;/a&gt; 4. 读入参数&lt;/h5&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;read&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;变量名&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h5 id=&#34;5sleep&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5sleep&#34;&gt;#&lt;/a&gt; 5.sleep&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;将目前动作延迟一段时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;sleep 60s&lt;/code&gt;   停 60s&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sleep 5m&lt;/code&gt;  停 5min&lt;/p&gt;
&lt;p&gt;s 为秒，m 为 分钟，h 为小时，d 为日数&lt;/p&gt;
&lt;h3 id=&#34;五-例题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#五-例题&#34;&gt;#&lt;/a&gt; 五、例题&lt;/h3&gt;
&lt;h4 id=&#34;一shell编程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一shell编程&#34;&gt;#&lt;/a&gt; （一）shell 编程&lt;/h4&gt;
&lt;h5 id=&#34;1计算两个正整数的最大公约数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1计算两个正整数的最大公约数&#34;&gt;#&lt;/a&gt; 1. 计算两个正整数的最大公约数&lt;/h5&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token shebang important&#34;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;read&lt;/span&gt; num1
&lt;span class=&#34;token builtin class-name&#34;&gt;read&lt;/span&gt; num2
&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$num1&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-ne&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$num2&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt; 
&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$num1&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-gt&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$num2&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;num1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$((&lt;/span&gt;num1 &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; num2&lt;span class=&#34;token variable&#34;&gt;))&lt;/span&gt;&lt;/span&gt; 
&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;num2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$((&lt;/span&gt;num2 &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; num1&lt;span class=&#34;token variable&#34;&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;fi&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;done&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$num1&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h5 id=&#34;2给出输入的一系列整数输入0停止输入的最大数-第二最大数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2给出输入的一系列整数输入0停止输入的最大数-第二最大数&#34;&gt;#&lt;/a&gt; 2. 给出输入的一系列整数（输入 0 停止输入）的最大数、第二最大数&lt;/h5&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token shebang important&#34;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;read&lt;/span&gt; n
&lt;span class=&#34;token assign-left variable&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$n&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;sMax&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$n&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$n&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-ne&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;read&lt;/span&gt; n
&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$n&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-gt&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$max&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;sMax&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$max&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$n&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$n&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-gt&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$sMax&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;sMax&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$n&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;fi&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;done&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$max&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$sMax&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h5 id=&#34;3写一个shell脚本每隔10秒检查当前系统中有没有进程名字为firefox的进程如果有的话显示firefox-进程出现了并退出返回码设置为等待的秒数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3写一个shell脚本每隔10秒检查当前系统中有没有进程名字为firefox的进程如果有的话显示firefox-进程出现了并退出返回码设置为等待的秒数&#34;&gt;#&lt;/a&gt; 3. 写一个 shell 脚本，每隔 10 秒，检查当前系统中有没有进程名字为 “firefox” 的进程，如果有的话显示 “firefox 进程出现了！” 并退出，返回码设置为等待的秒数。&lt;/h5&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;
process &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;pgrep &lt;span class=&#34;token parameter variable&#34;&gt;-f&lt;/span&gt; firefox&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$&amp;#123;&lt;span class=&#34;token operator&#34;&gt;#&lt;/span&gt;process&amp;#125;&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-gt&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
	&lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt;
		&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; “firefox进程出现了！”
		&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; “等待时间为：&lt;span class=&#34;token variable&#34;&gt;$i&lt;/span&gt;”
		&lt;span class=&#34;token builtin class-name&#34;&gt;break&lt;/span&gt;
	&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;
		i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; i+10
		&lt;span class=&#34;token function&#34;&gt;sleep&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;fi&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;done&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h5 id=&#34;4写一个脚本持续监视用户stu是否登录如果登录了就每隔1分钟把你的用户名和qq号码发给他重复发送3次为止&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4写一个脚本持续监视用户stu是否登录如果登录了就每隔1分钟把你的用户名和qq号码发给他重复发送3次为止&#34;&gt;#&lt;/a&gt; 4. 写一个脚本，持续监视用户 stu 是否登录，如果登录了，就每隔 1 分钟把你的用户名和 QQ 号码发给他，重复发送 3 次为止。&lt;/h5&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;
	&lt;span class=&#34;token assign-left variable&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;who&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-w&lt;/span&gt; “stu”&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt;
	&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$&amp;#123;&lt;span class=&#34;token operator&#34;&gt;#&lt;/span&gt;user&amp;#125;&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-gt&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
	&lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt;
		&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; “please enter message and press ctrl + D”
		&lt;span class=&#34;token function&#34;&gt;write&lt;/span&gt; stu
		&lt;span class=&#34;token function&#34;&gt;sleep&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;60&lt;/span&gt;
		&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; “please enter message and press ctrl + D”
		&lt;span class=&#34;token function&#34;&gt;write&lt;/span&gt; stu
		&lt;span class=&#34;token function&#34;&gt;sleep&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;60&lt;/span&gt;
		&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; “please enter message and press ctrl + D”
		&lt;span class=&#34;token function&#34;&gt;write&lt;/span&gt; stu
		&lt;span class=&#34;token function&#34;&gt;sleep&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;60&lt;/span&gt;
		&lt;span class=&#34;token builtin class-name&#34;&gt;break&lt;/span&gt;
	&lt;span class=&#34;token keyword&#34;&gt;fi&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;done&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h5 id=&#34;5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5&#34;&gt;#&lt;/a&gt; 5.&lt;/h5&gt;
&lt;p&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;until&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;who&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; “&lt;span class=&#34;token variable&#34;&gt;$1&lt;/span&gt;” &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; /dev/null
&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;
	&lt;span class=&#34;token function&#34;&gt;sleep&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;60&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;done&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; “*****&lt;span class=&#34;token variable&#34;&gt;$1&lt;/span&gt; has just logged in****”
&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
</content>
        <category term="Linux" />
        <updated>2022-12-18T05:42:41.000Z</updated>
    </entry>
</feed>
