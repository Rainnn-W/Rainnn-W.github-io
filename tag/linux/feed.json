{
    "version": "https://jsonfeed.org/version/1",
    "title": "Rainnnの • All posts by \"linux\" tag",
    "description": "blingbling~",
    "home_page_url": "https://rainnn-w.github.io",
    "items": [
        {
            "id": "https://rainnn-w.github.io/posts/15691.html",
            "url": "https://rainnn-w.github.io/posts/15691.html",
            "title": "Linux",
            "date_published": "2022-12-18T05:42:41.000Z",
            "content_html": "<h3 id=\"一-linux基础\"><a class=\"anchor\" href=\"#一-linux基础\">#</a> 一、Linux 基础</h3>\n<h5 id=\"1简介\"><a class=\"anchor\" href=\"#1简介\">#</a> 1. 简介</h5>\n<ul>\n<li>\n<p>Linux 是多用户、多任务、抢占式操作系统，原著者 Linus，是开源操作系统</p>\n</li>\n<li>\n<p>基本组成：Kernel 内核、Shell 命令行、System Applications</p>\n<blockquote>\n<p>用户输入命令 -----shell 翻译 -----kernel</p>\n</blockquote>\n<ul>\n<li>Linux Kernel  Linux 操作系统的核心程序\n<ul>\n<li>管理程序的运行，为程序分配资源，并且处理程序之间的通信。</li>\n<li>管理对文件系统的读写，把对文件系统的操作映射成对磁盘或其它块设备的操作。</li>\n<li>管理存储器，为程序分配内存，并且管理虚拟内存。</li>\n<li>管理输入、输出，将设备映射成设备文件。</li>\n<li>管理网络。</li>\n</ul>\n</li>\n<li>Linux Shell\n<ul>\n<li>是一个命令解释器，是内核和用户之间的接口。</li>\n<li>是一个编程语言。(Shell script)</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>系统的启动过程:</p>\n<p>init -&gt; login -&gt; passwd -&gt; shell</p>\n</blockquote>\n<ul>\n<li>Linux 应用程序\n<ul>\n<li>标准的 Linux 系统都具有一整套称为应用程序的程序集，包括文本编辑器、Xwindow、办公套件、Internet 工具和数据库等。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>shell 提供内核的保护层</p>\n<ul>\n<li>对用户屏蔽内核的复杂性</li>\n<li>保护内核以免用户操作造成伤害</li>\n</ul>\n</li>\n<li>\n<p>系统各层次关系：</p>\n<ul>\n<li>硬件是实体工作者</li>\n<li>内核能够控制硬件工作</li>\n<li>shell 是用户与内核沟通的桥梁，是中间站</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281107205.png\" alt=\"2\"># !</p>\n</li>\n</ul>\n<h5 id=\"2基本命令\"><a class=\"anchor\" href=\"#2基本命令\">#</a> 2. 基本命令</h5>\n<p><strong>Linux 命令是大小写敏感的，不同于 Windows</strong></p>\n<ul>\n<li>\n<p>登录 退出</p>\n</li>\n<li>\n<p>exit 退出命令窗口</p>\n</li>\n<li>\n<p>&lt;Ctrl-d&gt; 中断当前的通信或从文件中退出。</p>\n</li>\n<li>\n<p>&lt;Ctrl-c&gt; 中断当前的命令并返回 Shell</p>\n</li>\n<li>\n<p>date 查看当前日期和时间</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Web Feb <span class=\"token number\">15</span> <span class=\"token number\">18</span>:45:46 PST <span class=\"token number\">2023</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p>CST：China Standard Time 中国标准时间</p>\n<p>PST ：Pitcairn Standard Time 太平洋标准时间</p>\n</li>\n<li>\n<p>date -s 设置日期 / 时间</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">date</span> <span class=\"token parameter variable\">-s</span> <span class=\"token number\">20041129</span>\n<span class=\"token function\">date</span> <span class=\"token parameter variable\">-s</span> <span class=\"token number\">12</span>:23:23\n<span class=\"token function\">date</span> <span class=\"token parameter variable\">-s</span> <span class=\"token string\">\"2004-11-29 12:23:23\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>cal 查看日历（默认当前年份 月份的月历）</p>\n<ul>\n<li>cal 年份 查看当年 12 个月日历</li>\n<li>cal 月份 年份 查看该年该月日历</li>\n</ul>\n</li>\n<li>\n<p>cal 仅显示当前月份日历</p>\n</li>\n</ul>\n<blockquote>\n<p>若只有一个数字，则被认为是年，并显示相应年的 12 个月的日历。</p>\n</blockquote>\n<ul>\n<li>\n<p>clear 清屏</p>\n</li>\n<li>\n<p>echo 在标准输出上显示字符串   <code>\\</code>  换行符</p>\n</li>\n<li>\n<p>who 查看当前用户及登陆时间</p>\n</li>\n<li>\n<p>whoami 查看当前用户</p>\n</li>\n<li>\n<p>ping 检测主机。使用 ICMP 传输协议，发出要求回应的信息</p>\n</li>\n<li>\n<p>mail</p>\n<ul>\n<li><code>mail &lt;username&gt; </code>  发送 E-mail</li>\n<li><code>mail  </code>  接收 E-mail</li>\n</ul>\n<blockquote>\n<p>一旦邮件被打开，其将被放 $HOME/mbox 目录中，若想再看这些信息则用：</p>\n<p><code>mail -f</code></p>\n</blockquote>\n</li>\n<li>\n<p>wall   将在系统中的所有在线用户的终端上显示信息，主要用于广播系统管理信息。</p>\n</li>\n<li>\n<p>write 发送信息  <code>write &lt;username&gt;</code>    用 &lt;ctrl-d&gt; 结束对话</p>\n</li>\n<li>\n<p>mesg 信息接收与否的开关命令</p>\n<p><code>mesg n</code>  拒绝消息   <code>mesg y</code>  允许接收消息</p>\n</li>\n<li>\n<p>man + 命令 查看具体命令的说明 （press q to quit）</p>\n</li>\n</ul>\n<blockquote>\n<p>超级用户 root，Shell 默认提示符：#</p>\n</blockquote>\n<blockquote>\n<p>普通用户，Shell 默认提示符：$</p>\n</blockquote>\n<p><pre class=\"line-numbers language-none\"><code class=\"language-none\">#useradd rainnn  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p>添加用户 rainnn</p>\n<p><pre class=\"line-numbers language-none\"><code class=\"language-none\">#deluser rainnn <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p>删除用户 rainnn</p>\n<h5 id=\"3知识点\"><a class=\"anchor\" href=\"#3知识点\">#</a> 3. 知识点</h5>\n<p>(1)  <code>&gt;</code>  表示覆盖原文件内容（文件的日期也会自动更新）</p>\n<p><code>&gt;&gt;   </code>  表示追加内容（会另起一行，文件的日期也会自动更新）</p>\n<p>(2) tty 终端机代号</p>\n<p>(3) 常见目录说明</p>\n<ul>\n<li>\n<p>/bin 存放二进制可执行文件 (ls,cat,mkdir 等)，常用命令一般都在这里。</p>\n</li>\n<li>\n<p>/etc 存放系统管理和配置文件</p>\n<p>/etc/shadow 存放用户口令的加密信息</p>\n</li>\n<li>\n<p>/home 存放所有用户文件的根目录，是用户主目录的基点。</p>\n<p>比如用户 user 的主目录就是 /home/user，可以用～user 表示。</p>\n</li>\n<li>\n<p>/usr 用于存放系统应用程序，比较重要的目录 /usr/local 本地系统管理员 软件安装目录（安装系统级的应用）。这是最庞大的目录，要用到的应用 程序和文件几乎都在这个目录。</p>\n<p>/usr/x11r6 存放 x window 的目录</p>\n<p>/usr/bin 众多的应用程序</p>\n<p>/usr/sbin 超级用户的一些管理程序</p>\n<p>/usr/doc linux 文档</p>\n<p>/usr/include linux 下开发和编译应用程序所需要的头文件</p>\n<p>/usr/lib 常用的动态链接库和软件包的配置文件</p>\n<p>/usr/man 帮助文档</p>\n<p>/usr/src 源代码，linux 内核的源代码就放在 /usr/src/linux</p>\n<p>/usr/local/bin 本地增加的命令</p>\n<p>/usr/local/lib 本地增加的库</p>\n</li>\n<li>\n<p>/dev 存放设备文件</p>\n</li>\n<li>\n<p>/mnt 系统管理员安装临时文件的安装点。</p>\n<p>系统提供这个目录是让用户临时挂载其他的文件系统。</p>\n</li>\n<li>\n<p>/tmp 存放各种临时文件，是公用的临时文件存储点。</p>\n</li>\n<li>\n<p>/var 存放运行时需要改变数据的文件，也是某些大文件的溢出区， 比方说各种服务的日志文件（系统启动日志等。）等。</p>\n</li>\n<li>\n<p>/opt 额外安装的可选应用程序包所放置的位置。</p>\n<p>一般情况下，我们可以把 tomcat 等都安装到这里。</p>\n</li>\n<li>\n<p>/boot 存放用于系统引导时使用的各种文件</p>\n</li>\n<li>\n<p>/proc 虚拟文件系统目录，是系统内存的映射。</p>\n<p>可直接访问这个目录来获取系统信息。</p>\n</li>\n<li>\n<p>/root 超级用户的目录</p>\n</li>\n</ul>\n<h3 id=\"二-文件系统\"><a class=\"anchor\" href=\"#二-文件系统\">#</a> 二、文件系统</h3>\n<blockquote>\n<p>文件系统：文件系统实现数据存储的物理（介质）独立性</p>\n<p>文件：是 Linux 用来存储信息的基本结构，它是被命名（称为文件名）的、存储在某种媒介（如磁盘、光盘和磁带等）上的一组信息的集合。</p>\n</blockquote>\n<h5 id=\"1文件名\"><a class=\"anchor\" href=\"#1文件名\">#</a> 1. 文件名</h5>\n<p>（1）文件名通常由字母、数字、“.”（点号）、“_”（下划线）或 “-”（减号）组成，文件名中不能含有 “/” 符号。</p>\n<p>（2）隐藏文件一般是以 “<strong>.</strong>” 符号开头</p>\n<p>（3）在文件名中的空格或制表符，在引用文件时必须用引号将其括起来；</p>\n<p>（4）大小写敏感</p>\n<p>（5）避免使用具有特别意义的字符： ?,*,@, #,$,&amp;,(,),,|,;,‘,“,`,&lt;,&gt;,[,] 等</p>\n<p>（6）避免使用 ‘+’和‘-‘符号作为文件名的第一个字符</p>\n<h5 id=\"2文件类型\"><a class=\"anchor\" href=\"#2文件类型\">#</a> 2. 文件类型</h5>\n<h6 id=\"1普通文件regular-file\"><a class=\"anchor\" href=\"#1普通文件regular-file\">#</a> （1）普通文件（regular file）</h6>\n<ul>\n<li>\n<p>二进制文件</p>\n</li>\n<li>\n<p>文本文件</p>\n</li>\n</ul>\n<h6 id=\"2目录文件directory-包含文件的容器用于存放目录中文件列表信息\"><a class=\"anchor\" href=\"#2目录文件directory-包含文件的容器用于存放目录中文件列表信息\">#</a> （2）目录文件（directory） 包含文件的容器，用于存放目录中文件列表信息</h6>\n<p>存储一组相关文件的位置、大小等与文件有关的信息，但它不包含具体的文件内容，因而和常规文件相比占用的磁盘空间很小。</p>\n<p>每一项 (entry) 主要表示的是一个文件名 (或子目录名) 以及文件的索引节点号 (i-node number ) 。</p>\n<p>索引节点号：指向该文件内容所在的数据块的位置，记录了该文件的属性</p>\n<p>通过 i-node 表与文件之间建立对应关系，目录文件是存放文件名唯一的地方，但文件名不放在 i-node 表中。</p>\n<h6 id=\"3设备文件device-file-在linux中设备被当作文件来处理\"><a class=\"anchor\" href=\"#3设备文件device-file-在linux中设备被当作文件来处理\">#</a> （3）设备文件（device file） 在 linux 中，设备被当作文件来处理</h6>\n<blockquote>\n<p>Everything is a file！</p>\n</blockquote>\n<h5 id=\"3目录组织\"><a class=\"anchor\" href=\"#3目录组织\">#</a> 3. 目录组织</h5>\n<ul>\n<li>访问一个文件或子目录时，首先访问他所在的目录，找到该文件的 i-node 值，然后再查找 i-node 表找出相应的 i-node 项，从而找到了相应的数据。</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281107402.png\" alt></p>\n<h5 id=\"u4操作命令u\"><a class=\"anchor\" href=\"#u4操作命令u\">#</a> &lt;u&gt;4.※操作命令 &lt;/u&gt;</h5>\n<ul>\n<li>\n<p>touch 创建文件</p>\n</li>\n<li>\n<p>cp 复制   <code>cp [-options] 源文件或目录  目的文件或目录</code></p>\n<ul>\n<li>-i：在覆盖文件之前提示用户，由用户确认.</li>\n<li>-R 或 - r：递归复制目录，即复制相应的目录及其所有子目录</li>\n</ul>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$cp</span> file1 file2\n<span class=\"token comment\">#在当前目录下拷贝文件 file1 的副本 file2，但若 file2 已存在，将覆盖 file2 的原有内容</span>\n<span class=\"token variable\">$cp</span> file1 directory1\n<span class=\"token comment\">#将文件 file1 拷贝到当前目录下的 directory1 目录下 (相对路径)</span>\n<span class=\"token variable\">$cp</span> preface doc props \n<span class=\"token comment\">#将文件 preface 和 doc 拷贝到 props 目录中</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#要将文件 myfile1 拷贝到 myfile1.bak </span>\n$ <span class=\"token function\">cp</span> myfile1 myfile1.bak\n<span class=\"token comment\">#要将文件 get.prd 从 /usr/local/sybin 目录拷贝到到 /usr/local/bin 目录</span>\n<span class=\"token variable\">$cp</span> /usr/local/sybin/get.prd   /usr/local/bin\n<span class=\"token comment\">#要将 /logs 目录下的所有文件及子目录拷贝到 /hold/logs 目录中</span>\n$ <span class=\"token function\">cp</span>  <span class=\"token parameter variable\">-r</span> /logs  /hold/logs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>\n<p>mv 移动或改名</p>\n<p><code>mv 原文件名 新文件名</code>  （改名）    <code>mv 文件名 路径名</code>  （移动）  <code>mv 文件名 路径/新文件名</code>  （移动并改名）</p>\n<ul>\n<li>-f 强制执行。直接覆盖已存在的目的文件，不显示覆盖前的询问讯息。</li>\n<li>-i 交互执行。当已存在同名的目标文件名时，在覆盖之前给出提示，由用户确认后才予以覆盖。</li>\n</ul>\n</li>\n<li>\n<p>rm 删除文件</p>\n<p><code>rm file1 file2 </code> （删除多个文件用空格隔开文件名）  <code>rm directory</code>  （删除目录）</p>\n<ul>\n<li>-f 强制执行</li>\n<li>-i 交互执行，在执行删除前提示确认</li>\n<li>-R 或 - r 递归的删除目录</li>\n</ul>\n</li>\n<li>\n<p>mkdir 创建目录（对其父目录必须有写权限）</p>\n<ul>\n<li>\n<p>-p 递归创建，即使路径上的文件夹本来不存在</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$mkdir</span> <span class=\"token parameter variable\">-p</span> test1/test2/test3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n</li>\n<li>\n<p>-m 指定权限</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$mkdir</span> <span class=\"token parameter variable\">-m</span> <span class=\"token number\">711</span> testqq\n<span class=\"token comment\">#drwx--x--x 2 test test 4096 Feb 6 20:48 testqq/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n</li>\n<li>\n<p>rmdir 删除目录 （对该目录的父目录必须有写权限，且该目录为空目录）</p>\n</li>\n<li>\n<p>whereis 显示文件目录</p>\n<blockquote>\n<p>whereis 找不到某个文件的部分原因可能是这个文件没有存在于任何 whereis 命令搜索的子目录中。whereis 命令检索的子目录是固定编写 在它的程序中的。</p>\n</blockquote>\n</li>\n<li>\n<p>locate 与 find -name 相同</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#查找 passwd 文件</span>\n<span class=\"token variable\">$locate</span> <span class=\"token function\">passwd</span>\n<span class=\"token comment\">#搜索 etc 目录下所有以 sh 开头的文件</span>\n<span class=\"token variable\">$locate</span> /etc/sh\n<span class=\"token comment\">#忽略大小写搜索当前用户目录下所有以 r 开头的文件 ：</span>\n<span class=\"token variable\">$locate</span> <span class=\"token parameter variable\">-i</span> ~/r<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>mount 挂接文件系统</p>\n<blockquote>\n<p>Linux 通过挂接（mount）一个文件系统将该新文件系统加入它的文件系统树中。所有的文件系统，不管是什么类型，都挂接在文件系统树的一个目录上并且该文件系统之上的文件将掩盖掉这个挂接目录中原来存在的内容。这个目录称为挂接目录或挂接点。当文件系统被卸掉之后，挂接目录中原来的文件才再次可见。</p>\n</blockquote>\n</li>\n<li>\n<p>ls</p>\n<ul>\n<li>\n<p>ls -a 显示全部文件（包括文件名以 “.” 开头的隐藏文件）</p>\n</li>\n<li>\n<p>ls 显示文件</p>\n</li>\n<li>\n<p>ls -l 显示长目录（文件的详细信息：文件的类型、操作权限、链接数、属主名、属组名、字节数、最近修改时间、文件名）</p>\n<blockquote>\n<p>每行的第一个字符表明文件的类型：</p>\n<ul>\n<li>\n<p>d 目录</p>\n</li>\n<li>\n<p>f 普通文件</p>\n</li>\n<li>\n<p>l 符号链接文件</p>\n</li>\n<li>\n<p>b 块设备文件</p>\n</li>\n<li>\n<p>c 字符设备文件</p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li>\n<p>ls -d 显示目录名而不显示其中的文件。</p>\n</li>\n<li>\n<p>ls -R 递归列出子目录（显示文件 + 目录下文件）</p>\n</li>\n<li>\n<p>ls -r 以逆序显示文件名列表</p>\n</li>\n<li>\n<p>ls -x 显示时以字母顺序</p>\n<p>(注：正常的显示顺序为按 ASCII 排序方式。)</p>\n</li>\n<li>\n<p>ls -color 用不同颜色区分文件类型</p>\n</li>\n</ul>\n<blockquote>\n<p>颜色含义为:</p>\n<p>绿色 ---&gt; 可执行文件</p>\n<p>蓝色 ---&gt; 目录</p>\n<p>红色 ---&gt; 压缩文件</p>\n<p>浅蓝色 -&gt; 连结文件</p>\n<p>灰色 ---&gt; 一般文件 (没有定义的文件)</p>\n<p>（颜色自定义可修改 <code>/etc/DIR_COLORS</code> ）</p>\n</blockquote>\n</li>\n<li>\n<p>cd 切换路径</p>\n</li>\n<li>\n<p>cat 将文件的文本内容一次全部显示在屏幕上</p>\n<ul>\n<li><code>cat -n filename</code>  打印行号</li>\n<li><code>cat -b filename</code>  打印行号，空行不编号</li>\n<li><code>cat filename </code> 打印文本内容（不包括行号）</li>\n<li>文件的合并、建立、覆盖和添加内容等\n<ul>\n<li><code>cat file1 file2 &gt;file</code>  将 file1 和 file2 合并到 file</li>\n<li><code>cat file1 &gt;&gt;file2</code>  将 file1 追加到 file2 的末尾</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>more  分屏显示文件内容。</p>\n<p>你可以随心所欲地在文本上上下移动。</p>\n<p>当 more 命令调用一个文件时，显示第一屏的文本。常用按键：</p>\n<ul>\n<li>\n<p>f 键或 &lt;Space&gt;: 进入下一页。</p>\n</li>\n<li>\n<p>b 键：前一页</p>\n</li>\n<li>\n<p>&lt;Enter&gt;: 向下移动一行</p>\n</li>\n<li>\n<p>q 键或 &lt;Ctrl+C&gt;: 退出。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>less</p>\n<p>less 工具也是对文件或其它输出进行分页显示的工具，应该说是 linux 正 统查看文件内容的工具，功能极其强大。less 的用法比起 more 更加的有弹 性。 在 more 的时候，我们并没有办法向前面翻， 只能往后面看，但若使 用了 less 时，就可以使用 [pageup] [pagedown] 等按 键的功能来往前 往后翻看文件，更容易用来查看一个文件的内容！除此之外，在 less 里头 可以拥有更多的搜索功能，不止可以向下搜，也可以向上搜。</p>\n</li>\n<li>\n<p>wc  统计文件中的字符数、单词数和行数   按以下顺序输出：</p>\n<p>行数  单词数  字符数  文件名</p>\n<p><code>wc [ -options] [ filename ]</code></p>\n<p>-c：显示字符数。</p>\n<p>-l：显示行数。</p>\n<p>-w：显示单词数。（单词是指由空格或 tabs 分开的最大字串。）</p>\n<p>（wc 等价于 wc -lwc）</p>\n</li>\n<li>\n<p>alias  别名  <code>alias 简称='代码'</code></p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$alias</span> <span class=\"token assign-left variable\">ls</span><span class=\"token operator\">=</span><span class=\"token string\">'ls --color=auto'</span> <span class=\"token comment\">#输入 ls 的时候就等同输入 ls --color=auto</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$unalias</span> <span class=\"token function\">cp</span> <span class=\"token comment\">#取消别名</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n</li>\n<li>\n<p>id  显示用户 id 以及群组 id</p>\n</li>\n<li>\n<p>df  (disk free) 显示目前在 Linux 系统 上的文件系统磁盘使用情况统计。</p>\n</li>\n</ul>\n<h5 id=\"5基本概念\"><a class=\"anchor\" href=\"#5基本概念\">#</a> 5. 基本概念</h5>\n<h6 id=\"1目录\"><a class=\"anchor\" href=\"#1目录\">#</a> （1）目录</h6>\n<ul>\n<li>\n<p>pwd 当前目录即当前工作目录  (print working directory)</p>\n</li>\n<li>\n<p>用户主目录：/home/rainnn   （~）   root 用户：/root</p>\n<blockquote>\n<p>cd 回到主目录</p>\n</blockquote>\n</li>\n<li>\n<p>绝对路径：指出从根目录到此文件的路径，一般来说由 / 符号开始。</p>\n</li>\n<li>\n<p>相对路径：指明从当前目录到此文件的路径</p>\n<blockquote>\n<p><code>.</code>  表示当前目录  <code>..</code>  表示当前目录的父目录</p>\n</blockquote>\n</li>\n<li>\n<p>$HOME 主目录</p>\n<p><code>echo $HOME</code>  查看自己的主目录</p>\n</li>\n</ul>\n<h6 id=\"2链接\"><a class=\"anchor\" href=\"#2链接\">#</a> （2）链接</h6>\n<p>** 链接文件:** 目录中每一对文件名称和索引节点号称为一个链接 (考)</p>\n<ul>\n<li>\n<p>符号链接（软链接） <strong>可跨文件系统 可以链接目录</strong></p>\n<ul>\n<li>以路径的形式存在，类似于 windows 操作系统中的快捷方式</li>\n<li>可以对一个不存在的文件名进行链接</li>\n<li>如果删除符号链接文件的源文件，符号链接文件将无法找到原有资料。</li>\n</ul>\n</li>\n<li>\n<p>硬链接 <strong>不可跨文件系统</strong></p>\n<ul>\n<li>以文件副本的形式存在，但不占用实际空间（ln 用于对一个已经存在的文件再创建一个新的链接，而不复制文件的内容。)</li>\n<li>原文件名和链接文件名都指向相同的物理位址。 （i-node number）</li>\n<li>不允许普通用户给目录创建硬链接</li>\n<li>如果删除硬链接文件的源文件，硬链接文件仍然存在，而且保留了原有的内容</li>\n<li>ln 后的链接文件名与物理文件具有相同的权限</li>\n</ul>\n</li>\n<li>\n<p>ln 命令</p>\n<ul>\n<li><code>ln -s abc linkabc </code> （为 abc 文件创建<strong>软链接</strong> linkabc，若 abc 丢失，linkabc 会失效）</li>\n<li><code>ln abc linkabc</code> （为 abc 创建<strong>硬链接</strong> linkabc，abc 与 linkabc 各项属性相同）</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"6权限控制\"><a class=\"anchor\" href=\"#6权限控制\">#</a> 6. 权限控制</h5>\n<blockquote>\n<p>多用户、多任务（此操作系统决定了常常会有多人同时使用这部主机工作），系统必须进行权限控制</p>\n<p>确定用户（或者说代表用户执行的程序）对某资源有或无某种操作的权力。</p>\n</blockquote>\n<h6 id=\"1用户类别\"><a class=\"anchor\" href=\"#1用户类别\">#</a> (1) 用户类别</h6>\n<ul>\n<li>文件所有者 u</li>\n</ul>\n<blockquote>\n<p>能够设定同组用户和其他用户对该文件的访问权限。一般来说是文件的创建者。</p>\n<p>保证每个人的隐私权</p>\n</blockquote>\n<ul>\n<li>同组用户 g</li>\n</ul>\n<blockquote>\n<p>具有相同性质的所有用户，被系统管理员分在同一组。文件所有者或系统管理员可将文件的权限赋予组内的其它用户。</p>\n<p>Linux 中每个用户至少属于一个用户组，以保证对一个用户组中的所有用户进行集中管理</p>\n</blockquote>\n<ul>\n<li>其他用户 o</li>\n</ul>\n<blockquote>\n<p>文件所有者或系统管理员还可以将文件的访问权赋予系统中所有其它的用户。这样，系统中每一位用户可能都能访问你的某一文件或目录。</p>\n</blockquote>\n<ul>\n<li>所有用户 a</li>\n</ul>\n<h6 id=\"2三种权限\"><a class=\"anchor\" href=\"#2三种权限\">#</a> （2）三种权限</h6>\n<ul>\n<li>\n<p>读 r: 4</p>\n</li>\n<li>\n<p>写 w: 2</p>\n</li>\n<li>\n<p>执行 x: 1</p>\n</li>\n<li>\n<p>-: 0</p>\n</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281108008.png\" alt></p>\n<h6 id=\"3权限判断\"><a class=\"anchor\" href=\"#3权限判断\">#</a> （3）权限判断</h6>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281108287.jpg\" alt></p>\n<blockquote>\n<p>ls -lR 查看目录内一文件的权限 (ls -lR 相当于 ls -l + ls -R  长列表显示文件 + 目录下文件)</p>\n</blockquote>\n<ul>\n<li>移动：文件所在目录具有 w 权限（移动文件其实不改变文件，是改变的目录）</li>\n<li>在目录下增删文件、子目录 (touch rm mkdir rmdir)：要有目录的 w 权限</li>\n<li>用 ls 列目录：要有目录的 r 权限</li>\n<li>进入目录或将该目录作路径分量时 (cd)：要有该文件路径上所有目录的 x 权限</li>\n<li>修改：文件有 w 权限，文件路径上所有目录有 x 权限</li>\n<li>拷贝：文件有 r 权限，文件路径上所有目录有 x 权限</li>\n</ul>\n<p>&lt;!-- 若文件在 /jobs/work 下，则需 jobs 目录和 work 目录均具有执行权限 --&gt;</p>\n<h6 id=\"4权限操作命令\"><a class=\"anchor\" href=\"#4权限操作命令\">#</a> （4）权限操作命令</h6>\n<ul>\n<li>\n<p><strong>chmod</strong></p>\n<ul>\n<li>\n<p><code>chmod a+r 文件名</code> （给所有用户加 r 权限）</p>\n</li>\n<li>\n<p><code>chmod u-r 文件名</code> （给文件所有者减 r 权限）</p>\n</li>\n<li>\n<p><code>chmod -R a+r  *</code> （将目录下所有文件与子目录皆设为任何人可读）</p>\n<p>&lt;!-- -R 意为递归 --&gt;</p>\n</li>\n<li>\n<p><code>chmod 771 file</code> （与 <code>chmod ug=rwx,o=x file</code>  效果相同）</p>\n</li>\n</ul>\n</li>\n<li>\n<p>chown 设置文件所有者和文件关联组</p>\n<ul>\n<li><code>chown [-options] user[：group] filelist</code></li>\n</ul>\n</li>\n<li>\n<p>user 表示将要改变的所有者用户名或用户 id</p>\n</li>\n<li>\n<p>group 表示将要改变的所属用户组名或组 id</p>\n<ul>\n<li><code>chown test test.txt</code>   把 test.txt 的所有者改为用户 test</li>\n</ul>\n</li>\n<li>\n<p>-R：递归改变目录及其内容的所属用户或用户组</p>\n</li>\n<li>\n<p><code>chown -R root:test testfloder1</code>  把 testfolder1 目录及目录下所有文件的所有者改为 root，所属用户组名改为 test</p>\n</li>\n<li>\n<p>su + 用户名 切换用户</p>\n</li>\n<li>\n<p>sudo 以系统管理员的身份执行指令</p>\n</li>\n</ul>\n<h5 id=\"7进程管理\"><a class=\"anchor\" href=\"#7进程管理\">#</a> 7. 进程管理</h5>\n<h6 id=\"1概念\"><a class=\"anchor\" href=\"#1概念\">#</a> （1）概念</h6>\n<ul>\n<li>程序是静态的，是保存在磁盘上的可执行代码和数据的集合</li>\n<li>进程（进程是程序执行的过程，是执行的程序）是动态的，是 Linux 系统的基本调度单位</li>\n<li>操作系统通过进程来控制对 CPU 和其他系统资源的访问，并且使用进程来决定在 CPU 上运行哪个程序、运行多久。</li>\n<li>Linux 重要特点：可以同时启动多个进程</li>\n</ul>\n<h6 id=\"2init进程\"><a class=\"anchor\" href=\"#2init进程\">#</a> （2）Init 进程</h6>\n<ul>\n<li>\n<p>内核启动后的第一个进程，其 PID=1</p>\n<p>（PID：进程号 一个 PID 唯一的标识一个进程）</p>\n</li>\n<li>\n<p><strong>init 进程永远不会被终止</strong>，扮演终结父进程的角色，所有进程追溯其祖先最终都会落到 init 进程身上。如果某个进程在它衍生出来的全部子进程结束之前被终止，此时那些失去了父进程的子进程就都会以 init 作为它们的父进程。</p>\n</li>\n</ul>\n<h6 id=\"3操作命令\"><a class=\"anchor\" href=\"#3操作命令\">#</a> （3）操作命令</h6>\n<ul>\n<li>\n<p>ps 显示当前进程的状态</p>\n<p>可以用它来确定有哪些进程正在运行以及运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等。<br>\n它显示的进程列表是一个静态列表，这个列表是在我们启动这个命令时正在运行的进程的快照。</p>\n<table>\n<thead>\n<tr>\n<th><strong>USER</strong></th>\n<th><strong>PID</strong></th>\n<th><strong>%CPU</strong></th>\n<th><strong>%MEM</strong></th>\n<th><strong>VSZ</strong></th>\n<th><strong>RSS</strong></th>\n<th><strong>TTY</strong></th>\n<th><strong>STAT</strong></th>\n<th><strong>START</strong></th>\n<th><strong>TIME</strong></th>\n<th><strong>COMMAND</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>进程所有者</td>\n<td>进程号</td>\n<td>对 cpu 的占用率</td>\n<td>对内存的占用率</td>\n<td>占用的虚拟内存大小</td>\n<td>占用的内存大小</td>\n<td>进程相关的终端设备</td>\n<td>进程状态 R：运行 S：中断 T：停止 D：不可中断 Z：僵死</td>\n<td>进程开始时间</td>\n<td>进程使用的总 cpu 时间</td>\n<td>被执行的命令行</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>top 动态地持续监听进程地运行状态</p>\n<ul>\n<li>d 设置刷新进程的时间间隔，你会被提示输入一个数（秒）</li>\n<li>q 退出 top 命令。</li>\n<li>k 杀死某进程。你会被提示输入进程 ID 以及要发 送给它的信号。</li>\n<li>h 显示帮助屏幕</li>\n<li>n 显示的进程数量。你会被提示输入数量。</li>\n<li>u 选择用户。</li>\n<li>M 按内存用量排序。</li>\n<li>P 按 CPU 用量排序。</li>\n</ul>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">top</span> <span class=\"token parameter variable\">-n</span> <span class=\"token number\">2</span>\n<span class=\"token comment\">#表示更新两次之后终止更新显示</span>\n<span class=\"token function\">top</span> <span class=\"token parameter variable\">-d</span> <span class=\"token number\">3</span>\n<span class=\"token comment\">#更新周期为 3 秒</span>\n<span class=\"token function\">top</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">139</span>\n<span class=\"token comment\">#显示进程号为 139 的进程信息，CPU、内存占用率等</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>kill 删除执行中的程序或工作  终止和挂起后台进程</p>\n</li>\n<li>\n<p>pgrep  查找进程的信息，默认只显示 PID (通常会和 kill 命令来连用，在指定条件下 kill 问题进程)</p>\n<p><code>kill PID</code>  (PID 可通过 ps 查看）或者 <code>kill %jobID</code>   （jobID 通过 jobs 查看）</p>\n<ul>\n<li>-f 匹配进程名</li>\n</ul>\n</li>\n<li>\n<p>jobs 用于显示和控制后台正在执行的和被挂起的任务序列。</p>\n</li>\n<li>\n<p><code>fg %jobID</code>  用于将后台运行的或 挂起 的任务（或作业）切换到前台运行</p>\n</li>\n<li>\n<p><code>bg %jobID</code>  使后台的任务继续运行</p>\n</li>\n<li>\n<p>nohup   (no hang up)（不挂起），用于在系统后台不挂断地运行命令，退出终端不会影响程序的运行   <code>nohup&#123;command|script&#125;</code>  {a|b}:a b 中必选一项</p>\n</li>\n<li>\n<p>前台进程：跟用户交互的</p>\n</li>\n<li>\n<p>后台进程 ：由后台启动的进程</p>\n<p>启动方法： <code>$command &amp;</code>    终止和挂起后台进程： <code>kill</code></p>\n</li>\n<li>\n<p>dmesg 显示开机信息</p>\n</li>\n</ul>\n<h3 id=\"三-vi编辑器\"><a class=\"anchor\" href=\"#三-vi编辑器\">#</a> 三、vi 编辑器</h3>\n<p>并不是一个排版程序，只是一个文本编辑程序。</p>\n<h5 id=\"1命令模式command-mode\"><a class=\"anchor\" href=\"#1命令模式command-mode\">#</a> 1. 命令模式 (Command mode)</h5>\n<h6 id=\"1进入命令模式\"><a class=\"anchor\" href=\"#1进入命令模式\">#</a> （1）进入命令模式</h6>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$vi</span> +n 文件名\n<span class=\"token comment\"># +[n]:</span>\n<span class=\"token comment\">#指明进入 vi 后直接位于文件的第 n 行</span>\n<span class=\"token comment\">#如果只有 “+” 而不指定 n, 则光标位于文本的最后一行</span>\n<span class=\"token comment\">#如果该文件不存在，会自动建立新文件。</span>\n<span class=\"token variable\">$vi</span> <span class=\"token parameter variable\">-R</span> 文件名\n<span class=\"token comment\">#以只读方式打开文件</span>\n<span class=\"token variable\">$vi</span> <span class=\"token parameter variable\">-r</span> 文件名\n<span class=\"token comment\">#恢复系统突然崩溃时正在编辑的文件。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>在任何模式下，按 &lt;Esc&gt; 键即可回到命令模式</li>\n</ul>\n<h6 id=\"2移动光标\"><a class=\"anchor\" href=\"#2移动光标\">#</a> （2）移动光标</h6>\n<ul>\n<li>最简单的方式是按键盘的上、下、左、右方向键<br>\n <code>nG</code> \t　跳到第 n 行<br>\n <code>G</code> \t\t  跳到最后一行<br>\n <code>0</code> \t\t  跳到行首<br>\n <code>$</code> \t\t  跳到行尾<br>\n <code>ctrl+b</code> \t  前移一页<br>\n <code>ctrl+f</code> \t  后移一页</li>\n</ul>\n<h6 id=\"3字符串搜索\"><a class=\"anchor\" href=\"#3字符串搜索\">#</a> （3）字符串搜索</h6>\n<p><code>/str1</code>       正向搜索字符串 str1<br>\n <code>?str2</code>       反向搜索字符串 str2<br>\n <code>n</code>           继续搜索，找出 str1 字符串下次出现的位置<br>\n <code>N</code>           反方向搜索</p>\n<h5 id=\"2输入模式insert-mode\"><a class=\"anchor\" href=\"#2输入模式insert-mode\">#</a> 2. 输入模式 (Insert mode)</h5>\n<h6 id=\"1进入输入模式\"><a class=\"anchor\" href=\"#1进入输入模式\">#</a> （1）进入输入模式</h6>\n<p>在命令模式下：</p>\n<ul>\n<li>&lt;i&gt; 在当前光标位置插入</li>\n<li>&lt;a&gt; 光标后一个位置插入</li>\n<li>&lt;o&gt; 光标下一行插入新的行</li>\n</ul>\n<h6 id=\"2输入模式下命令\"><a class=\"anchor\" href=\"#2输入模式下命令\">#</a> (2) 输入模式下命令</h6>\n<ul>\n<li>\n<p>&lt;x&gt; 删除光标所在处单个字符</p>\n</li>\n<li>\n<p>&lt;dd&gt; 删除当前光标所在行</p>\n</li>\n</ul>\n<h5 id=\"3底行模式last-line-mode\"><a class=\"anchor\" href=\"#3底行模式last-line-mode\">#</a> 3. 底行模式 (Last Line Mode)</h5>\n<h6 id=\"1进入底行模式\"><a class=\"anchor\" href=\"#1进入底行模式\">#</a> （1）进入底行模式</h6>\n<ul>\n<li>在命令模式下，按下 &lt;:&gt; 键</li>\n</ul>\n<h6 id=\"2移动光标-2\"><a class=\"anchor\" href=\"#2移动光标-2\">#</a> （2）移动光标</h6>\n<p><code>:n</code>    将光标移到第 n 行</p>\n<p><code>:+n </code>     将光标移动到当前行往下的第 n 行</p>\n<blockquote>\n<p><code>.</code>    -- 光标所在行的行号</p>\n<p><code>$</code>    -- 正文最后一行的行号</p>\n</blockquote>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">:.+5 <span class=\"token comment\">#将光标移动到当前行往下的第 5 行。</span>\n:345 <span class=\"token comment\">#将光标移到第 345 行</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n<h6 id=\"3字符串替换\"><a class=\"anchor\" href=\"#3字符串替换\">#</a> （3）字符串替换</h6>\n<p><code>[n1, n2]s/str1/str2/[g][c] </code>  在第 n1 行到 n2 行的范围内将字符串 str1 用 str2 代替</p>\n<ul>\n<li>\n<p>c 每次替换都由用户确认</p>\n</li>\n<li>\n<p>g 对行中搜索字符串的每次出现进行替换。</p>\n</li>\n<li>\n<p>不加 g 只对行中搜索字符串的首次出现进行替换</p>\n</li>\n</ul>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">:s/str1/str2/ \t\n<span class=\"token comment\">#用字符串 str2 替换该行中首次出现的字符串 str1 </span>\n:s/str1/str2/g \n<span class=\"token comment\">#用字符串 str2 替换该行中所有出现的字符串 str1 </span>\n:.,<span class=\"token variable\">$s</span>/str1/str2/g \n<span class=\"token comment\">#用字符串 str2 替换正文当前行 (.) 到末尾 ($) 所有出现的字符串 str1 </span>\n:1,<span class=\"token variable\">$s</span>/str1/str2/g\n<span class=\"token comment\">#用字符串 str2 替换正文中 (第一行到最后一行) 所有出现的字符串 str1 </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"4-保存\"><a class=\"anchor\" href=\"#4-保存\">#</a> （4） 保存</h6>\n<ul>\n<li>将编辑内容保存到原始文件</li>\n</ul>\n<p><pre class=\"line-numbers language-none\"><code class=\"language-none\">:w<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<ul>\n<li>将编辑内容写入 file 文件</li>\n</ul>\n<p><pre class=\"line-numbers language-none\"><code class=\"language-none\">:w file<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<h6 id=\"5退出\"><a class=\"anchor\" href=\"#5退出\">#</a> （5）退出</h6>\n<ul>\n<li>在未作修改的情况下退出</li>\n</ul>\n<p><pre class=\"line-numbers language-none\"><code class=\"language-none\">：q<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<ul>\n<li>放弃所有修改，强制退出</li>\n</ul>\n<p><pre class=\"line-numbers language-none\"><code class=\"language-none\">：q!<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<ul>\n<li>将编辑的内容写入原始文件并退出编辑程序</li>\n</ul>\n<p><pre class=\"line-numbers language-none\"><code class=\"language-none\">：wq<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/rainnn-w/Pictures@main/blog/202308281108140.png\" alt></p>\n<h6 id=\"6在vi内使用shell\"><a class=\"anchor\" href=\"#6在vi内使用shell\">#</a> (6) 在 vi 内使用 Shell</h6>\n<p><code>:! command</code></p>\n<h5 id=\"4vim和gvim\"><a class=\"anchor\" href=\"#4vim和gvim\">#</a> 4.Vim 和 gvim</h5>\n<ul>\n<li>Vim 代表 Vi IMproved，如同其名称所暗示的那样，Vim 作为标准 UNIX 系统 vi 编辑器的提高版而存在。 Vim 除提供和 vi 编辑器一样强大的功能外，还提供有多级恢复、命令行历史以及命令及文件名补全等功能。</li>\n<li>gvim 是 vi 的 X Window 版本，该版本支持鼠标选中，一些高级的光标移动功能，并且带有菜单和工具按钮。</li>\n</ul>\n<h3 id=\"四-shell\"><a class=\"anchor\" href=\"#四-shell\">#</a> 四、shell</h3>\n<blockquote>\n<p>shell 是一个命令行解释器，是内核与用户的接口</p>\n<p>也是一种程序设计语言（shell script）</p>\n<p>在用户登录后 shell 启动</p>\n</blockquote>\n<h4 id=\"一shell基础\"><a class=\"anchor\" href=\"#一shell基础\">#</a> （一）shell 基础</h4>\n<h5 id=\"1启动指定类型子shell\"><a class=\"anchor\" href=\"#1启动指定类型子shell\">#</a> 1. 启动指定类型子 shell</h5>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$shellname</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<h5 id=\"2退出子shell\"><a class=\"anchor\" href=\"#2退出子shell\">#</a> 2. 退出子 shell</h5>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$exit</span>\n<span class=\"token operator\">&lt;</span>Ctrl+D<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n<h5 id=\"3查看当前系统默认shell\"><a class=\"anchor\" href=\"#3查看当前系统默认shell\">#</a> 3. 查看当前系统默认 shell</h5>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$SHELL</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p>输出：/bin/bash</p>\n<h5 id=\"4变量\"><a class=\"anchor\" href=\"#4变量\">#</a> 4. 变量</h5>\n<blockquote>\n<p><strong>变量名</strong>只能是字母、数字、下划线的组合，不能以数字开头</p>\n<blockquote>\n<p>通常：</p>\n<p>大写字母为系统预设的变量</p>\n<p>小写字母用于用户自定义的变量</p>\n</blockquote>\n</blockquote>\n<h6 id=\"1赋值\"><a class=\"anchor\" href=\"#1赋值\">#</a> （1）赋值</h6>\n<ul>\n<li>变量名 = 值 或 {变量名 = 值} (无空格)</li>\n</ul>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">abc</span><span class=\"token operator\">=</span><span class=\"token number\">1234</span>  或   <span class=\"token punctuation\">&#123;</span>abc<span class=\"token operator\">=</span><span class=\"token number\">1234</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<ul>\n<li>若赋空值：</li>\n</ul>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">abc</span><span class=\"token operator\">=</span><span class=\"token string\">\"\"</span>\n<span class=\"token assign-left variable\">abc</span><span class=\"token operator\">=</span>\n<span class=\"token assign-left variable\">abc</span><span class=\"token operator\">=</span><span class=\"token string\">''</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>等号两边不能直接接单独的空格符</li>\n<li>如果变量所取的值中包含空格，必须使用引号将变量取值括起来</li>\n</ul>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">'my name'</span>\n<span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"my name\"</span>\n<span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span>my<span class=\"token punctuation\">\\</span> name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"2显示变量\"><a class=\"anchor\" href=\"#2显示变量\">#</a> （2）显示变量</h6>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$echo</span> <span class=\"token variable\">$abc</span> 或  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;abc&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<h6 id=\"3显示所有shell环境变量\"><a class=\"anchor\" href=\"#3显示所有shell环境变量\">#</a> （3）显示所有 Shell 环境变量</h6>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$set</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<h6 id=\"4清除变量\"><a class=\"anchor\" href=\"#4清除变量\">#</a> (4) 清除变量</h6>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$unset</span> abc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p>清除后变量的值为空</p>\n<h6 id=\"5从标准输入读入变量值read\"><a class=\"anchor\" href=\"#5从标准输入读入变量值read\">#</a> (5) 从标准输入读入变量值 read</h6>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$read</span> var1 var2 var3 \nHello my friends\n<span class=\"token comment\">#将 var1、var2、var3 的值分别设置为 Hello、my、friend</span>\n\n<span class=\"token variable\">$read</span> var1 var2 var3 \nHello my dear friends\n<span class=\"token variable\">$echo</span> <span class=\"token variable\">$var3</span>\ndear friends\n<span class=\"token comment\">#若读入的内容个数比变量多，则将多出的都赋给最后一个变量</span>\n\n<span class=\"token variable\">$read</span> var1 var2 var3\nHello friends \n<span class=\"token variable\">$echo</span> <span class=\"token variable\">$var3</span>\n$\n<span class=\"token comment\">#若变量比读入的内容个数多，则多出的变量将设为空值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"6全局环境变量\"><a class=\"anchor\" href=\"#6全局环境变量\">#</a> (6) 全局环境变量</h6>\n<blockquote>\n<p>传统上，所有全局环境变量均为大写</p>\n<p>可用于所有子进程</p>\n</blockquote>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">variable-name<span class=\"token operator\">=</span>value\n<span class=\"token builtin class-name\">export</span> variable-name\n<span class=\"token comment\">#与本地变量的赋值方式相同。</span>\n<span class=\"token comment\">#但赋值后必须将变量值导出，否则无法传递给子进程。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$env</span>\n<span class=\"token comment\">#显示所有环境变量</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n<p>Shell 中有一些预留的环境变量名，他们各有其用途，且不能用 作他用，称为嵌入 Shell 变量。</p>\n<ul>\n<li>\n<p>HOME 变量：</p>\n</li>\n<li>\n<p>保存用户主目录的完全路径名</p>\n<p><code>$echo $HOME</code></p>\n</li>\n<li>\n<p>LOGNAME 变量：</p>\n<ul>\n<li>保存登陆用户名</li>\n</ul>\n<p><code>$echo $LOGNAME </code></p>\n</li>\n<li>\n<p>PS1 变量：</p>\n<ul>\n<li>\n<p>保存主提示符</p>\n</li>\n<li>\n<p>基本提示符包含 Shell 提示符，缺省（系统默认状态的 意思）对超级用户为 #，其他为 $。可以使用任何符号作 提示符</p>\n<p><code>$ PS1=“HH-&gt;”</code></p>\n</li>\n</ul>\n</li>\n<li>\n<p>PATH 变量：</p>\n<ul>\n<li>保存进行命令或脚本查找的目录顺序，不同的目录路径 名之间用冒号分隔开。 <code>PATH=/bin:usr/bin:/etc:/home/team01/bin:. </code></li>\n<li>正确排列这个次序很重要，可以在执行命令时节省时间。</li>\n<li>加入新的查找路径：  <code>$PATH=$PATH:filelist $export PATH</code></li>\n</ul>\n</li>\n</ul>\n<h6 id=\"7特殊字符\"><a class=\"anchor\" href=\"#7特殊字符\">#</a> （7）特殊字符</h6>\n<ul>\n<li>\n<p>单引号</p>\n<ul>\n<li>\n<p>括起来的所有字符都作为普通字符出现</p>\n</li>\n<li>\n<p>特殊字符用单引号括起来后，也会失去原有意义，而只作为普通字符解释。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>双引号</p>\n<ul>\n<li>由双引号括起来的字符，除（$ \\ 引号）几种符号具有其特殊功能外，其余字符都作为普通字符对待</li>\n</ul>\n</li>\n<li>\n<p>反引号</p>\n<ul>\n<li>反引号括起来的内容被 Shell 解释为命令行</li>\n<li>执行时，Shell 首先执行该命令行，并用它的标准输出结果取代整个反引号（包括反引号括起来的部分）</li>\n<li>反引号可以与其它引号结合使用。</li>\n</ul>\n</li>\n</ul>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">abc</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token builtin class-name\">echo</span> The current user is <span class=\"token punctuation\">\\</span><span class=\"token variable\">`</span></span>whoami<span class=\"token punctuation\">\\</span>``  \n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$abc</span>\n<span class=\"token comment\">#The current user is test</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>\n<p>反斜线</p>\n<ul>\n<li>\n<p>如果下一个字符有特殊含义，反斜线屏蔽其特殊含义。</p>\n<p>下述字符包含有特殊意义： &amp; * + ^ $ ` &quot; | ?。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"8进程间变量的关系\"><a class=\"anchor\" href=\"#8进程间变量的关系\">#</a> （8）进程间变量的关系</h6>\n<ul>\n<li>\n<p>变量是进程运行环境的一个组成部分</p>\n</li>\n<li>\n<p>本地变量在各进程间是不能相互访问和修改的</p>\n</li>\n<li>\n<p>子进程不会自动地继承父进程中本地的变量</p>\n<p>export 命令：将变量的设置导出，使之能够传递给子进程</p>\n<p>环境变量的值只能传递给子进程，而不能传递给它所在的父进程</p>\n</li>\n</ul>\n<h6 id=\"9-profile\"><a class=\"anchor\" href=\"#9-profile\">#</a> (9) profile</h6>\n<p>/etc/profile：存放系统管理员设置的环境变量</p>\n<h5 id=\"5注释\"><a class=\"anchor\" href=\"#5注释\">#</a> 5. 注释</h5>\n<p>在 Shell 程序中以字符 # 开头的正文行表示注释行。</p>\n<h4 id=\"二shell进阶\"><a class=\"anchor\" href=\"#二shell进阶\">#</a> （二）shell 进阶</h4>\n<h5 id=\"1通配符\"><a class=\"anchor\" href=\"#1通配符\">#</a> 1. 通配符</h5>\n<blockquote>\n<p>用户可以在作为命令参数的文件名中包含这些元字符（通配符） 构成一个模式串。</p>\n<p>这样就可以按照所要求的模式来匹配文件名、路径名、字符串等。</p>\n</blockquote>\n<ul>\n<li>\n<p>* 通配符</p>\n<ul>\n<li>\n<p>匹配文件名中的任何字符串</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$ls</span> .*\n<span class=\"token comment\">#列出所有隐含文件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>在使用 cd 命令切换路径时，使用星号还可以省去输入整个路径名的麻烦</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$pwd</span>\n/home/student\n<span class=\"token variable\">$cd</span>  app*\n<span class=\"token variable\">$pwd</span>\n/home/student/app.1234567<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n</li>\n<li>\n<p>? 通配符</p>\n<ul>\n<li>\n<p>可以匹配文件名中的任何单个字符</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$ls</span> ??R*\n任意两个字符开头，第三个字符是R，后面跟任何字符的文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n</li>\n<li>\n<p>[...] 通配符</p>\n<ul>\n<li>\n<p>匹配方括号 [ ] 中指定范围内的字符</p>\n<p>可以使用横杠 - 来连接两个字母或数字，以表示范围</p>\n<p>例： <code>[a-z]</code></p>\n</li>\n<li>\n<p>[!...]</p>\n<p>匹配不在指定范围内的任何字符。</p>\n<p>例： <code>[!a-z]</code></p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#列出所有以 log 开头，后面跟任何单个字符，. 后面跟随任意一位数字、然后可以是任意字符串的文件名：</span>\n<span class=\"token variable\">$ls</span> log?.<span class=\"token punctuation\">[</span><span class=\"token number\">0</span>-9<span class=\"token punctuation\">]</span>*<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n</li>\n</ul>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#列出以 i 或 o 开头的文件名：</span>\n<span class=\"token variable\">$ls</span> <span class=\"token punctuation\">[</span>io<span class=\"token punctuation\">]</span>*\n<span class=\"token comment\">#列出以 a、b、c、d、m 中任一个字符开头的文件：</span>\n<span class=\"token variable\">$ls</span> <span class=\"token punctuation\">[</span>abcdm<span class=\"token punctuation\">]</span>* 或者 <span class=\"token variable\">$ls</span> <span class=\"token punctuation\">[</span>a-dm<span class=\"token punctuation\">]</span>* \n<span class=\"token comment\">#列出所有以 log. 开头、后面跟随任意一位数字、然后可以是任意字符串的文件名：</span>\n<span class=\"token variable\">$ls</span> log.<span class=\"token punctuation\">[</span><span class=\"token number\">0</span>-9<span class=\"token punctuation\">]</span>*\n<span class=\"token comment\">#列出所有以大写字母开头的文件名:</span>\n<span class=\"token variable\">$ls</span> <span class=\"token punctuation\">[</span>A-Z<span class=\"token punctuation\">]</span>*\n<span class=\"token comment\">#以。开头，最后一个字符可以是除 a 和 z 之外的任意字符的文件名:</span>\n<span class=\"token variable\">$ls</span> .*<span class=\"token punctuation\">[</span><span class=\"token operator\">!</span>za<span class=\"token punctuation\">]</span> \n<span class=\"token comment\">#列出所有以 LPS 开头、其后可以是任何两个字符，后面跟随一个非数字字符、然后是任意字符串的文件名:</span>\n<span class=\"token variable\">$ls</span> LPS？？<span class=\"token punctuation\">[</span>！0－9<span class=\"token punctuation\">]</span>*<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h5 id=\"2标准文件和文件描述符\"><a class=\"anchor\" href=\"#2标准文件和文件描述符\">#</a> 2. 标准文件和文件描述符</h5>\n<p>在 Shell 中执行命令的时候，每个进程都和三个打开的文件相联系，并使用文件 描述符来引用这些文件。</p>\n<h6 id=\"1文件描述符\"><a class=\"anchor\" href=\"#1文件描述符\">#</a> （1）文件描述符</h6>\n<ul>\n<li>输入文件 —　标准输入 – stdin    0  缺省是键盘，也可以是文件或其他命令的输出</li>\n<li>输出文件 —　标准输出 – stdout    1  缺省是屏幕，也可以是文件</li>\n<li>错误输出文件 — 标准错误输出 – stderr 2  缺省是屏幕，也可以是文件</li>\n</ul>\n<h6 id=\"2输入输出重定向\"><a class=\"anchor\" href=\"#2输入输出重定向\">#</a> （2）输入输出重定向</h6>\n<blockquote>\n<p>若要指定命令的标准输入、输出或错误输出，而不是使用缺省值，就需要使用文件重定向机制。</p>\n</blockquote>\n<p><code>Command operator file</code>   将输入、输出或错误重定向到某个文件中</p>\n<ul>\n<li>\n<p>输入重定向 &lt;</p>\n</li>\n<li>\n<p>输出重定向 &gt;    追加 &gt;&gt;</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$ls</span> <span class=\"token operator\">></span> directory.out\n<span class=\"token comment\">#将 ls 的内容写在（输出在）directory.out 文件中</span>\n<span class=\"token variable\">$cat</span> file1 file2 <span class=\"token operator\">></span> file3\n<span class=\"token comment\">#将 file1 file2 的内容一起写在 file3 中</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>错误重定向 2&gt;   将命令或程序执行的错误信息放到文件中</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#例：假设已经建立了文件 filea，但没有建立文件 fileb</span>\n<span class=\"token variable\">$cat</span> filea fileb\nThis is output from filea.\ncat: cannot <span class=\"token function\">open</span> fileb\n<span class=\"token comment\">#将命令或程序执行的错误信息放到文件中</span>\n<span class=\"token variable\">$cat</span> fila fileb <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span> errfile\nThis is output from filea.\n<span class=\"token variable\">$cat</span> errfile\ncat: cannot <span class=\"token function\">open</span> fileb\n\n<span class=\"token comment\">#/dev/null 是一个特殊的文件，始终为空文件  </span>\n<span class=\"token variable\">$cat</span> fila fileb <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span> /dev/null\n<span class=\"token comment\">#可以不显示任何错误信息</span>\n<span class=\"token comment\">#这个操作等同于把错误输出删除掉，而不输出。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n<h6 id=\"3重定向的结合应用\"><a class=\"anchor\" href=\"#3重定向的结合应用\">#</a> (3) 重定向的结合应用</h6>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Command <span class=\"token operator\">></span> outfile  <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span> errfile  <span class=\"token operator\">&lt;</span>  infile\n<span class=\"token comment\">#以 infile 为标准输入，将标准输出送到 outfile, 标准错误输出送到 errfile. </span>\nCommand <span class=\"token operator\">>></span> outfile  <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>>></span> errfile  <span class=\"token operator\">&lt;</span>  infile\n<span class=\"token comment\">#以 infile 为标准输入，将标准输出追加到 outfile, 标准错误输出追加到 errfile. </span>\nCommand <span class=\"token operator\">></span> outfile <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span>\n<span class=\"token comment\">#&amp;1 的含义就可以理解为用标准输出的引用，引用的就是重定向标准输出产生打开的 outfile</span>\n<span class=\"token comment\">#把标准输出和标准错误输出同时重定向到 outfile</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h5 id=\"3管道\"><a class=\"anchor\" href=\"#3管道\">#</a> 3. 管道</h5>\n<ul>\n<li>** 把一个命令在屏幕上的输出传递给另一个命令作为输入。** 用竖杠 | 表示。（把信息从一端传送到另外一端）</li>\n</ul>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">命令1 <span class=\"token operator\">|</span>命令2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p>例： <code>ls | wc -w</code>    <code>set | more</code></p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$ls</span> \naa Param set_dir spec_var spec_var2 <span class=\"token builtin class-name\">test</span>\n<span class=\"token variable\">$ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> –w\n<span class=\"token number\">6</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h5 id=\"4过滤和正则表达式\"><a class=\"anchor\" href=\"#4过滤和正则表达式\">#</a> 4. 过滤和正则表达式</h5>\n<blockquote>\n<p>当从一个文件或命令输出中抽取或过滤文本时，可以使用正则表达式</p>\n<p>以行为单位，来进行字符串的处理行为</p>\n</blockquote>\n<ul>\n<li><code>^d</code>           行首是 d 的行</li>\n<li><code>z$</code>           行尾字符为 z</li>\n<li><code>.</code>             只匹配任意单字符</li>\n<li><code>*</code>             前面的字符重复 0 到多次  代表任意多个字符</li>\n<li><code>[aA]</code>  \t a or A</li>\n<li><code>[a-f]</code> \ta 到 f</li>\n<li><code>[^0-9]</code>   非数字</li>\n<li><code>\\</code>              屏蔽其后的特殊字符的特殊含义</li>\n<li><code>\\.</code>            包含字符 <code>.</code>  的行</li>\n<li><code>\\&#123;n\\&#125; </code>      前导的正则表达式重复 n 次</li>\n<li><code>[0-9]\\&#123;3\\&#125;</code>   包含 3 个数字的行</li>\n<li><code>\\&#123;min,max\\&#125;</code>       前导的正则表达式重复 min~max 次</li>\n</ul>\n<blockquote>\n<p>注意：有些元字符虽然与 Shell 的通配符一样，但意义有所不同</p>\n</blockquote>\n<h5 id=\"5grep命令\"><a class=\"anchor\" href=\"#5grep命令\">#</a> 5.grep 命令</h5>\n<p>** 允许对文本文件的内容进行模式查找。** 如果找到匹配模式，grep 显示包含该模式的所有行。</p>\n<p>若指定了多个文件名，结果中会在每一行的前面显示文件名。</p>\n<p><code> grep [-option] pattern files</code></p>\n<ul>\n<li>-c 只输出匹配行的计数。</li>\n<li>-n 显示匹配行及行号。</li>\n<li>-v 显示不包含匹配文本的所有行。</li>\n<li>-w 只显示全字符合的列</li>\n</ul>\n<p>在 grep 命令中输入字符串参数时，最好将其用双引号括起来。</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#从以 phone 开头的文件中查找所有含 800 的行</span>\n<span class=\"token variable\">$grep</span> <span class=\"token string\">\"800\"</span> phone*<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n<p>在调用模式匹配时，应使用单引号。</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#从 phone1 文件中找开头不是 4 和 8 的行（可以是其他数字或字母、符号等）</span>\n<span class=\"token variable\">$grep</span> <span class=\"token string\">'^[^48]'</span> phone1\n<span class=\"token comment\">#从 phone1 文件中找开头为 44 的行</span>\n<span class=\"token variable\">$grep</span> ‘4<span class=\"token punctuation\">\\</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">&#125;</span>’ phone1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>可以与管道一起结合使用</li>\n</ul>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#显示当前目录下文件名以 abc 开头同时以 123 结尾的文件。</span>\n<span class=\"token variable\">$ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"^abc.*123$\"</span>\n<span class=\"token comment\">#查看所有类型为 “目录” 的文件：</span>\n<span class=\"token variable\">$ls</span> –l <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> ‘^d’\n<span class=\"token comment\">#查看所有类型为 “目录”, 且组成员及其他用户对其具有执行权限的文件：</span>\n<span class=\"token variable\">$ls</span> –l <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> ‘^d<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.x<span class=\"token punctuation\">..</span>x’\n\n<span class=\"token comment\">#显示匹配 pattern1 或 pattern2 的行</span>\n<span class=\"token variable\">$grep</span> pattern1 <span class=\"token operator\">|</span> pattern2 files \n<span class=\"token comment\">#显示既匹配 pattern1 又匹配 pattern2 的行。</span>\n<span class=\"token variable\">$grep</span> pattern1 files <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> pattern2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h5 id=\"6find命令\"><a class=\"anchor\" href=\"#6find命令\">#</a> 6.find 命令</h5>\n<p><code>find path expression [-exec -ok] [command] &#123;&#125; \\</code></p>\n<ul>\n<li>\n<p>path：所查找的目录路径，对目录的搜索是递归的。<br>\n. 表示当前目录     / 表示系统根目录。</p>\n</li>\n<li>\n<p>expression 项：希望查询的文件的匹配标准或说明</p>\n<ul>\n<li>\n<p>-name file   寻找名为 file 的文件，要找的文件名包括在引号中，可以使用通配符。</p>\n<p><code>$find . -name &quot;*.txt&quot;</code>   在当前目录及子目录中查找所有的 .txt 文件</p>\n</li>\n<li>\n<p>-user name  按照文件属主来查找文件</p>\n<p><code>$find /etc -user uucp </code>   在 /etc 目录下查找文件属主为 uucp 的文件</p>\n</li>\n<li>\n<p>-group name 按照文件所属的组来查找文件</p>\n</li>\n<li>\n<p>-type type  查找某一类型的文件 (b、c、d、f、l)</p>\n<p>d：目录文件   f：普通文件</p>\n</li>\n<li>\n<p>-size n [c]  查找文件长度为 n 块 (block) 的文件，带有 c 时表示文件长度以字节计。</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#在当前目录下查找文件长度大于 1M 字节的文件：</span>\n<span class=\"token variable\">$find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-size</span> +1000000c\n<span class=\"token comment\">#为了在当前目录下查找长度超过 10block 的文件（1 个 block 等于 512 字节）：</span>\n<span class=\"token variable\">$find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-size</span> +10<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>-mtime n  按照文件的更改时间来查找文件</p>\n<p><code>-n</code> \t        最后的更改时间在 n 天以内。<br>\n <code>n , +n</code>    更改时间距现在 n 天以上。</p>\n</li>\n<li>\n<p>-perm 权限</p>\n</li>\n</ul>\n</li>\n<li>\n<p>-exec    find 命令对匹配的文件执行该参数所给出的 Shell 命令 command。</p>\n</li>\n<li>\n<p>-ok     和 - exec 的作用相同，只是在执行每一个命令之前，都会给出提示，让用户来确定是否执行。如果用户不回应 'y' 或 'Y'，command 将不予以执行，并回应 false。</p>\n</li>\n</ul>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"*.LOG\"</span> <span class=\"token parameter variable\">-mtime</span> +5 <span class=\"token parameter variable\">-ok</span> <span class=\"token function\">rm</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token comment\">#find 命令在当前目录中查找所有文件名以.LOG 结尾、更改时间在 5 日以上的文件，并删除它们。</span>\n<span class=\"token variable\">$find</span> <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"*.c\"</span> \n<span class=\"token comment\">#将.c 结尾的文件全部找出</span>\n<span class=\"token variable\">$find</span> / <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-size</span> <span class=\"token number\">0</span> <span class=\"token parameter variable\">-exec</span> <span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token comment\">#查找系统中所有（/）长度为 0 的普通文件，并列出其完整路径</span>\n<span class=\"token variable\">$find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-perm</span> <span class=\"token number\">644</span> <span class=\"token parameter variable\">-exec</span> <span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token comment\">#查找权限为 644 的文件</span>\n<span class=\"token variable\">$find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"*.txt\"</span> \n<span class=\"token comment\">#想要在当前目录及子目录中查找所有的 .txt 文件</span>\n<span class=\"token variable\">$find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"[A-Z]*\"</span>\n<span class=\"token comment\">#在当前目录及子目录中查找文件名以任一个大写字母开头的文件</span>\n<span class=\"token variable\">$find</span> /etc <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"host*\"</span>\n<span class=\"token comment\">#想要在 /etc 目录中查找文件名以 host 开头的文件</span>\n<span class=\"token variable\">$find</span> / <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"*\"</span>\n<span class=\"token comment\">#想要查找根目录下的文件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h5 id=\"7sort-命令\"><a class=\"anchor\" href=\"#7sort-命令\">#</a> 7.sort 命令</h5>\n<p>将以默认的方式将文本文件的第一列以 ASCII 码的次序排列，并将结果输出到标准输出。</p>\n<h5 id=\"8-命令组-命令换行\"><a class=\"anchor\" href=\"#8-命令组-命令换行\">#</a> 8. 命令组 命令换行</h5>\n<ul>\n<li>\n<p>多个命令在一行输入时，用 “;” 作为命令间分隔符。</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$ls</span> –R <span class=\"token operator\">></span> outfile <span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">exit</span>\n<span class=\"token variable\">$ls</span> –R <span class=\"token operator\">></span> outfile\n<span class=\"token variable\">$exit</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>可通过加 \\ 的方式来进行换行拆分。</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$cat</span> /home/mydir/mysubdir/mydata <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> /home/yourdir/yourdata<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n<h5 id=\"9和\"><a class=\"anchor\" href=\"#9和\">#</a> 9.&amp;&amp; 和 ||</h5>\n<ul>\n<li>\n<p>命令 1 &amp;&amp; 命令 2</p>\n<p>只有命令 1 为真 (即成功被执行，返回 0），命令 2 才能够被执行</p>\n<p><code>$ ls s*  &amp;&amp;  rm s*</code></p>\n</li>\n<li>\n<p>命令 1 || 命令 2<br>\n 如果命令 1 执行失败，那么就执行命令 2。</p>\n<p><code>$cd /dir1 || echo cannot change to /dir1</code></p>\n</li>\n<li>\n<p><code>$test expression &amp;&amp; 命令1 || 命令2</code>   若 expression 为真，则执行命令 1，否则执行命令 2</p>\n</li>\n</ul>\n<h5 id=\"10算术\"><a class=\"anchor\" href=\"#10算术\">#</a> 10. 算术</h5>\n<h6 id=\"1shell的算数扩展\"><a class=\"anchor\" href=\"#1shell的算数扩展\">#</a> （1）shell 的算数扩展</h6>\n<p><code>$((expression))</code></p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$i</span><span class=\"token operator\">=</span><span class=\"token number\">2</span>\n<span class=\"token variable\">$echo</span> <span class=\"token number\">2</span>*<span class=\"token variable\">$i</span>+1\n<span class=\"token variable\">$echo</span>  <span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token variable\">))</span></span>\n<span class=\"token comment\">#算术扩展中包含的只有变量、运算符和常数  i 前没有 $ 符号</span>\n<span class=\"token comment\">#表达式内的变量若未定义，则当作其值为 0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$i</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> \n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>i<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token variable\">))</span></span>  <span class=\"token comment\">#1</span>\n<span class=\"token comment\">#算术扩展可以用来判断真假 (1 为真，0 为假)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"2expr命令\"><a class=\"anchor\" href=\"#2expr命令\">#</a> （2）expr 命令</h6>\n<blockquote>\n<p>用于进行整数运算</p>\n</blockquote>\n<ul>\n<li>\n<p>表达式由操作数和运算符组成。操作数一般是整数，也可以是字符串</p>\n</li>\n<li>\n<p><strong>表达式的各部分 (操作数和运算符之间) 必须以空格分隔</strong>！！！</p>\n</li>\n<li>\n<p>表达式中某些对 shell 有特殊意义的字符必须转义</p>\n</li>\n</ul>\n<p><code>+</code>  加法</p>\n<p><code>-</code>  减法</p>\n<p><code>\\*</code>  乘法</p>\n<p><code>/</code>  整除</p>\n<p><code>%</code>  求模 (余数)</p>\n<p><code>=</code>  相等</p>\n<ul>\n<li>\n<p>可以使用反引号改变计算次序</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$expr</span> <span class=\"token number\">5</span> + <span class=\"token number\">7</span> / <span class=\"token number\">3</span>  <span class=\"token comment\">#7</span>\n<span class=\"token variable\">$expr</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> <span class=\"token number\">5</span> + <span class=\"token number\">7</span><span class=\"token variable\">`</span></span> / <span class=\"token number\">3</span>  <span class=\"token comment\">#4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n<blockquote>\n<p>注意，expr 中括号是不可用的。请用 ``(反括号)</p>\n<p><s> <code>expr 3 * (2 + 1) </code> </s></p>\n<p>bash: syntax error near unexpected token `('</p>\n</blockquote>\n</li>\n<li>\n<p>expr 命令还可用于字符串测试。</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$s1</span><span class=\"token operator\">=</span>“hello”\n<span class=\"token variable\">$expr</span>  <span class=\"token variable\">$s1</span> <span class=\"token operator\">=</span> “hello”\n<span class=\"token comment\">#1 真</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></p>\n</li>\n</ul>\n<h5 id=\"11test命令\"><a class=\"anchor\" href=\"#11test命令\">#</a> 11.test 命令</h5>\n<blockquote>\n<p>用于测试一种或几种条件</p>\n</blockquote>\n<h6 id=\"1格式\"><a class=\"anchor\" href=\"#1格式\">#</a> （1）格式</h6>\n<ul>\n<li>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">test</span> expression</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--code￼54--<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n</ul>\n<p>使用方括号时，要注意<strong>在条件两边加上空格</strong>。涉及到变量值（$variable）的比较时最好把变量取值用双引号括起来，以免 Shell 误解变量值。</p>\n<h6 id=\"2输出\"><a class=\"anchor\" href=\"#2输出\">#</a> （2）输出</h6>\n<blockquote>\n<p>测试结果反映在退出状态中，而不是直接显示输出</p>\n<p><code>$echo $?</code></p>\n</blockquote>\n<ul>\n<li>条件为真：退出状态为 0</li>\n<li>条件为假：退出状态非 0</li>\n</ul>\n<h6 id=\"3操作符\"><a class=\"anchor\" href=\"#3操作符\">#</a> （3）操作符</h6>\n<p>①字符串操作符</p>\n<ul>\n<li>str1 = str2  字符串相等</li>\n<li>str1 != str2  字符串不相等</li>\n<li>str  字符串非空</li>\n</ul>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$str1</span><span class=\"token operator\">=</span>abcd \n<span class=\"token variable\">$str2</span><span class=\"token operator\">=</span><span class=\"token string\">\"abcd \"</span>\n<span class=\"token variable\">$test</span> <span class=\"token string\">\"<span class=\"token variable\">$str1</span>\"</span>\n$<span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$str1</span>\"</span> <span class=\"token punctuation\">]</span>\n<span class=\"token variable\">$echo</span> <span class=\"token variable\">$?</span> <span class=\"token comment\">#测试 $str1 是否非空（非空则 0）</span>\n<span class=\"token number\">0</span>\n<span class=\"token variable\">$test</span> <span class=\"token string\">\"<span class=\"token variable\">$str1</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token variable\">$str2</span>\"</span> \n$<span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$str1</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token variable\">$str2</span>\"</span> <span class=\"token punctuation\">]</span>\n<span class=\"token variable\">$echo</span> <span class=\"token variable\">$?</span> <span class=\"token comment\">#判断是否相等</span>\n<span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>②整数操作符</p>\n<ul>\n<li>int1 -eq int2    数值相等</li>\n<li>int1 -ne int2    数值不等</li>\n<li>int1 -lt int2      int1&lt;int2</li>\n<li>int1 -gt int2     int1&gt;int2</li>\n<li>int1 -le int2     int1&lt;=int2</li>\n<li>int1 -ge int2    int1&gt;=int2</li>\n</ul>\n<p>&lt;!-- 当 string 和 int 比较时，看操作符。--&gt; 例：</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$str1</span><span class=\"token operator\">=</span><span class=\"token number\">1234</span>  \n<span class=\"token variable\">$str2</span><span class=\"token operator\">=</span>01234  \n$<span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$str1</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token variable\">$str2</span>\"</span> <span class=\"token punctuation\">]</span> \n<span class=\"token variable\">$echo</span> <span class=\"token variable\">$?</span> <span class=\"token comment\">#1（字符串比较） 不相等 </span>\n$<span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$str1</span>\"</span> –eq <span class=\"token string\">\"<span class=\"token variable\">$str2</span>\"</span> <span class=\"token punctuation\">]</span>  \n<span class=\"token variable\">$echo</span> <span class=\"token variable\">$?</span> <span class=\"token comment\">#0（数值比较） 相等</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>③文件操作符：测试文件状态</p>\n<ul>\n<li>-e file  文件 file 存在</li>\n<li>-d file  文件 file 是一个目录</li>\n<li>-f file  文件 file 是一个普通文件</li>\n<li>-s file  文件 file 大小不为 0</li>\n<li>-r file  可读（对文件所有者的权限）</li>\n<li>-w file  可写（对文件所有者的权限）</li>\n<li>-x file  可执行（对文件所有者的权限）</li>\n</ul>\n<p>④逻辑操作符：测试多个条件的与或组合</p>\n<ul>\n<li>-a 逻辑与</li>\n<li>-o 逻辑或</li>\n<li>! 逻辑非</li>\n</ul>\n<h4 id=\"三shell脚本\"><a class=\"anchor\" href=\"#三shell脚本\">#</a> （三）shell 脚本</h4>\n<h5 id=\"1编写方法\"><a class=\"anchor\" href=\"#1编写方法\">#</a> 1. 编写方法</h5>\n<h6 id=\"1创建文件\"><a class=\"anchor\" href=\"#1创建文件\">#</a> （1）创建文件</h6>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> test<span class=\"token punctuation\">(</span>文件名<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<h6 id=\"2编辑内容\"><a class=\"anchor\" href=\"#2编辑内容\">#</a> （2）编辑内容</h6>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vi</span> test（文件名） //进入vi编辑编辑器\n<span class=\"token comment\">#！/bin/bash// 告诉系统用什么解释器来执行该脚本，用哪一种 shell</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></p>\n<h6 id=\"3运行shell脚本\"><a class=\"anchor\" href=\"#3运行shell脚本\">#</a> （3）运行 shell 脚本</h6>\n<ul>\n<li>\n<p><code>bash</code>    或   <code>.</code></p>\n</li>\n<li>\n<p><strong>用户对该文件具有 x 和 r 权限</strong></p>\n</li>\n</ul>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#bash  这种运行方式是启动了一个子 Shell（在后台执行）</span>\n<span class=\"token variable\">$cat</span> set_dir\n<span class=\"token assign-left variable\">dir1</span><span class=\"token operator\">=</span>/tmpf\n<span class=\"token assign-left variable\">dir2</span><span class=\"token operator\">=</span>/usr\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$dir1</span>  <span class=\"token variable\">$dir2</span>\n<span class=\"token variable\">$bash</span> set_dir\n/tmp  /usr\n<span class=\"token variable\">$echo</span> <span class=\"token variable\">$dir1</span> <span class=\"token variable\">$dir2</span>\n空行\n<span class=\"token comment\"># .  </span>\n<span class=\"token variable\">$cat</span> set_dir\n<span class=\"token assign-left variable\">dir1</span><span class=\"token operator\">=</span>/tmp\n<span class=\"token assign-left variable\">dir2</span><span class=\"token operator\">=</span>/usr\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$dir1</span>    <span class=\"token variable\">$dir2</span>\n$. set_dir\n/tmp  /usr\n<span class=\"token variable\">$echo</span> <span class=\"token variable\">$dir1</span>\n/tmp  \n<span class=\"token variable\">$echo</span> <span class=\"token variable\">$dir2</span>\n/usr<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h5 id=\"2流程控制\"><a class=\"anchor\" href=\"#2流程控制\">#</a> 2. 流程控制</h5>\n<h6 id=\"1if\"><a class=\"anchor\" href=\"#1if\">#</a> （1）IF</h6>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">..</span>.\n<span class=\"token keyword\">then</span> \n\t<span class=\"token punctuation\">..</span>.\n<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">..</span>.\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">..</span>.\n<span class=\"token keyword\">then</span>\n\t<span class=\"token punctuation\">..</span>.\nelif<span class=\"token punctuation\">..</span>.\n<span class=\"token keyword\">then</span>\n\t<span class=\"token punctuation\">..</span>.\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"2case\"><a class=\"anchor\" href=\"#2case\">#</a> （2）case</h6>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">case</span> 值 <span class=\"token keyword\">in</span>\n匹配值1<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">..</span>.\n\t<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n匹配值2<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">..</span>.\n\t<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">esac</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"3for\"><a class=\"anchor\" href=\"#3for\">#</a> （3）for</h6>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">for</span> 变量 <span class=\"token keyword\">in</span> item1 item2 item3 <span class=\"token punctuation\">..</span>. itemN\n<span class=\"token keyword\">do</span>\n\t<span class=\"token punctuation\">..</span>.\n\t<span class=\"token punctuation\">..</span>.\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">sta</span> <span class=\"token keyword\">in</span> Alabama Alaska Arizona California\n<span class=\"token keyword\">do</span>\n\t<span class=\"token builtin class-name\">echo</span>  The next state is <span class=\"token variable\">$sta</span>\n<span class=\"token keyword\">done</span> \n\nThe next state is Alabama\nThe next state is Alaska\nThe next state is Arizona\nThe next state is California<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>也支持 java 类似的循环方式</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">do</span>\n\t<span class=\"token punctuation\">..</span>.\n\t<span class=\"token punctuation\">..</span>.\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"4while\"><a class=\"anchor\" href=\"#4while\">#</a> （4）while</h6>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">while</span> condition\n<span class=\"token keyword\">do</span>\n\t<span class=\"token punctuation\">..</span>.\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h6 id=\"5until\"><a class=\"anchor\" href=\"#5until\">#</a> （5）until</h6>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">until</span> condition\n<span class=\"token keyword\">do</span>\n    <span class=\"token punctuation\">..</span>.\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>如果条件不成立，则进入循环，执行循环体中语句直到条件成立，结束循环</p>\n<h5 id=\"3执行时传递参数\"><a class=\"anchor\" href=\"#3执行时传递参数\">#</a> 3. 执行时传递参数</h5>\n<p>（1）位置变量参数</p>\n<ul>\n<li>\n<p>$0 执行的文件名（包含文件路径） （指命令对应的可执行名）</p>\n</li>\n<li>\n<p>$1 第一个参数  $2 第二个参数  $3 第三个参数 ...</p>\n<p>其中 1-9 是真正的参数名（变量名）,“$” 符只是用来标识变量的替换。 第九个以后的参数都不会被访问。</p>\n</li>\n</ul>\n<p>（2）特定变量参数</p>\n<ul>\n<li>$# 传递到脚本的参数个数</li>\n<li>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>脚本运行的当前</mtext><mi>s</mi><mi>h</mi><mi>e</mi><mi>l</mi><mi>l</mi><mtext>的</mtext><mi>P</mi><mi>I</mi><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">   脚本运行的当前shell的PID\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">脚</span><span class=\"mord cjk_fallback\">本</span><span class=\"mord cjk_fallback\">运</span><span class=\"mord cjk_fallback\">行</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">当</span><span class=\"mord cjk_fallback\">前</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span></span></p>\n</li>\n<li>$* 传递的参数作为一个字符串显示</li>\n<li>$@</li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∗</mo><mtext>和</mtext></mrow><annotation encoding=\"application/x-tex\">*和</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">∗</span><span class=\"mord cjk_fallback\">和</span></span></span></span> @区别：</p>\n<blockquote>\n<p>只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，则 &quot;*&quot; 等价于 “1 2 3”（传递了一个参数），而 “@” 等价于 “1” “2” “3”（传递了三个参数）。</p>\n</blockquote>\n<p>传参方法：</p>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">bash</span> <span class=\"token builtin class-name\">test</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<p><img data-src=\"D:%5CFiles%5CStudy%5CLinux%5CLinux%5C6.png\" alt=\"image-20230216154411270\"></p>\n<h5 id=\"4读入参数\"><a class=\"anchor\" href=\"#4读入参数\">#</a> 4. 读入参数</h5>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">read</span> i<span class=\"token punctuation\">(</span>变量名<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n<h5 id=\"5sleep\"><a class=\"anchor\" href=\"#5sleep\">#</a> 5.sleep</h5>\n<blockquote>\n<p>将目前动作延迟一段时间。</p>\n</blockquote>\n<p><code>sleep 60s</code>   停 60s</p>\n<p><code>sleep 5m</code>  停 5min</p>\n<p>s 为秒，m 为 分钟，h 为小时，d 为日数</p>\n<h3 id=\"五-例题\"><a class=\"anchor\" href=\"#五-例题\">#</a> 五、例题</h3>\n<h4 id=\"一shell编程\"><a class=\"anchor\" href=\"#一shell编程\">#</a> （一）shell 编程</h4>\n<h5 id=\"1计算两个正整数的最大公约数\"><a class=\"anchor\" href=\"#1计算两个正整数的最大公约数\">#</a> 1. 计算两个正整数的最大公约数</h5>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token builtin class-name\">read</span> num1\n<span class=\"token builtin class-name\">read</span> num2\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$num1</span> <span class=\"token parameter variable\">-ne</span> <span class=\"token variable\">$num2</span> <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">do</span> \n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$num1</span> <span class=\"token parameter variable\">-gt</span> <span class=\"token variable\">$num2</span> <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">then</span>\n<span class=\"token assign-left variable\">num1</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span>num1 <span class=\"token operator\">-</span> num2<span class=\"token variable\">))</span></span> \n<span class=\"token keyword\">else</span>\n<span class=\"token assign-left variable\">num2</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span>num2 <span class=\"token operator\">-</span> num1<span class=\"token variable\">))</span></span>\n<span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">done</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$num1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h5 id=\"2给出输入的一系列整数输入0停止输入的最大数-第二最大数\"><a class=\"anchor\" href=\"#2给出输入的一系列整数输入0停止输入的最大数-第二最大数\">#</a> 2. 给出输入的一系列整数（输入 0 停止输入）的最大数、第二最大数</h5>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token builtin class-name\">read</span> n\n<span class=\"token assign-left variable\">max</span><span class=\"token operator\">=</span><span class=\"token variable\">$n</span>\n<span class=\"token assign-left variable\">sMax</span><span class=\"token operator\">=</span><span class=\"token variable\">$n</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$n</span> <span class=\"token parameter variable\">-ne</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">do</span>\n<span class=\"token builtin class-name\">read</span> n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$n</span> <span class=\"token parameter variable\">-gt</span> <span class=\"token variable\">$max</span> <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">then</span>\n<span class=\"token assign-left variable\">sMax</span><span class=\"token operator\">=</span><span class=\"token variable\">$max</span>\n<span class=\"token assign-left variable\">max</span><span class=\"token operator\">=</span><span class=\"token variable\">$n</span>\n<span class=\"token keyword\">elif</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$n</span> <span class=\"token parameter variable\">-gt</span> <span class=\"token variable\">$sMax</span> <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">then</span>\n<span class=\"token assign-left variable\">sMax</span><span class=\"token operator\">=</span><span class=\"token variable\">$n</span>\n<span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">done</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$max</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$sMax</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h5 id=\"3写一个shell脚本每隔10秒检查当前系统中有没有进程名字为firefox的进程如果有的话显示firefox-进程出现了并退出返回码设置为等待的秒数\"><a class=\"anchor\" href=\"#3写一个shell脚本每隔10秒检查当前系统中有没有进程名字为firefox的进程如果有的话显示firefox-进程出现了并退出返回码设置为等待的秒数\">#</a> 3. 写一个 shell 脚本，每隔 10 秒，检查当前系统中有没有进程名字为 “firefox” 的进程，如果有的话显示 “firefox 进程出现了！” 并退出，返回码设置为等待的秒数。</h5>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">do</span>\nprocess <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">`</span>pgrep <span class=\"token parameter variable\">-f</span> firefox<span class=\"token variable\">`</span></span>\n<span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>process&#125;</span> <span class=\"token parameter variable\">-gt</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">then</span>\n\t\t<span class=\"token builtin class-name\">echo</span> “firefox进程出现了！”\n\t\t<span class=\"token builtin class-name\">echo</span> “等待时间为：<span class=\"token variable\">$i</span>”\n\t\t<span class=\"token builtin class-name\">break</span>\n\t<span class=\"token keyword\">else</span>\n\t\ti <span class=\"token operator\">=</span> i+10\n\t\t<span class=\"token function\">sleep</span> <span class=\"token number\">10</span>\n<span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h5 id=\"4写一个脚本持续监视用户stu是否登录如果登录了就每隔1分钟把你的用户名和qq号码发给他重复发送3次为止\"><a class=\"anchor\" href=\"#4写一个脚本持续监视用户stu是否登录如果登录了就每隔1分钟把你的用户名和qq号码发给他重复发送3次为止\">#</a> 4. 写一个脚本，持续监视用户 stu 是否登录，如果登录了，就每隔 1 分钟把你的用户名和 QQ 号码发给他，重复发送 3 次为止。</h5>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">do</span>\n\t<span class=\"token assign-left variable\">user</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">who</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-w</span> “stu”<span class=\"token variable\">`</span></span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>user&#125;</span> <span class=\"token parameter variable\">-gt</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">then</span>\n\t\t<span class=\"token builtin class-name\">echo</span> “please enter message and press ctrl + D”\n\t\t<span class=\"token function\">write</span> stu\n\t\t<span class=\"token function\">sleep</span> <span class=\"token number\">60</span>\n\t\t<span class=\"token builtin class-name\">echo</span> “please enter message and press ctrl + D”\n\t\t<span class=\"token function\">write</span> stu\n\t\t<span class=\"token function\">sleep</span> <span class=\"token number\">60</span>\n\t\t<span class=\"token builtin class-name\">echo</span> “please enter message and press ctrl + D”\n\t\t<span class=\"token function\">write</span> stu\n\t\t<span class=\"token function\">sleep</span> <span class=\"token number\">60</span>\n\t\t<span class=\"token builtin class-name\">break</span>\n\t<span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h5 id=\"5\"><a class=\"anchor\" href=\"#5\">#</a> 5.</h5>\n<p><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">until</span> <span class=\"token function\">who</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> “<span class=\"token variable\">$1</span>” <span class=\"token operator\">></span> /dev/null\n<span class=\"token keyword\">do</span>\n\t<span class=\"token function\">sleep</span> <span class=\"token number\">60</span>\n<span class=\"token keyword\">done</span>\n<span class=\"token builtin class-name\">echo</span> “*****<span class=\"token variable\">$1</span> has just logged in****”\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n",
            "tags": [
                "Linux"
            ]
        }
    ]
}